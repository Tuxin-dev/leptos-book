msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2024-02-19T14:40:50+01:00\n"
"PO-Revision-Date: 2024-03-20 10:23+0100\n"
"Last-Translator: Jean-Pierre <tuxin@free.fr>\n"
"Language-Team: French\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: fr\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"X-Generator: Poedit 2.3\n"

#: src/SUMMARY.md:1
msgid "Summary"
msgstr "Sommaire"

#: src/SUMMARY.md:3 src/01_introduction.md:1
msgid "Introduction"
msgstr "Introduction"

#: src/SUMMARY.md:4 src/getting_started/index.md:1 src/router/16_routes.md:3
msgid "Getting Started"
msgstr "Commencer"

#: src/SUMMARY.md:5
msgid "Leptos DX"
msgstr "Expérience Développeur Leptos"

#: src/SUMMARY.md:6
msgid "The Leptos Community and leptos-\\* Crates"
msgstr "La communauté Leptos et les crates leptos-*"

#: src/SUMMARY.md:7 src/view/index.md:1
msgid "Part 1: Building User Interfaces"
msgstr "Partie 1 : Création d'interfaces utilisateur"

#: src/SUMMARY.md:8 src/view/01_basic_component.md:1
msgid "A Basic Component"
msgstr "Un composant essentiel"

#: src/SUMMARY.md:9 src/view/02_dynamic_attributes.md:109
msgid "Dynamic Attributes"
msgstr "Les attributs dynamiques"

#: src/SUMMARY.md:10 src/view/03_components.md:1
msgid "Components and Props"
msgstr "Composants et propriétés"

#: src/SUMMARY.md:11 src/view/04_iteration.md:1
msgid "Iteration"
msgstr "Itération"

#: src/SUMMARY.md:12
msgid "Iterating over More Complex Data"
msgstr "Itération sur des données plus complexes"

#: src/SUMMARY.md:13 src/view/05_forms.md:1
msgid "Forms and Inputs"
msgstr "Formulaires et zones de saisie"

#: src/SUMMARY.md:14 src/view/06_control_flow.md:1
msgid "Control Flow"
msgstr "Le flux de contrôle"

#: src/SUMMARY.md:15 src/view/07_errors.md:1
msgid "Error Handling"
msgstr "Gestion des erreurs"

#: src/SUMMARY.md:16 src/view/08_parent_child.md:1
msgid "Parent-Child Communication"
msgstr "Communication Parent-Enfant"

#: src/SUMMARY.md:17
msgid "Passing Children to Components"
msgstr "Transmettre les enfants aux composants"

#: src/SUMMARY.md:18 src/view/builder.md:1
msgid "No Macros: The View Builder Syntax"
msgstr "Pas de macros : La syntaxe du constructeur de vues"

#: src/SUMMARY.md:19 src/reactivity/index.md:1
msgid "Reactivity"
msgstr "Réactivité"

#: src/SUMMARY.md:20 src/reactivity/working_with_signals.md:1
msgid "Working with Signals"
msgstr "Utiliser les signaux"

#: src/SUMMARY.md:21 src/reactivity/14_create_effect.md:1
msgid "Responding to Changes with `create_effect`"
msgstr "Répondre aux changements avec `create_effect`"

#: src/SUMMARY.md:22 src/reactivity/interlude_functions.md:1
msgid "Interlude: Reactivity and Functions"
msgstr "Intermède : Réactivité et Fonctions"

#: src/SUMMARY.md:23
msgid "Testing"
msgstr "Tests"

#: src/SUMMARY.md:24
msgid "Async"
msgstr "Async"

#: src/SUMMARY.md:25 src/async/10_resources.md:1
msgid "Loading Data with Resources"
msgstr "Chargement de données avec des ressources"

#: src/SUMMARY.md:26
msgid "Suspense"
msgstr "Suspense"

#: src/SUMMARY.md:27
msgid "Transition"
msgstr "Transition"

#: src/SUMMARY.md:28
msgid "Actions"
msgstr "Les Actions"

#: src/SUMMARY.md:29
msgid "Interlude: Projecting Children"
msgstr "Intermède : La projection des enfants"

#: src/SUMMARY.md:30 src/15_global_state.md:1
msgid "Global State Management"
msgstr "Gestion de l'État global"

#: src/SUMMARY.md:31
msgid "Router"
msgstr "Le Routeur"

#: src/SUMMARY.md:32 src/router/16_routes.md:53
msgid "Defining `<Routes/>`"
msgstr "Définition de  `<Routes/>`"

#: src/SUMMARY.md:33 src/router/17_nested_routing.md:1
msgid "Nested Routing"
msgstr "Routage imbriqué"

#: src/SUMMARY.md:34 src/router/18_params_and_queries.md:1
msgid "Params and Queries"
msgstr "Paramètres et requêtes"

#: src/SUMMARY.md:35
msgid "`<A/>`"
msgstr "`<A/>`"

#: src/SUMMARY.md:36
msgid "`<Form/>`"
msgstr "`<Form/>`"

#: src/SUMMARY.md:37 src/interlude_styling.md:1
msgid "Interlude: Styling"
msgstr "Intermède: Style"

#: src/SUMMARY.md:38 src/metadata.md:1
msgid "Metadata"
msgstr "Métadata"

#: src/SUMMARY.md:39
msgid ""
"Integrating with JavaScript: `wasm-bindgen`, `web_sys`, and `HtmlElement`"
msgstr ""
"Intégration avec JavaScript : `wasm-bindgen`, `web_sys`, et `HtmlElement`"

#: src/SUMMARY.md:40
msgid "Client-Side Rendering: Wrapping Up"
msgstr "Rendu côté client : Conclusion"

#: src/SUMMARY.md:41 src/ssr/index.md:1
msgid "Part 2: Server Side Rendering"
msgstr "Partie 2: Rendu côté serveur"

#: src/SUMMARY.md:42
msgid "`cargo-leptos`"
msgstr "`cargo-leptos`"

#: src/SUMMARY.md:43 src/ssr/22_life_cycle.md:1
msgid "The Life of a Page Load"
msgstr "Le cycle de vie du chargement d'une page"

#: src/SUMMARY.md:44 src/ssr/23_ssr_modes.md:1
msgid "Async Rendering and SSR “Modes”"
msgstr "Rendu d'un Async et “Modes” SSR"

#: src/SUMMARY.md:45
msgid "Hydration Bugs"
msgstr "Les bugs de l'hydratation"

#: src/SUMMARY.md:46 src/server/index.md:1
msgid "Working with the Server"
msgstr "Utilisation du serveur"

#: src/SUMMARY.md:47 src/server/25_server_functions.md:1
msgid "Server Functions"
msgstr "Les fonctions du serveur"

#: src/SUMMARY.md:48 src/server/26_extractors.md:1
msgid "Extractors"
msgstr "Les extracteurs"

#: src/SUMMARY.md:49 src/server/27_response.md:1
msgid "Responses and Redirects"
msgstr "Réponses et redirections"

#: src/SUMMARY.md:50
msgid "Progressive Enhancement and Graceful Degradation"
msgstr "Amélioration progressive et dégradation gracieuse"

#: src/SUMMARY.md:51
msgid "`<ActionForm/>`s"
msgstr "Les `<ActionForm/>`"

#: src/SUMMARY.md:52 src/deployment/index.md:1
msgid "Deployment"
msgstr "Déploiement"

#: src/SUMMARY.md:53
msgid "Deploying CSR Apps"
msgstr "Déploiement des Applications CSR"

#: src/SUMMARY.md:54
msgid "Deploying SSR Apps"
msgstr "Déploiement des Applications SSR"

#: src/SUMMARY.md:55 src/deployment/binary_size.md:1
msgid "Optimizing WASM Binary Size"
msgstr "Optimiser la taille d'un binaire WASM"

#: src/SUMMARY.md:56 src/islands.md:1
msgid "Guide: Islands"
msgstr "Guide: 'Islands'"

#: src/SUMMARY.md:58
msgid "Appendix: How Does the Reactive System Work?"
msgstr "Annexe : Comment fonctionne le système réactif ?"

#: src/01_introduction.md:3
msgid ""
"This book is intended as an introduction to the [Leptos](https://github.com/"
"leptos-rs/leptos) Web framework. It will walk through the fundamental "
"concepts you need to build applications, beginning with a simple application "
"rendered in the browser, and building toward a full-stack application with "
"server-side rendering and hydration."
msgstr ""
"Ce livre est une introduction au framework Web [Leptos](https://github.com/"
"leptos-rs/leptos). Il aborde les concepts fondamentaux nécessaires pour "
"créer des applications, en commençant par une application simple, dont le "
"rendu s'effectuera dans un navigateur, et en progressant vers une "
"application full-stack dont le rendu et l'hydratation s'effectueront côté "
"serveur."

#: src/01_introduction.md:8
msgid ""
"The guide doesn’t assume you know anything about fine-grained reactivity or "
"the details of modern Web frameworks. It does assume you are familiar with "
"the Rust programming language, HTML, CSS, and the DOM and basic Web APIs."
msgstr ""
"Ce guide ne présume aucunement que vous connaissiez quoi que ce soit sur la "
"réactivité affinée ou sur les détails des frameworks Web modernes. En "
"revanche, il suppose que vous êtes familier avec le langage de programmation "
"Rust, le HTML, le CSS, le DOM, et les API Web de base."

#: src/01_introduction.md:12
msgid ""
"Leptos is most similar to frameworks like [Solid](https://www.solidjs.com) "
"(JavaScript) and [Sycamore](https://sycamore-rs.netlify.app/) (Rust). There "
"are some similarities to other frameworks like React (JavaScript), Svelte "
"(JavaScript), Yew (Rust), and Dioxus (Rust), so knowledge of one of those "
"frameworks may also make it easier to understand Leptos."
msgstr ""
"Leptos est très similaire aux frameworks tels que [Solid](https://www."
"solidjs.com) (Javascript) et [Sycamore](https://sycamore-rs.netlify.app/) "
"(Rust). Il possède quelques similitudes avec d'autres frameworks comme React "
"(JavaScript), Svelte (JavaScript), Yew (Rust) et Dioxus (Rust), de sorte que "
"la connaissance d'un de ces frameworks pourra aussi faciliter la "
"compréhension de Leptos."

#: src/01_introduction.md:18
msgid ""
"You can find more detailed docs for each part of the API at [Docs.rs]"
"(https://docs.rs/leptos/latest/leptos/)."
msgstr ""
"Une documentation plus détaillée pour chaque partie de l'API est disponible "
"sur la page [Docs.rs](https://docs.rs/leptos/latest/leptos/)."

#: src/01_introduction.md:20
msgid ""
"The source code for the book is available [here](https://github.com/leptos-"
"rs/book). PRs for typos or clarification are always welcome."
msgstr ""
"Le code source de ce livre est disponible [ici](https://github.com/leptos-rs/"
"book). Les Pull Requests concernant les fautes de frappe ou une "
"clarification sont toujours les bienvenus."

#: src/getting_started/index.md:3
msgid "There are two basic paths to getting started with Leptos:"
msgstr "Il y a deux façons de commencer avec Leptos :"

#: src/getting_started/index.md:5
msgid ""
"**Client-side rendering (CSR) with [Trunk](https://trunkrs.dev/)** - a great "
"option if you just want to make a snappy website with Leptos, or work with a "
"pre-existing server or API. In CSR mode, Trunk compiles your Leptos app to "
"WebAssembly (WASM) and runs it in the browser like a typical Javascript "
"single-page app (SPA). The advantages of Leptos CSR include faster build "
"times and a quicker iterative development cycle, as well as a simpler mental "
"model and more options for deploying your app. CSR apps do come with some "
"disadvantages: initial load times for your end users are slower compared to "
"a server-side rendering approach, and the usual SEO challenges that come "
"along with using a JS single-page app model apply to Leptos CSR apps as "
"well. Also note that, under the hood, an auto-generated snippet of JS is "
"used to load the Leptos WASM bundle, so JS _must_ be enabled on the client "
"device for your CSR app to display properly. As with all software "
"engineering, there are trade-offs here you'll need to consider."
msgstr ""
"**Rendu côté client (CSR) avec [Trunk](https://trunkrs.dev/)** - une "
"excellente option si vous voulez simplement faire un site Web rapide avec "
"Leptos, ou travailler sur un serveur ou une API préexistante. En mode CSR, "
"Trunk compile votre application Leptos pour WebAssembly (WASM) et l'exécute "
"dans le navigateur comme une application JavaScript monopage (SPA) typique. "
"Les avantages de Leptos CSR incluent des temps de compilation et un cycle de "
"développement itératif plus rapides, ainsi qu'un modèle mental plus simple "
"et plus d'options pour déployer votre application. Les applications CSR "
"possèdent quelques inconvénients : les temps de chargement initiaux pour les "
"utilisateurs finaux sont plus lents par rapport à une approche de rendu côté "
"serveur, et les habituels défis SEO qui accompagnent l'utilisation d'un "
"modèle d'application JS monopage s'appliquent aussi aux applications CSR de "
"Leptos. Notez également que, sous le capot, un extrait de JS auto-généré est "
"utilisé pour charger le bundle WASM de Leptos, de sorte que JS _doit_ être "
"activé sur l'appareil client pour que votre application CSR s'affiche "
"correctement. Comme pour toute ingénierie logicielle, il y a des compromis "
"que vous devrez prendre en compte."

#: src/getting_started/index.md:8
msgid ""
"**Full-stack, server-side rendering (SSR) with [`cargo-leptos`](https://"
"github.com/leptos-rs/cargo-leptos)** - SSR is a great option for building "
"CRUD-style websites and custom web apps if you want Rust powering both your "
"frontend and backend. With the Leptos SSR option, your app is rendered to "
"HTML on the server and sent down to the browser; then, WebAssembly is used "
"to instrument the HTML so your app becomes interactive - this process is "
"called 'hydration'. On the server side, Leptos SSR apps integrate closely "
"with your choice of either [Actix-web](https://docs.rs/leptos_actix/latest/"
"leptos_actix/index.html) or [Axum](https://docs.rs/leptos_axum/latest/"
"leptos_axum/index.html) server libraries, so you can leverage those "
"communities' crates to help build out your Leptos server. The advantages of "
"taking the SSR route with Leptos include helping you get the best initial "
"load times and optimal SEO scores for your web app. SSR apps can also "
"dramatically simplify working across the server/client boundary via a Leptos "
"feature called \"server functions\", which lets you transparently call "
"functions on the server from your client code (more on this feature later). "
"Full-stack SSR isn't all rainbows and butterflies, though - disadvantages "
"include a slower developer iteration loop (because you need to recompile "
"both the server and client when making Rust code changes), as well as some "
"added complexity that comes along with hydration."
msgstr ""
"**Full-stack, rendu côté serveur (SSR) avec [`cargo-leptos`](https://github."
"com/leptos-rs/cargo-leptos)** - Le SSR est une excellente option pour créer "
"des sites Web de style CRUD et des applications Web personnalisées si vous "
"voulez que Rust alimente à la fois votre frontend et votre backend. Avec "
"l'option SSR de Leptos, le rendu de votre application en HTML est effectuée "
"sur le serveur, puis envoyée au navigateur; ensuite, WebAssembly est utilisé "
"pour arranger le HTML afin que votre application devienne interactive - ce "
"processus est appelé «hydratation». Côté serveur, les applications Leptos "
"SSR s'intègrent étroitement avec votre choix de bibliothèques serveurs "
"[Actix-web](https://docs.rs/leptos_actix/latest/leptos_actix/index.html) ou "
"[Axum](https://docs.rs/leptos_axum/latest/leptos_axum/index.html), de sorte "
"que vous puissiez tirer parti des crates de ces communautés pour vous aider "
"à créer votre serveur Leptos. Les avantages de l'utilisation du SSR avec "
"Leptos incluent l'obtention des meilleurs temps de chargement initiaux, et "
"des scores de référencement optimaux pour votre application Web. Les "
"applications SSR peuvent également simplifier considérablement le travail à "
"travers la frontière serveur/client, grâce à une fonctionnalité de Leptos "
"appelée \"fonctions serveur\". Elle vous permet d'appeler de manière "
"transparente les fonctions présentes sur le serveur, à partir de votre code "
"client (nous reviendrons sur cette fonctionnalité plus tard). Cependant, le "
"full-stack SSR n'est pas tout rose - les inconvénients comprennent une "
"boucle d'itération pour le développeur plus lente (parce que vous devez "
"recompiler à la fois le serveur et le client lorsque vous apportez des "
"modifications au code Rust), ainsi qu'une certaine complexité supplémentaire "
"amenée avec l'hydratation."

#: src/getting_started/index.md:12
msgid ""
"By the end of the book, you should have a good idea of which trade-offs to "
"make and which route to take - CSR or SSR - depending on your project's "
"requirements."
msgstr ""
"À la fin du livre, vous devriez avoir une bonne idée des compromis à faire "
"et de la voie à suivre - CSR ou SSR - en fonction des exigences de votre "
"projet."

#: src/getting_started/index.md:15
msgid ""
"In Part 1 of this book, we'll start with client-side rendering Leptos sites "
"and building reactive UI's using `Trunk` to serve our JS and WASM bundle to "
"the browser."
msgstr ""
"Dans la partie 1 de ce livre, nous commencerons par le rendu côté client des "
"sites Leptos, ainsi que la construction d'interfaces utilisateur réactives, "
"en utilisant `Trunk` pour fournir notre pack JS et Wasm au navigateur."

#: src/getting_started/index.md:17
msgid ""
"We’ll introduce `cargo-leptos` in Part 2 of this book, which is all about "
"working with the full power of Leptos in its full-stack, SSR mode."
msgstr ""
"Nous présenterons `cargo-leptos` dans la deuxième partie de ce livre, qui "
"traite de l'utilisation de toute la puissance de Leptos en full-stack, dans "
"son mode SSR."

#: src/getting_started/index.md:19
msgid ""
"```admonish note\n"
"If you're coming from the Javascript world and terms like client-side "
"rendering (CSR) and server-side rendering (SSR) are unfamiliar to you, the "
"easiest way to understand the difference is by analogy:\n"
"\n"
"Leptos' CSR mode is similar to working with React (or a 'signals'-based "
"framework like SolidJS), and focuses on producing a client-side UI which you "
"can use with any tech stack on the server.\n"
"\n"
"Using Leptos' SSR mode is similar to working with a full-stack framework "
"like Next.js in the React world (or Solid's \"SolidStart\" framework) - SSR "
"helps you build sites and apps that are rendered on the server then sent "
"down to the client. SSR can help to improve your site's loading performance "
"and accessibility as well as make it easier for one person to work on *both* "
"client- and server-side without needing to context-switch between different "
"languages for frontend and backend.\n"
"\n"
"The Leptos framework can be used either in CSR mode to just make a UI (like "
"React), or you can use Leptos in full-stack SSR mode (like Next.js) so that "
"you can build both your UI and your server with one language: Rust.\n"
"\n"
"```"
msgstr ""
"```Avertissement\n"
"Si vous venez du monde Javascript et que des termes comme le rendu côté "
"client (CSR) et le rendu côté serveur (SSR) ne vous sont pas familiers, la "
"façon la plus simple de comprendre la différence est par analogie :\n"
"\n"
"Le mode CSR de Leptos est similaire au fonctionnement de React (ou d'un "
"framework basé sur les signaux comme SolidJS), et se concentre sur la "
"production d'une interface utilisateur côté client que vous pouvez utiliser "
"avec n'importe quelle pile technologique sur le serveur.\n"
"\n"
"L'utilisation du mode SSR de Leptos est similaire au fonctionnement d'un "
"framework full-stack comme Next.js dans le monde React (ou le framework "
"\"SolidStart\" de Solid) - SSR vous aide à construire des sites et des "
"applications qui sont rendus sur le serveur puis envoyés au client. SSR peut "
"aider à améliorer les performances de chargement et l'accessibilité de votre "
"site, ainsi qu'à faciliter le travail d'une personne sur le client et le "
"serveur sans qu'elle ait besoin de changer de langage pour le frontend et le "
"backend.\n"
"\n"
"Le framework Leptos peut être utilisé soit en mode CSR pour créer une "
"interface utilisateur (comme React), soit en mode SSR (comme Next.js) pour "
"construire l'interface utilisateur et le serveur avec un seul langage : "
"Rust.\n"
"\n"
"```"

#: src/getting_started/index.md:30
msgid "Hello World! Getting Set up for Leptos CSR Development"
msgstr "Hello World! Mise en place du développement Leptos CSR"

#: src/getting_started/index.md:32
msgid ""
"First up, make sure Rust is installed and up-to-date ([see here if you need "
"instructions](https://www.rust-lang.org/tools/install))."
msgstr ""
"Tout d'abord, assurez-vous que Rust est installé et à jour ([voir ici si "
"vous avez besoin d'instructions](https://www.rust-lang.org/tools/install))."

#: src/getting_started/index.md:34
msgid ""
"If you don’t have it installed already, you can install the \"Trunk\" tool "
"for running Leptos CSR sites by running the following on the command-line:"
msgstr ""
"Si vous n'avez pas encore installé l'outil \"Trunk\", vous pouvez "
"l'installer, afin de gérer les sites CSR de Leptos, en exécutant ce qui suit "
"sur la ligne de commande :"

#: src/getting_started/index.md:40
msgid "And then create a basic Rust project"
msgstr "Ensuite, créez un projet Rust de base"

#: src/getting_started/index.md:46
msgid ""
"`cd` into your new `leptos-tutorial` project and add `leptos` as a dependency"
msgstr ""
"`cd` dans votre nouveau projet `leptos-tutorial` et ajoutez `leptos` comme "
"dépendance"

#: src/getting_started/index.md:52
msgid "Or you can leave off `nightly` if you're using stable Rust"
msgstr ""
"Vous pouvez aussi ne pas utiliser `nightly` si vous utilisez la version "
"stable de Rust"

#: src/getting_started/index.md:58
msgid ""
"Using `nightly` Rust, and the `nightly` feature in Leptos enables the "
"function-call syntax for signal getters and setters that is used in most of "
"this book."
msgstr ""
"Utiliser `nightly` Rust, et la fonctionnalité `nightly` de Leptos permet "
"d'utiliser la syntaxe d'appel de fonctions, pour les getters et setters des "
"signaux, qui est utilisée dans la plus grande partie de ce livre."

#: src/getting_started/index.md:60
msgid ""
"To use nightly Rust, you can either opt into nightly for all your Rust "
"projects by running"
msgstr ""
"Pour utiliser nightly Rust, vous pouvez soit opter pour nightly dans tous "
"vos projets Rust, en lançant"

#: src/getting_started/index.md:67
msgid "or only for this project"
msgstr "ou seulement pour ce projet"

#: src/getting_started/index.md:75
msgid ""
"[See here for more details.](https://doc.rust-lang.org/book/appendix-07-"
"nightly-rust.html)"
msgstr ""
"[Voir ici pour plus de détails.](https://doc.rust-lang.org/book/appendix-07-"
"nightly-rust.html)"

#: src/getting_started/index.md:77
msgid ""
"If you’d rather use stable Rust with Leptos, you can do that too. In the "
"guide and examples, you’ll just use the [`ReadSignal::get()`](https://docs."
"rs/leptos/latest/leptos/struct.ReadSignal.html#impl-SignalGet%3CT%3E-for-"
"ReadSignal%3CT%3E) and [`WriteSignal::set()`](https://docs.rs/leptos/latest/"
"leptos/struct.WriteSignal.html#impl-SignalGet%3CT%3E-for-ReadSignal%3CT%3E) "
"methods instead of calling signal getters and setters as functions."
msgstr ""
"Si vous préférez utiliser Rust stable avec Leptos, vous pouvez aussi le "
"faire. Dans ce guide et ses exemples, vous utiliserez simplement les "
"méthodes [`ReadSignal::get()`](https://docs.rs/leptos/latest/leptos/struct."
"ReadSignal.html#impl-SignalGet%3CT%3E-for-ReadSignal%3CT%3E) et "
"[`WriteSignal::set()`](https://docs.rs/leptos/latest/leptos/struct."
"WriteSignal.html#impl-SignalGet%3CT%3E-for-ReadSignal%3CT%3E) au lieu "
"d'appeler les getters et setters de signaux en tant que fonctions."

#: src/getting_started/index.md:79
msgid ""
"Make sure you've added the `wasm32-unknown-unknown` target so that Rust can "
"compile your code to WebAssembly to run in the browser."
msgstr ""
"Assurez-vous d'avoir ajouté la cible `wasm32-unknown-unknown` afin que Rust "
"puisse compiler votre code en WebAssembly pour l'exécuter dans le navigateur."

#: src/getting_started/index.md:85
msgid ""
"Create a simple `index.html` in the root of the `leptos-tutorial` directory"
msgstr ""
"Créer un simple `index.html` à la racine du répertoire `leptos-tutorial`"

#: src/getting_started/index.md:95
msgid "And add a simple “Hello, world!” to your `main.rs`"
msgstr "Et ajoutez un simple \"Hello, world !\" dans votre `main.rs`"

#: src/getting_started/index.md:101
msgid "\"Hello, world!\""
msgstr "\"Hello, world!\""

#: src/getting_started/index.md:105
msgid "Your directory structure should now look something like this"
msgstr "La structure de votre répertoire devrait maintenant ressembler à ceci"

#: src/getting_started/index.md:115
msgid ""
"Now run `trunk serve --open` from the root of the `leptos-tutorial` "
"directory. Trunk should automatically compile your app and open it in your "
"default browser. If you make edits to `main.rs`, Trunk will recompile your "
"source code and live-reload the page."
msgstr ""
"Maintenant, lancez `trunk serve --open` depuis la racine du répertoire "
"`leptos-tutorial`. Trunk devrait automatiquement compiler votre application "
"et l'ouvrir dans votre navigateur par défaut. Si vous modifiez `main.rs`, "
"Trunk recompilera votre code source et rechargera la page en temps-réel."

#: src/getting_started/index.md:120
msgid ""
"Welcome to the world of UI development with Rust and WebAssembly (WASM), "
"powered by Leptos and Trunk!"
msgstr ""
"Bienvenue dans le monde du développement des interfaces utilisateur avec "
"Rust et WebAssembly (WASM), propulsé par Leptos et Trunk !"

#: src/getting_started/index.md:124
msgid ""
"Now before we get started building your first real UI's with Leptos, there "
"are a couple of things you might want to know to help make your experience "
"with Leptos just a little bit easier."
msgstr ""
"Avant de commencer à construire vos premières interfaces utilisateur avec "
"Leptos, il y a deux ou trois choses que vous voudrez peut-être savoir pour "
"rendre votre expérience avec Leptos un peu plus facile."

#: src/getting_started/leptos_dx.md:1
msgid "Leptos Developer Experience Improvements"
msgstr "Amélioration de l'expérience développeurs Leptos"

#: src/getting_started/leptos_dx.md:4
msgid ""
"There are a couple of things you can do to improve your experience of "
"developing websites and apps with Leptos. You may want to take a few minutes "
"and set up your environment to optimize your development experience, "
"especially if you want to code along with the examples in this book."
msgstr ""
"Pour améliorer votre expérience lors du développement de sites web et "
"d'applications avec Leptos, plusieurs choses peuvent être réalisées. Prenez "
"quelques minutes pour configurer votre environnement afin d'optimiser le "
"développement, en particulier si vous souhaitez coder en suivant les "
"exemples de ce livre."

#: src/getting_started/leptos_dx.md:6
msgid "1) Set up `console_error_panic_hook`"
msgstr "1) Configurer `console_error_panic_hook`"

#: src/getting_started/leptos_dx.md:8
msgid ""
"By default, panics that happen while running your WASM code in the browser "
"just throw an error in the browser with an unhelpful message like "
"`Unreachable executed` and a stack trace that points into your WASM binary."
msgstr ""
"Par défaut, les 'panics', qui se produisent lors de l'exécution de votre "
"code WASM dans le navigateur, déclenchent simplement une erreur dans le "
"navigateur avec un message négligeable tel `Unreachable executed`, "
"accompagné d'une trace de la pile pointant vers votre binaire WASM."

#: src/getting_started/leptos_dx.md:10
msgid ""
"With `console_error_panic_hook`, you get an actual Rust stack trace that "
"includes a line in your Rust source code."
msgstr ""
"Avec `console_error_panic_hook`, vous obtenez la trace de la pile actuelle "
"de Rust accompagné d'une ligne de votre code source Rust."

#: src/getting_started/leptos_dx.md:12
msgid "It's very easy to set up:"
msgstr "C'est très facile à configurer :"

#: src/getting_started/leptos_dx.md:13
msgid "Run `cargo add console_error_panic_hook` in your project"
msgstr ""
"Exécutez `cargo add console_error_panic_hook` dans le répertoire de votre "
"projet"

#: src/getting_started/leptos_dx.md:14
msgid "In your main function, add `console_error_panic_hook::set_once();`"
msgstr "Dans la fonction main, ajoutez `console_error_panic_hook::set_once();`"

#: src/getting_started/leptos_dx.md:16
msgid ""
"If this is unclear, [click here for an example](https://github.com/leptos-rs/"
"leptos/blob/main/examples/counter/src/main.rs#L4-L15)."
msgstr ""
"Si ce n'est pas clair, [cliquez ici pour un exemple](https://github.com/"
"leptos-rs/leptos/blob/main/examples/counter/src/main.rs#L4-L15)."

#: src/getting_started/leptos_dx.md:18
msgid "Now you should have much better panic messages in the browser console!"
msgstr ""
"Maintenant, vous devriez avoir de bien meilleurs messages de panique dans la "
"console du navigateur !"

#: src/getting_started/leptos_dx.md:20
msgid "2) Editor Autocompletion inside `#[component]` and `#[server]`"
msgstr ""
"Auto-completion de l'éditeur à l'intérieur de `#[component]` et `#[server]`"

#: src/getting_started/leptos_dx.md:22
#, fuzzy
msgid ""
"Because of the nature of macros (they can expand from anything to anything, "
"but only if the input is exactly correct at that instant) it can be hard for "
"rust-analyzer to do proper autocompletion and other support."
msgstr ""
"En raison de la nature des macros (ils peuvent se développer de tout à "
"n'importe quoi, mais seulement si l'entrée est exactement correcte à cet "
"instant), il peut être difficile pour rust-analyzer de faire une complétion "
"automatique correcte et d'autres supports."

#: src/getting_started/leptos_dx.md:25
#, fuzzy
msgid ""
"If you run into issues using these macros in your editor, you can explicitly "
"tell rust-analyzer to ignore certain proc macros. For the `#[server]` macro "
"especially, which annotates function bodies but doesn't actually transform "
"anything inside the body of your function, this can be really helpful."
msgstr ""
"Si vous rencontrez des problèmes en utilisant ces macros dans votre éditeur, "
"vous pouvez explicitement dire à rust-analyzer d'ignorer certaines macros "
"proc. Pour la macro `#[server]` en particulier, qui annote les corps de "
"fonction mais ne transforme rien à l'intérieur du corps de votre fonction, "
"cela peut être très utile."

#: src/getting_started/leptos_dx.md:27
msgid ""
"Starting in Leptos version 0.5.3, rust-analyzer support was added for the "
"`#[component]` macro, but if you run into issues, you may want to add "
"`#[component]` to the macro ignore list as well (see below). Note that this "
"means that rust-analyzer doesn't know about your component props, which may "
"generate its own set of errors or warnings in the IDE."
msgstr ""
"À partir de Leptos version 0.5.3, une prise en charge de rust-analyzer a été "
"ajoutée pour la macro `#[component]`, mais si vous rencontrez des erreurs, "
"vous voudrez peut-être ajouter `#[component]` à la liste des macros à "
"ignorer également (voir ci-dessous). Notez que cela signifie que rust-"
"analyzer ne reconnaîtra pas les propriétés de votre composant, qui peuvent "
"générer leur propre ensemble d'erreurs ou d'avertissements dans l'IDE."

#: src/getting_started/leptos_dx.md:30
msgid "VSCode `settings.json`:"
msgstr "VSCode `settings.json`:"

#: src/getting_started/leptos_dx.md:33
msgid "\"rust-analyzer.procMacro.ignored\""
msgstr "\"rust-analyzer.procMacro.ignored\""

#: src/getting_started/leptos_dx.md:34
msgid "\"leptos_macro\""
msgstr "\"leptos_macro\""

#: src/getting_started/leptos_dx.md:35
msgid ""
"// optional:\n"
"\t\t// \"component\",\n"
"\t\t\"server\""
msgstr ""
"// optionnel :\n"
"\t\t// \"component\",\n"
"\t\t\"server\""

#: src/getting_started/leptos_dx.md:42
msgid "neovim with lspconfig:"
msgstr "neovim avec lspconfig:"

#: src/getting_started/leptos_dx.md:45
msgid "'lspconfig'"
msgstr "'lspconfig'"

#: src/getting_started/leptos_dx.md:46
msgid "-- Other Configs ...\n"
msgstr "-- Autres Configurations ...\n"

#: src/getting_started/leptos_dx.md:48
msgid "\"rust-analyzer\""
msgstr "\"rust-analyzer\""

#: src/getting_started/leptos_dx.md:49
msgid "-- Other Settings ...\n"
msgstr "-- Autres Paramétrages ...\n"

#: src/getting_started/leptos_dx.md:53
msgid ""
"-- optional: --\n"
"                -- \"component\",\n"
"                \"server\""
msgstr ""
"-- optionnel : --\n"
"                -- \"component\",\n"
"                \"server\""

#: src/getting_started/leptos_dx.md:64
msgid "Helix, in `.helix/languages.toml`:"
msgstr "Helix, dans `.helix/languages.toml`:"

#: src/getting_started/leptos_dx.md:66
msgid ""
"```toml\n"
"[[language]]\n"
"name = \"rust\"\n"
"\n"
"[language-server.rust-analyzer]\n"
"config = { procMacro = { ignored =\n"
"    { leptos_macro =\n"
"        [\n"
"          # Optional:\n"
"          # \"component\",\n"
"          \"server\"\n"
"        ] } } }\n"
"```"
msgstr ""
"```toml\n"
"[[language]]\n"
"name = \"rust\"\n"
"\n"
"[language-server.rust-analyzer]\n"
"config = { procMacro = { ignored =\n"
"    { leptos_macro =\n"
"        [\n"
"          # Optionnel :\n"
"          # \"component\",\n"
"          \"server\"\n"
"        ] } } }\n"
"```"

#: src/getting_started/leptos_dx.md:80
msgid "3) Set up `leptosfmt` With Rust Analyzer (optional)"
msgstr "3) Configurer `leptosfmt` avec Rust Analyzer (optionnel)"

#: src/getting_started/leptos_dx.md:82
msgid ""
"\"leptosfmt\" is a formatter for the Leptos `view!` macro (inside of which "
"you'll typically write your UI code). Because the view! macro enables an "
"'RSX' (like JSX) style of writing your UI's, cargo-fmt has a harder time "
"auto-formatting your code that's inside the view! macro. leptosfmt is a "
"crate that solves your formattting issues and keeps your RSX-style UI code "
"looking nice and tidy!"
msgstr ""
"\"leptosfmt\" est un formateur pour la macro `View!` de Leptos (dans "
"laquelle vous écrirez généralement le code de votre interface utilisateur). "
"Comme la macro view! permet d'utiliser le style 'RSX' (comme JSX) pour "
"rédiger votre interface, cargo-fmt a plus de difficultés à formater "
"automatiquement votre code lorsqu'il se trouve à l'intérieur de la macro "
"view!. leptosfmt est une crate qui permet de résoudre vos problèmes de mise "
"en forme, elle maintient le code de l'interface utilisateur, de style RSX, "
"bien organisé !"

#: src/getting_started/leptos_dx.md:84
msgid ""
"leptosfmt can be installed and used via the commandline or from within your "
"code editor:"
msgstr ""
"leptosfmt peut être installé et utilisé via la ligne de commande ou depuis "
"votre éditeur de code :"

#: src/getting_started/leptos_dx.md:86
msgid "First, install the tool with `cargo install leptosfmt`."
msgstr "Tout d'abord, installez cet outil avec `cargo install leptosfmt`."

#: src/getting_started/leptos_dx.md:88
msgid ""
"If you just want to use the default options from the command line, just run "
"`leptosfmt ./**/*.rs` from the root of your project to format all the rust "
"files using leptosfmt."
msgstr ""
"Si vous souhaitez juste utiliser les options par défaut de la ligne de "
"commande, exécutez simplement `leptosfmt ./**/*. rs`, depuis la racine de "
"votre projet, afin de mettre en forme tous les fichiers de Rust à l'aide de "
"leptosfmt."

#: src/getting_started/leptos_dx.md:90
msgid ""
"If you wish to set up your editor to work with leptosfmt, or if you wish to "
"customize your leptosfmt experience, please see the instructions available "
"on the [leptosfmt github repo's README.md page](https://github.com/bram209/"
"leptosfmt)."
msgstr ""
"Si vous souhaitez configurer votre éditeur pour travailler avec leptosfmt, "
"ou si vous souhaitez personnaliser votre usage de leptosfmt, veuillez "
"consulter les instructions disponibles sur la page [leptosfmt github repo's "
"README.md](https://github.com/bram209/leptosfmt)."

#: src/getting_started/leptos_dx.md:92
msgid ""
"Just note that it's recommended to set up your editor with `leptosfmt` on a "
"per-workspace basis for best results."
msgstr ""
"Notez simplement qu'il est recommandé de configurer votre éditeur avec "
"`leptosfmt`, en fonction du workspace, pour de meilleurs résultats."

#: src/getting_started/community_crates.md:1
msgid "The Leptos Community and `leptos-*` Crates"
msgstr "La communauté Leptos et les crates `leptos-*`"

#: src/getting_started/community_crates.md:3
msgid "The Community"
msgstr "La communauté"

#: src/getting_started/community_crates.md:5
msgid ""
"One final note before we get to building with Leptos: if you haven't "
"already, feel free to join the growing community on the Leptos [Discord]"
"(https://discord.gg/YdRAhS7eQB) and on [Github](https://github.com/leptos-rs/"
"leptos). Our Discord channel in particular is very active and friendly - "
"we'd love to have you there!"
msgstr ""
"Une dernière note avant d'utiliser Leptos : si vous ne l'avez pas déjà fait, "
"n'hésitez pas à rejoindre la communauté, de plus en plus importante, sur le "
"[Discord](https://discord.gg/ydrahs7eqb) Leptos et sur [Github](https://"
"github.com/leptos-rs/leptos). Notre canal Discord, en particulier, est très "
"actif et convivial - nous serions ravis de vous y voir!"

#: src/getting_started/community_crates.md:7
msgid ""
"```admonish note\n"
"If you find a chapter or an explanation that isn't clear while you're "
"working your way through the Leptos book, just mention it in the \"docs-and-"
"education\" channel or ask a question in \"help\" so we can clear things up "
"and update the book for others.\n"
"```"
msgstr ""
"```note\n"
"Si vous trouvez un chapitre ou une explication pas très claire lors du "
"parcours de ce livre sur Leptos, il suffit de le mentionner dans le canal "
"\"ocs-and-education\", ou de poser une question dans \"help\", afin que nous "
"puissions effectuer les corrections, puis faire une mise à jour pour les "
"autres lecteurs.\n"
"```"

#: src/getting_started/community_crates.md:11
msgid ""
"As you get further along in your Leptos journey and find that you have "
"questions about \"how to do 'x' with Leptos\", then search the Discord \"help"
"\" channel to see if a similar question has been asked before, or feel free "
"to post your own question - the community is quite helpful and very "
"responsive."
msgstr ""
"Au fur et à mesure que vous avancez dans votre parcours de Leptos, si vous "
"avez des questions du type \"Comment faire telle chose avec Leptos\", "
"recherchez dans le canal \"help\" de Discord pour vérifier si une question "
"similaire a déjà été posée. Sinon, n'hésitez pas à postez votre propre "
"question - la communauté est assez utile et très réactive."

#: src/getting_started/community_crates.md:13
msgid ""
"The \"[Discussions](https://github.com/leptos-rs/leptos/discussions)\" on "
"Github are also a great place for asking questions and keeping up with "
"Leptos announcements."
msgstr ""
"L'onglet \"[Discussions](https://github.com/leptos-rs/leptos/discussions)\" "
"de Github est aussi un endroit idéal pour poser vos questions et suivre les "
"annonces à propos de Leptos."

#: src/getting_started/community_crates.md:15
msgid ""
"And of course, if you run into any bugs while developing with Leptos or "
"would like to make a feature request (or contribute a bug fix / new "
"feature), open up an issue on the [Github issue tracker](https://github.com/"
"leptos-rs/leptos/issues)."
msgstr ""
"Et bien sûr, si vous rencontrez des bogues pendant votre développement avec "
"Leptos, ou si vous souhaitez faire une demande de fonctionnalité (ou "
"contribuer à un correctif de bogue / à une nouvelle fonctionnalité), ouvrez "
"une demande sur le [GitHub issue tracker](https://github.com/leptos-rs/"
"leptos/issues)."

#: src/getting_started/community_crates.md:18
msgid "Leptos-\\* Crates"
msgstr "Les Crates Leptos-*"

#: src/getting_started/community_crates.md:20
msgid ""
"The community has built a growing number of Leptos-related crates that will "
"help you get productive with Leptos projects more quickly - check out the "
"list of crates built on top of Leptos and contributed by the community on "
"the [Awesome Leptos](https://github.com/leptos-rs/awesome-leptos) repo on "
"Github."
msgstr ""
"La communauté a construit un nombre croissant de crates qui vous aideront à "
"devenir productif plus rapidement avec les projets Leptos - consultez la "
"liste des crates s'appuyant sur Leptos, apportées par la communauté, sur le "
"dépôt [Awesome Leptos](https://github.com/leptos-rs/awesome-leptos) de "
"Github."

#: src/getting_started/community_crates.md:22
msgid ""
"If you want to find the newest, up-and-coming Leptos-related crates, check "
"out the \"Tools and Libraries\" section of the Leptos Discord. In that "
"section, there are channels for the Leptos `view!` macro formatter (in the "
"\"leptosfmt\" channel); there's a channel for the utility library \"leptos-"
"use\"; another channel for the UI component libary \"leptonic\";  and a "
"\"libraries\" channel where new `leptos-*` crates are discussed before "
"making their way into the growing list of crates and resources available on "
"[Awesome Leptos](https://github.com/leptos-rs/awesome-leptos)."
msgstr ""
"Si vous souhaitez trouver les crates les plus récentes et prometteuses, "
"liées à Leptos, consultez la section \"Tools and Libraries\" du Discord "
"Leptos. Dans cette section, il existe des canaux pour le formateur de la "
"macro Leptos `view!` (dans le canal \"leptosfmt\"); Il y a un canal pour la "
"bibliothèque d'utilitaires \"leptos-use\"; Un autre canal pour la "
"bibliothèque de composants UI \"leptonic\"; et un canal \"libraries\" où les "
"nouvelles crates `leptos-*` sont examinées avant de faire leur chemin dans "
"la liste croissante des crates et des ressources disponibles sur [Awesome "
"Leptos](https://github.com/leptos-rs/awesome-leptos)."

#: src/view/index.md:3
msgid ""
"In the first part of the book, we're going to look at building user "
"interfaces on the client-side using Leptos. Under the hood, Leptos and Trunk "
"are bundling up a snippet of Javascript which will load up the Leptos UI, "
"which has been compiled to WebAssembly to drive the interactivity in your "
"CSR (client-side rendered) website."
msgstr ""
"Dans la première partie du livre, nous allons nous pencher sur la création "
"d'interfaces utilisateur côté client, à l'aide de Leptos. Sous le capot, "
"Leptos et Trunk regroupent un 'snippet' en Javascript qui chargera "
"l'interface utilisateur de Leptos, compilée en WebAssembly pour piloter "
"l'interactivité de votre site web CSR (rendu côté client)."

#: src/view/index.md:5
msgid ""
"Part 1 will introduce you to the basic tools you need to build a reactive "
"user interface powered by Leptos and Rust. By the end of Part 1, you should "
"be able to build a snappy synchronous website that's rendered in the browser "
"and which you can deploy on any static-site hosting service, like Github "
"Pages or Vercel."
msgstr ""
"La partie 1 vous présentera les outils de base qui vous seront utiles pour "
"construire une interface utilisateur réactive basée sur Leptos et Rust. À la "
"fin de la partie 1, vous devriez être en mesure de construire un site web "
"synchrone, rapide, dont le rendu s'effectuera dans le navigateur, et que "
"vous pourrez déployer sur n'importe quel service d'hébergement de site "
"statique, tel Github Pages ou Vercel."

#: src/view/index.md:8
msgid ""
"```admonish info\n"
"To get the most out of this book, we encourage you to code along with the "
"examples provided.\n"
"In the [Getting Started](https://book.leptos.dev/getting_started/) and "
"[Leptos DX](https://book.leptos.dev/getting_started/leptos_dx.html) "
"chapters, we showed you how to set up a basic project with Leptos and Trunk, "
"including WASM error handling in the browser.\n"
"That basic setup is enough to get you started developing with Leptos.\n"
"\n"
"If you'd prefer to get started using a more full-featured template which "
"demonstrates how to set up a few of the basics you'd see in a real Leptos "
"project, such as routing, (covered later in the book), injecting `<Title>` "
"and `<Meta>` tags into the page head, and a few other niceties, then feel "
"free to utilize [the leptos-rs `start-trunk`](https://github.com/leptos-rs/"
"start-trunk) template repo to get up and running.\n"
"\n"
"The `start-trunk` template requires that you have `Trunk` and `cargo-"
"generate` installed, which you can get by running `cargo install trunk` and "
"`cargo install cargo-generate`.\n"
"\n"
"To use the template to set up your project, just run\n"
"\n"
"`cargo generate --git https://github.com/leptos-community/start-csr`\n"
"\n"
"then run\n"
"\n"
"`trunk serve --port 3000 --open`\n"
"\n"
"in the newly created app's directory to start developing your app.\n"
"The Trunk server will reload your app on file changes, making development "
"relatively seamless.\n"
"\n"
"```"
msgstr ""
"```information\n"
"Pour tirer le meilleur parti de ce livre, nous vous encourageons à coder "
"vous même les exemples fournis.\n"
"Dans les chapitres [Commencer](https://book.leptos.dev/getting_started/) et "
"[Expérience Développeur Leptos](https://book.leptos.dev/getting_started/"
"leptos_dx.html), nous vous avons montré comment configurer un projet initial "
"avec Leptos et Trunk, comprenant la gestion des erreurs WASM dans le "
"navigateur.\n"
"Cette configuration initiale est suffisante pour vous permettre de commencer "
"à développer avec Leptos.\n"
"\n"
"Si vous préférez commencer en utilisant un modèle plus complet qui indique "
"comment mettre en place quelques-uns des éléments primordiaux que vous "
"trouverez dans un vrai projet Leptos, tel le routage (couvert plus loin dans "
"le livre), l'injection de balises `<Title>` et `<Meta>` dans l'en-tête de la "
"page, ainsi que d'autres subtilités, alors n'hésitez pas à utiliser le dépôt "
"du modèle [the leptos-rs `start-trunk`](https://github.com/leptos-rs/start-"
"trunk) pour être opérationnel.\n"
"\n"
"Le modèle `start-trunk` nécessite que `Trunk` et `cargo-generate` soient "
"installés, ce que vous pouvez obtenir en exécutant `cargo install trunk` et "
"`cargo install cargo-generate`.\n"
"\n"
"Pour utiliser le modèle afin de mettre en place votre projet, exécutez "
"simplement\n"
"\n"
"`cargo generate --git https://github.com/leptos-community/start-csr`\n"
"\n"
"puis\n"
"\n"
"`trunk serve --port 3000 --open`\n"
"\n"
"dans le répertoire de l'application nouvellement créée, pour commencer le "
"développement de votre application.\n"
"Le serveur Trunk rechargera votre application à chaque modification de "
"fichier, ce qui rendra le développement relativement harmonieux.\n"
"\n"
"```"

#: src/view/01_basic_component.md:3
msgid ""
"That “Hello, world!” was a _very_ simple example. Let’s move on to something "
"a little more like an ordinary app."
msgstr ""
"Ce \"Hello, world !\" était un exemple _très_ simple. Passons à quelque "
"chose qui ressemble un peu plus à une application ordinaire."

#: src/view/01_basic_component.md:6
msgid ""
"First, let’s edit the `main` function so that, instead of rendering the "
"whole app, it just renders an `<App/>` component. Components are the basic "
"unit of composition and design in most web frameworks, and Leptos is no "
"exception. Conceptually, they are similar to HTML elements: they represent a "
"section of the DOM, with self-contained, defined behavior. Unlike HTML "
"elements, they are in `PascalCase`, so most Leptos applications will start "
"with something like an `<App/>` component."
msgstr ""
"Tout d'abord, modifions la fonction `main` pour qu'au lieu d'effectuer le "
"rendu pour toute l'application, elle le fasse uniquement pour le composant "
"`<App/>`. Les composants sont l'élément de base de la composition et de la "
"conception dans la plupart des frameworks web, Leptos ne fait pas exception. "
"Conceptuellement, ils sont similaires aux éléments HTML : ils représentent "
"une section du DOM, avec un comportement autonome et défini. Contrairement "
"aux éléments HTML, ils sont en `PascalCase`, de sorte que la plupart des "
"applications Leptos commenceront par un composant du genre `<App/>`."

#: src/view/01_basic_component.md:20
msgid ""
"Now let’s define our `<App/>` component itself. Because it’s relatively "
"simple, I’ll give you the whole thing up front, then walk through it line by "
"line."
msgstr ""
"Définissons maintenant notre composant `<App/>` lui-même. Puisque cela reste "
"relativement simple, je vais vous donner l'ensemble de la définition avant "
"de la parcourir ligne par ligne."

#: src/view/01_basic_component.md:31
msgid "// on stable, this is set_count.set(3);\n"
msgstr "// en version stable, ce sera set_count.set(3);\n"

#: src/view/01_basic_component.md:35 src/view/01_basic_component.md:132
#: src/view/02_dynamic_attributes.md:24
msgid "\"Click me: \""
msgstr "\"Cliquez moi : \""

#: src/view/01_basic_component.md:36
msgid "// on stable, this is move || count.get();\n"
msgstr "// en version stable, ce sera move || count.get();\n"

#: src/view/01_basic_component.md:43
msgid "The Component Signature"
msgstr "La signature du composant"

#: src/view/01_basic_component.md:49
msgid ""
"Like all component definitions, this begins with the [`#[component]`]"
"(https://docs.rs/leptos/latest/leptos/attr.component.html) macro. "
"`#[component]` annotates a function so it can be used as a component in your "
"Leptos application. We’ll see some of the other features of this macro in a "
"couple chapters."
msgstr ""
"Comme toutes les définitions de composants, cela commence par la macro "
"[`#[component]`](https://docs.rs/leptos/latest/leptos/attr.component.html). "
"`#[component]` annote une fonction afin qu'elle puisse être utilisée comme "
"composant dans votre application Leptos. Nous verrons certaines des autres "
"fonctionnalités de cette macro dans quelques chapitres."

#: src/view/01_basic_component.md:57
msgid "Every component is a function with the following characteristics"
msgstr "Chaque composant est une fonction avec les caractéristiques suivantes"

#: src/view/01_basic_component.md:59
msgid "It takes zero or more arguments of any type."
msgstr "Elle prend zéro ou plusieurs arguments de n'importe quel type."

#: src/view/01_basic_component.md:60
msgid ""
"It returns `impl IntoView`, which is an opaque type that includes anything "
"you could return from a Leptos `view`."
msgstr ""
"Elle renvoie `impl IntoView`, qui est un type opaque incluant tout ce que "
"l'on peut renvoyer d'une `view` de Leptos."

#: src/view/01_basic_component.md:63
msgid ""
"Component function arguments are gathered together into a single props "
"struct which is built by the `view` macro as needed."
msgstr ""
"Les arguments de fonction des composants sont rassemblés en une structure de "
"propriétés, construite par la macro `View`, comme requis."

#: src/view/01_basic_component.md:65
msgid "The Component Body"
msgstr "Le corps des composants"

#: src/view/01_basic_component.md:67
msgid ""
"The body of the component function is a set-up function that runs once, not "
"a render function that reruns multiple times. You’ll typically use it to "
"create a few reactive variables, define any side effects that run in "
"response to those values changing, and describe the user interface."
msgstr ""
"Le corps de la fonction du composant est une fonction de configuration qui "
"s'exécute une seule fois, ce n'est pas une fonction qui s'exécutera à chaque "
"rendu. Vous allez généralement l'utiliser pour créer quelques variables "
"réactives, définir les effets secondaires qui s'exécutent en réponse à la "
"modifications de ces valeurs, et décrire l'interface utilisateur."

#: src/view/01_basic_component.md:76
msgid ""
"[`create_signal`](https://docs.rs/leptos/latest/leptos/fn.create_signal."
"html) creates a signal, the basic unit of reactive change and state "
"management in Leptos. This returns a `(getter, setter)` tuple. To access the "
"current value, you’ll use `count.get()` (or, on `nightly` Rust, the "
"shorthand `count()`). To set the current value, you’ll call `set_count."
"set(...)` (or `set_count(...)`)."
msgstr ""
"[`create_signal`](https://docs.rs/leptos/latest/leptos/fn.create_signal."
"html) crée un signal, qui est l'unité de base du changement réactif et de la "
"gestion de l'État dans Leptos. Cela retourne un tuple `(getter, setter)`. "
"Pour accéder à la valeur actuelle, vous utiliserez `count.get()` (ou, en "
"configuration `Nightly` de Rust, le raccourci `count()`). Pour définir la "
"valeur actuelle, vous appellerez `set_count.set(...)` (ou `set_count(...)`)."

#: src/view/01_basic_component.md:82
msgid ""
"`.get()` clones the value and `.set()` overwrites it. In many cases, it’s "
"more efficient to use `.with()` or `.update()`; check out the docs for "
"[`ReadSignal`](https://docs.rs/leptos/latest/leptos/struct.ReadSignal.html) "
"and [`WriteSignal`](https://docs.rs/leptos/latest/leptos/struct.WriteSignal."
"html) if you’d like to learn more about those trade-offs at this point."
msgstr ""
"`.get()` clone la valeur et `.set()` la remplace. Dans de nombreux cas, il "
"est plus efficace d'utiliser `.with()` ou `.update()`; Vérifiez les "
"documents de [`ReadSignal`](https://docs.rs/leptos/latest/leptos/struct."
"ReadSignal.html) et [`WriteSignal`](https://docs.rs/leptos/latest/leptos/"
"struct.WriteSignal.html) si vous souhaitez en savoir plus sur ces compromis "
"à ce stade."

#: src/view/01_basic_component.md:84
msgid "The View"
msgstr "La vue"

#: src/view/01_basic_component.md:86
msgid ""
"Leptos defines user interfaces using a JSX-like format via the [`view`]"
"(https://docs.rs/leptos/latest/leptos/macro.view.html) macro."
msgstr ""
"Leptos définit les interfaces utilisateur à l'aide d'un format de type JSX "
"via la macro [`view`](https://docs.rs/leptos/latest/leptos/macro.view.html)."

#: src/view/01_basic_component.md:91
msgid "// define an event listener with on:\n"
msgstr "// Définit un écouteur d'événement avec on :\n"

#: src/view/01_basic_component.md:96
msgid ""
"// text nodes are wrapped in quotation marks\n"
"        \"Click me: \""
msgstr ""
"// Les nœuds de texte sont entourés de guillemets\n"
"        \"Cliquez moi : \""

#: src/view/01_basic_component.md:98
msgid "// blocks can include Rust code\n"
msgstr "// Les blocs peuvent inclure du code Rust\n"

#: src/view/01_basic_component.md:104
msgid ""
"This should mostly be easy to understand: it looks like HTML, with a special "
"`on:click` to define a `click` event listener, a text node that’s formatted "
"like a Rust string, and then..."
msgstr ""
"Cela devrait généralement être facile à comprendre : le code ressemble à du "
"HTML, avec un `on:click` spécialement pour définir un écouteur des "
"événements `click`, et un nœud de texte qui est formaté comme une chaîne "
"Rust, puis ..."

#: src/view/01_basic_component.md:112
msgid "whatever that is."
msgstr "quoi qu'il en soit."

#: src/view/01_basic_component.md:114
msgid ""
"People sometimes joke that they use more closures in their first Leptos "
"application than they’ve ever used in their lives. And fair enough. "
"Basically, passing a function into the view tells the framework: “Hey, this "
"is something that might change.”"
msgstr ""
"Les gens plaisantent parfois en indiquant qu’ils utilisent plus de closures "
"dans leur première application Leptos qu’ils n'en ont jamais utilisés dans "
"toute leur vie. C'est assez juste. Fondamentalement, passer une fonction à "
"la vue indique au framework : \"Hé, ceci est une chose qui pourrait changer."
"\""

#: src/view/01_basic_component.md:118
msgid ""
"When we click the button and call `set_count`, the `count` signal is "
"updated. This `move || count()` closure, whose value depends on the value of "
"`count`, reruns, and the framework makes a targeted update to that one "
"specific text node, touching nothing else in your application. This is what "
"allows for extremely efficient updates to the DOM."
msgstr ""
"Lorsque nous cliquons sur le bouton et appelons `set_count`, le signal "
"`count` est mis à jour. Cette closure `move || count()`, dont la valeur "
"dépend de la valeur de `count`, est réexécuté, et le framework fait une mise "
"à jour ciblée de ce nœud de texte spécifique, sans toucher à rien d'autre "
"dans votre application. C'est ce qui permet des mises à jour extrêmement "
"efficaces du DOM."

#: src/view/01_basic_component.md:124
msgid ""
"Now, if you have Clippy on—or if you have a particularly sharp eye—you might "
"notice that this closure is redundant, at least if you’re in `nightly` Rust. "
"If you’re using Leptos with `nightly` Rust, signals are already functions, "
"so the closure is unnecessary. As a result, you can write a simpler view:"
msgstr ""
"Maintenant, si vous avez Clippy - ou si vous avez un œil particulièrement "
"aiguisé - vous pourriez remarquer que cette closure est redondante, du moins "
"si vous êtes dans la configuration `nightly` de Rust. Si vous utilisez "
"Leptos avec Rust `nightly`, les signaux sont déjà des fonctions, donc la "
"closure n'est pas nécessaire.\n"
"En conséquence, vous pouvez écrire une vue plus simplement :"

#: src/view/01_basic_component.md:131 src/view/03_components.md:392
#: src/testing.md:18 src/testing.md:47 src/router/16_routes.md:43
#: src/router/16_routes.md:46 src/router/16_routes.md:68
#: src/router/16_routes.md:73 src/web_sys.md:111 src/web_sys.md:113
#: src/web_sys.md:119
msgid "/* ... */"
msgstr "/* ... */"

#: src/view/01_basic_component.md:133
msgid "// identical to {move || count()}\n"
msgstr "// identique à {move || count()}\n"

#: src/view/01_basic_component.md:139
#, fuzzy
msgid ""
"Remember—and this is _very important_—only functions are reactive. This "
"means that `{count}` and `{count()}` do very different things in your view. "
"`{count}` passes in a function, telling the framework to update the view "
"every time `count` changes. `{count()}` accesses the value of `count` once, "
"and passes an `i32` into the view, rendering it once, unreactively. You can "
"see the difference in the CodeSandbox below!"
msgstr ""
"N'oubliez pas que - et c'est _très important_ - seules les fonctions sont "
"réactives. Cela signifie que `{count}` et `{count()}` fonctionnent très "
"différemment dans une vue. `{count}` passé à une fonction, indique au "
"framework de mettre à jour la vue à chaque fois que `count` change.\n"
"`{count()}` accède à la valeur de `count` une seule fois, et passe un `i32` "
"à la vue, effectuant le rendu une fois, de manière non réactive. Vous pouvez "
"voir la différence dans la CodeSandbox ci-dessous !"

#: src/view/01_basic_component.md:145
#, fuzzy
msgid ""
"Let’s make one final change. `set_count(3)` is a pretty useless thing for a "
"click handler to do. Let’s replace “set this value to 3” with “increment "
"this value by 1”:"
msgstr ""
"Faisons une dernière modification. `set_count(3)` est une chose assez "
"inutile à faire pour un gestionnaire de clics. Remplaçons “Définir cette "
"valeur à 3“ par “incrémenter cette valeur de 1“ :"

#: src/view/01_basic_component.md:153
#, fuzzy
msgid ""
"You can see here that while `set_count` just sets the value, `set_count."
"update()` gives us a mutable reference and mutates the value in place. "
"Either one will trigger a reactive update in our UI."
msgstr ""
"Vous pouvez voir ici que même si `set_count` définit seulement la valeur, "
"`set_count.update()` nous donne une référence mutable et modifie la valeur "
"en place. L'un ou l'autre déclenchera une mise à jour réactive de notre "
"interface utilisateur."

#: src/view/01_basic_component.md:155
#, fuzzy
msgid ""
"Throughout this tutorial, we’ll use CodeSandbox to show interactive "
"examples. To show the browser in the sandbox, you may need to click `Add "
"DevTools > Other Previews > 8080.` Hover over any of the variables to show "
"Rust-Analyzer details and docs for what’s going on. Feel free to fork the "
"examples to play with them yourself!"
msgstr ""
"Tout au long de ce tutoriel, nous utiliserons la CodeSandbox pour afficher "
"des exemples interactifs. Pour afficher le navigateur dans le sandbox, vous "
"devrez peut-être cliquer sur `Add DevTools > Other Previews > 8080.` "
"Survolez chacune des variables pour voir les détails et la documentation de "
"Rust-Analyzer pour ce qu'il en est. N'hésitez pas à dupliquer les exemples "
"pour jouer avec eux vous-même !"

#: src/view/01_basic_component.md:160
msgid ""
"[Click to open CodeSandbox.](https://codesandbox.io/p/sandbox/1-basic-"
"component-3d74p3?file=%2Fsrc%2Fmain.rs%3A1%2C1)"
msgstr ""
"[Cliquez pour ouvrir le CodeSandbox.](https://codesandbox.io/p/sandbox/1-"
"basic-component-3d74p3?file=%2Fsrc%2Fmain.rs%3A1%2C1)"

#: src/view/01_basic_component.md:169
msgid ""
"// The #[component] macro marks a function as a reusable component\n"
"// Components are the building blocks of your user interface\n"
"// They define a reusable unit of behavior\n"
msgstr ""
"// La macro #[component] marque une fonction en tant que composant "
"réutilisable\n"
"// Les composants sont les éléments constitutifs de votre interface "
"utilisateur\n"
"// Ils définissent une unité de comportement réutilisable\n"

#: src/view/01_basic_component.md:175
msgid ""
"// here we create a reactive signal\n"
"    // and get a (getter, setter) pair\n"
"    // signals are the basic unit of change in the framework\n"
"    // we'll talk more about them later\n"
msgstr ""
"// ici, nous créons un signal réactif\n"
"    // et obtenons une paire (getter, setter)\n"
"    // Les signaux sont l'unité de base des changements dans le framework\n"
"    // Nous en parlerons plus tard\n"

#: src/view/01_basic_component.md:181
msgid ""
"// the `view` macro is how we define the user interface\n"
"    // it uses an HTML-like format that can accept certain Rust values\n"
msgstr ""
"// c'est ainsi que la macro `view` définit l'interface utilisateur\n"
"    // elle utilise un format de type HTML pouvant accepter certaines\n"
"    // valeurs de Rust\n"

#: src/view/01_basic_component.md:185
msgid ""
"// on:click will run whenever the `click` event fires\n"
"            // every event handler is defined as `on:{eventname}`\n"
msgstr ""
"// on:click s'exécutera chaque fois que l'événement\n"
"            // `click` se déclenchera.\n"
"            // Chaque gestionnaire d'événements est défini par\n"
"            // `on:{Eventname}`.\n"

#: src/view/01_basic_component.md:188
msgid ""
"// we're able to move `set_count` into the closure\n"
"            // because signals are Copy and 'static\n"
msgstr ""
"// Nous pouvons déplacer `set_count` dans la closure\n"
"            // car les signaux ont le Trait Copy et sont 'static\n"

#: src/view/01_basic_component.md:194
msgid ""
"// text nodes in RSX should be wrapped in quotes,\n"
"            // like a normal Rust string\n"
"            \"Click me\""
msgstr ""
"// Les nœuds de texte en RSX doivent être entourés\n"
"            // de guillemets, comme une chaîne Rust normale.\n"
"             \"Cliquez moi\""

#: src/view/01_basic_component.md:199
msgid "\"Reactive: \""
msgstr "\"Reactive: \""

#: src/view/01_basic_component.md:200
msgid ""
"// you can insert Rust expressions as values in the DOM\n"
"            // by wrapping them in curly braces\n"
"            // if you pass in a function, it will reactively update\n"
msgstr ""
"// Vous pouvez insérer des expressions Rust en tant que\n"
"            // valeurs dans le DOM en les entourant d'accolades.\n"
"            // Si vous les passez dans une fonction, ce sera mis à\n"
"            // jour de manière réactive.\n"

#: src/view/01_basic_component.md:206
msgid "\"Reactive shorthand: \""
msgstr "\"Reactive shorthand: \""

#: src/view/01_basic_component.md:207
msgid "// signals are functions, so we can remove the wrapping closure\n"
msgstr ""
"// Les signaux sont des fonctions, nous pouvons donc supprimer\n"
"            // la closure d'enpaquettage.\n"

#: src/view/01_basic_component.md:211
msgid "\"Not reactive: \""
msgstr "\"Not reactive: \""

#: src/view/01_basic_component.md:212
msgid ""
"// NOTE: if you write {count()}, this will *not* be reactive\n"
"            // it simply gets the value of count once\n"
msgstr ""
"// NOTE: si vous écrivez {count()}, ce ne sera *pas* réactif,\n"
"            // vous obtiendrez simplement la valeur du décompte une seule "
"fois\n"

#: src/view/01_basic_component.md:218 src/view/05_forms.md:340
#: src/15_global_state.md:391
msgid ""
"// This `main` function is the entry point into the app\n"
"// It just mounts our component to the <body>\n"
"// Because we defined it as `fn App`, we can now use it in a\n"
"// template as <App/>\n"
msgstr ""
"// Cette fonction `main` est le point d'entrée de l'application\n"
"// Elle monte simplement notre composant dans le <body>\n"
"// Puisque nous l'avons défini comme `fn App`, nous pouvons maintenant\n"
"// l'utiliser comme un template de <App/>\n"

#: src/view/02_dynamic_attributes.md:1
msgid "`view`: Dynamic Classes, Styles and Attributes"
msgstr "`view` : Classes, styles et attributs dynamiques"

#: src/view/02_dynamic_attributes.md:3
#, fuzzy
msgid ""
"So far we’ve seen how to use the `view` macro to create event listeners and "
"to create dynamic text by passing a function (such as a signal) into the "
"view."
msgstr ""
"Jusqu'à présent, nous avons vu comment utiliser la macro `view` pour créer "
"des écouteurs d'événements et pour créer du texte dynamique en passant une "
"fonction (comme un signal) à la vue."

#: src/view/02_dynamic_attributes.md:6
msgid ""
"But of course there are other things you might want to update in your user "
"interface. In this section, we’ll look at how to update classes, styles and "
"attributes dynamically, and we’ll introduce the concept of a **derived "
"signal**."
msgstr ""
"Mais il y a, bien entendu, d'autres choses que vous pourriez mettre à jour "
"dans votre interface utilisateur. Dans cette section, nous verrons comment "
"mettre à jour les classes, les styles et les attributs de manière dynamique, "
"et nous introduirons le concept de **signal dérivé**."

#: src/view/02_dynamic_attributes.md:10
msgid ""
"Let’s start with a simple component that should be familiar: click a button "
"to increment a counter."
msgstr ""
"Commençons par un composant simple qui devrait vous être familier : le clic "
"d'un bouton pour incrémenter un compteur."

#: src/view/02_dynamic_attributes.md:31
msgid "So far, this is just the example from the last chapter."
msgstr ""
"Jusqu'à présent, il ne s'agit que de l'exemple que nous avons utilisé dans "
"le dernier chapitre."

#: src/view/02_dynamic_attributes.md:33
msgid "Dynamic Classes"
msgstr "Classes dynamiques"

#: src/view/02_dynamic_attributes.md:35
msgid ""
"Now let’s say I’d like to update the list of CSS classes on this element "
"dynamically. For example, let’s say I want to add the class `red` when the "
"count is odd. I can do this using the `class:` syntax."
msgstr ""
"Supposons maintenant que je veuille mettre à jour la liste des classes CSS "
"de cet élément de manière dynamique. Par exemple, disons que je veuille "
"ajouter la classe `red` lorsque le compte est impair. Je peux le faire en "
"utilisant la syntaxe `class:`."

#: src/view/02_dynamic_attributes.md:43
msgid "`class:` attributes take"
msgstr "`class:` prise des attributs"

#: src/view/02_dynamic_attributes.md:45
msgid "the class name, following the colon (`red`)"
msgstr "le nom de la classe, après les deux points (`red`)"

#: src/view/02_dynamic_attributes.md:46
msgid "a value, which can be a `bool` or a function that returns a `bool`"
msgstr ""
"une valeur, qui peut être un `bool` ou une fonction qui retourne un `bool`"

#: src/view/02_dynamic_attributes.md:48
msgid ""
"When the value is `true`, the class is added. When the value is `false`, the "
"class is removed. And if the value is a function that accesses a signal, the "
"class will reactively update when the signal changes."
msgstr ""
"Lorsque la valeur est `true`, la classe est ajoutée. Lorsque la valeur est "
"`false`, la classe est supprimée. Et si la valeur est une fonction qui "
"accède à un signal, la classe sera mise à jour de manière réactive lorsque "
"le signal change."

#: src/view/02_dynamic_attributes.md:52
msgid ""
"Now every time I click the button, the text should toggle between red and "
"black as the number switches between even and odd."
msgstr ""
"Maintenant, chaque fois que je clique sur le bouton, le texte doit alterner "
"entre le rouge et le noir lorsque le nombre passe de pair à impair."

#: src/view/02_dynamic_attributes.md:60
#, fuzzy
msgid ""
"// the class: syntax reactively updates a single class\n"
"    // here, we'll set the `red` class when `count` is odd\n"
msgstr ""
"// la classe : la syntaxe met à jour de manière réactive une seule classe\n"
"    // ici, nous activerons la classe `red` lorsque `count` sera impair\n"

#: src/view/02_dynamic_attributes.md:64 src/view/02_dynamic_attributes.md:218
#: src/view/03_components.md:85 src/view/03_components.md:175
#: src/view/03_components.md:291 src/view/03_components.md:475
#: src/async/10_resources.md:113
msgid "\"Click me\""
msgstr "\"Cliquez moi\""

#: src/view/02_dynamic_attributes.md:68
msgid ""
"If you’re following along, make sure you go into your `index.html` and add "
"something like this:"
msgstr ""
"Si vous voulez suivre cette méthode, assurez-vous d'aller dans votre `index."
"html` et d'ajouter quelque chose comme ceci :"

#: src/view/02_dynamic_attributes.md:78
msgid ""
"Some CSS class names can’t be directly parsed by the `view` macro, "
"especially if they include a mix of dashes and numbers or other characters. "
"In that case, you can use a tuple syntax: `class=(\"name\", value)` still "
"directly updates a single class."
msgstr ""
"Certains noms de classes CSS ne peuvent pas être analysés directement par la "
"macro `view`, en particulier s'ils contiennent un mélange de tirets et de "
"chiffres ou certains autres caractères. Dans ce cas, vous pouvez utiliser "
"une syntaxe de type tuple : `class=(\"name\", value)` met à jour directement "
"une classe unique."

#: src/view/02_dynamic_attributes.md:81
msgid "\"button-20\""
msgstr "\"button-20\""

#: src/view/02_dynamic_attributes.md:84
msgid "Dynamic Styles"
msgstr "Styles Dynamiques"

#: src/view/02_dynamic_attributes.md:86
msgid ""
"Individual CSS properties can be directly updated with a similar `style:` "
"syntax."
msgstr ""
"Les propriétés CSS individuelles peuvent être mises à jour directement avec "
"une syntaxe `style:` similaire."

#: src/view/02_dynamic_attributes.md:95
msgid "// set the `style` attribute\n"
msgstr "// définit l' attribut `style`\n"

#: src/view/02_dynamic_attributes.md:96
msgid "\"position: absolute\""
msgstr "\"position: absolute\""

#: src/view/02_dynamic_attributes.md:97
msgid "// and toggle individual CSS properties with `style:`\n"
msgstr "// et basculer les propriétés CSS individuelles avec `style:`\n"

#: src/view/02_dynamic_attributes.md:98
msgid "\"{}px\""
msgstr "\"{}px\""

#: src/view/02_dynamic_attributes.md:99
msgid "\"rgb({}, {}, 100)\""
msgstr "\"rgb({}, {}, 100)\""

#: src/view/02_dynamic_attributes.md:100
msgid "\"400px\""
msgstr "\"400px\""

#: src/view/02_dynamic_attributes.md:101
msgid "// Set a CSS variable for stylesheet use\n"
msgstr ""
"// Définir une variable CSS pour l'utilisation de la feuille de style\n"

#: src/view/02_dynamic_attributes.md:102
msgid "\"--columns\""
msgstr "\"--columns\""

#: src/view/02_dynamic_attributes.md:104
msgid "\"Click to Move\""
msgstr "\"Cliquer pour déplacer\""

#: src/view/02_dynamic_attributes.md:111
msgid ""
"The same applies to plain attributes. Passing a plain string or primitive "
"value to an attribute gives it a static value. Passing a function (including "
"a signal) to an attribute causes it to update its value reactively. Let’s "
"add another element to our view:"
msgstr ""
"Il en va de même pour les attributs ordinaires. Le passage d'une chaîne "
"ordinaire ou d'une valeur primitive à un attribut lui confère une valeur "
"statique. Le passage d'une fonction (y compris un signal) à un attribut "
"entraîne une mise à jour réactive de sa valeur. Ajoutons un autre élément à "
"notre vue :"

#: src/view/02_dynamic_attributes.md:118 src/view/02_dynamic_attributes.md:139
#: src/view/02_dynamic_attributes.md:152 src/view/02_dynamic_attributes.md:226
#: src/view/02_dynamic_attributes.md:239 src/view/03_components.md:20
#: src/view/03_components.md:24 src/view/03_components.md:41
#: src/view/03_components.md:69
msgid "\"50\""
msgstr "\"50\""

#: src/view/02_dynamic_attributes.md:119
msgid ""
"// signals are functions, so `value=count` and `value=move || count.get()`\n"
"    // are interchangeable.\n"
msgstr ""
"// les signaux sont des fonctions, donc `value=count` et `value=move || "
"count.get()`\n"
"    // sont interchangeables.\n"

#: src/view/02_dynamic_attributes.md:125
msgid ""
"Now every time we set the count, not only will the `class` of the `<button>` "
"be toggled, but the `value` of the `<progress>` bar will increase, which "
"means that our progress bar will move forward."
msgstr ""
"Maintenant, à chaque fois que nous modifions le compteur, non seulement la "
"`classe` du `<button>` sera modifiée, mais la `value` de la barre "
"`<progress>` augmentera, ce qui signifie que notre barre de progression "
"avancera."

#: src/view/02_dynamic_attributes.md:129
msgid "Derived Signals"
msgstr "Signaux dérivés"

#: src/view/02_dynamic_attributes.md:131
msgid "Let’s go one layer deeper, just for fun."
msgstr "Allons un peu plus loin, juste pour le plaisir."

#: src/view/02_dynamic_attributes.md:133
msgid ""
"You already know that we create reactive interfaces just by passing "
"functions into the `view`. This means that we can easily change our progress "
"bar. For example, suppose we want it to move twice as fast:"
msgstr ""
"Vous savez déjà que nous créons des interfaces réactives en passant des "
"fonctions dans la `view`. Cela signifie que nous pouvons facilement modifier "
"notre barre de progression. Par exemple, supposons que nous voulions qu'elle "
"avance deux fois plus vite :"

#: src/view/02_dynamic_attributes.md:144
msgid ""
"But imagine we want to reuse that calculation in more than one place. You "
"can do this using a **derived signal**: a closure that accesses a signal."
msgstr ""
"Mais imaginons que nous voulions réutiliser ce calcul à plusieurs endroits. "
"Vous pouvez le faire en utilisant un **signal dérivé** : une closure qui "
"accède à un signal."

#: src/view/02_dynamic_attributes.md:149
msgid "/* insert the rest of the view */"
msgstr "/* insère le reste de la vue */"

#: src/view/02_dynamic_attributes.md:153
msgid "// we use it once here\n"
msgstr "// nous l'utilisons une seule fois ici\n"

#: src/view/02_dynamic_attributes.md:157 src/view/02_dynamic_attributes.md:245
msgid "\"Double Count: \""
msgstr "\"Double comptage : \""

#: src/view/02_dynamic_attributes.md:158
msgid "// and again here\n"
msgstr "// et encore ici\n"

#: src/view/02_dynamic_attributes.md:163
msgid ""
"Derived signals let you create reactive computed values that can be used in "
"multiple places in your application with minimal overhead."
msgstr ""
"Les signaux dérivés vous permettent de créer des valeurs calculées "
"réactives, pouvant être utilisées dans plusieurs endroits de votre "
"application, avec un minimum de surcharge."

#: src/view/02_dynamic_attributes.md:166
msgid ""
"Note: Using a derived signal like this means that the calculation runs once "
"per signal change (when `count()` changes) and once per place we access "
"`double_count`; in other words, twice. This is a very cheap calculation, so "
"that’s fine. We’ll look at memos in a later chapter, which were designed to "
"solve this problem for expensive calculations."
msgstr ""
"Note : L'utilisation d'un signal dérivé comme celui-ci signifie que le "
"calcul s'exécute une fois par changement de signal (lorsque `count()` "
"change) et une fois à l'emplacement où nous accédons à `double_count`; en "
"d'autres termes, deux fois. C'est un calcul peu coûteux, et c'est très bien "
"ainsi. Dans un chapitre ultérieur, nous examinerons les mémos qui ont été "
"conçus pour résoudre ce genre de problème, dans lesquels nous utilisons des "
"calculs coûteux."

#: src/view/02_dynamic_attributes.md:172
msgid "Advanced Topic: Injecting Raw HTML"
msgstr "Sujet avancé : Injecter du HTML brut"

#: src/view/02_dynamic_attributes.md:174
msgid ""
"The `view` macro provides support for an additional attribute, `inner_html`, "
"which can be used to directly set the HTML contents of any element, wiping "
"out any other children you’ve given it. Note that this does _not_ escape the "
"HTML you provide. You should make sure that it only contains trusted input "
"or that any HTML entities are escaped, to prevent cross-site scripting (XSS) "
"attacks."
msgstr ""
"La macro `view` supporte un attribut supplémentaire, `inner_html`, qui peut "
"être utilisé pour définir directement le contenu HTML de n'importe quel "
"élément, en effaçant tous les autres enfants que vous lui aurez donnés. "
"Notez que cela n'échappe _pas_ le HTML que vous fournissez. Vous devez vous "
"assurer qu'il ne contient que des données de confiance ou que toutes les "
"entités HTML sont échappées, afin de prévenir les attaques de type cross-"
"site scripting (XSS)."

#: src/view/02_dynamic_attributes.md:181
msgid "\"<p>This HTML will be injected.</p>\""
msgstr "\"<p>Ce HTML sera injecté.</p>\""

#: src/view/02_dynamic_attributes.md:187
msgid ""
"[Click here for the full `view` macros docs](https://docs.rs/leptos/latest/"
"leptos/macro.view.html)."
msgstr ""
"[Cliquez ici pour la documentation complète sur les macros `view`](https://"
"docs.rs/leptos/latest/leptos/macro.view.html)."

#: src/view/02_dynamic_attributes.md:189
msgid ""
"[Click to open CodeSandbox.](https://codesandbox.io/p/sandbox/2-dynamic-"
"attributes-0-5-lwdrpm?file=%2Fsrc%2Fmain.rs%3A1%2C1)"
msgstr ""
"[Cliquez pour ouvrir le CodeSandbox] (https://codesandbox.io/p/sandbox/2-"
"dynamic-attributes-0-5-lwdrpm?file=%2Fsrc%2Fmain.rs%3A1%2C1)"

#: src/view/02_dynamic_attributes.md:203
msgid ""
"// a \"derived signal\" is a function that accesses other signals\n"
"    // we can use this to create reactive values that depend on the\n"
"    // values of one or more other signals\n"
msgstr ""
"// un \"signal dérivé\" est une fonction qui accède à d'autres signaux\n"
"    // nous pouvons l'utiliser pour créer des valeurs réactives qui "
"dépendent des\n"
"    // valeurs d'un ou plusieurs autres signaux\n"

#: src/view/02_dynamic_attributes.md:214
#, fuzzy
msgid ""
"// the class: syntax reactively updates a single class\n"
"            // here, we'll set the `red` class when `count` is odd\n"
msgstr ""
"// la classe : la syntaxe met à jour de manière réactive une seule classe\n"
"            // ici, nous définirons la classe `red` lorsque `count` est "
"impair\n"

#: src/view/02_dynamic_attributes.md:220
msgid "// NOTE: self-closing tags like <br> need an explicit /\n"
msgstr ""
"// NOTE : les balises auto-fermantes telles que <br> nécessitent un / "
"explicite\n"

#: src/view/02_dynamic_attributes.md:223
msgid "// We'll update this progress bar every time `count` changes\n"
msgstr ""
"// Nous mettrons à jour cette barre de progression à chaque fois que `count` "
"change\n"

#: src/view/02_dynamic_attributes.md:225
msgid "// static attributes work as in HTML\n"
msgstr "// les attributs statiques fonctionnent comme en HTML\n"

#: src/view/02_dynamic_attributes.md:228
msgid ""
"// passing a function to an attribute\n"
"            // reactively sets that attribute\n"
"            // signals are functions, so `value=count` and `value=move || "
"count.get()`\n"
"            // are interchangeable.\n"
msgstr ""
"// passage d'une fonction à un attribut\n"
"            // définit cet attribut de manière réactive\n"
"            // Les signaux sont des fonctions, donc `value=count` et "
"`value=move || count.get()`\n"
"            // sont interchangeables.\n"

#: src/view/02_dynamic_attributes.md:236
msgid ""
"// This progress bar will use `double_count`\n"
"        // so it should move twice as fast!\n"
msgstr ""
"// Cette barre de progression utilisera `double_count`\n"
"        // elle devrait donc se avancer deux fois plus vite !\n"

#: src/view/02_dynamic_attributes.md:240
msgid ""
"// derived signals are functions, so they can also\n"
"            // reactively update the DOM\n"
msgstr ""
"// les signaux dérivés sont des fonctions, ils peuvent donc également\n"
"            // mettre à jour le DOM de manière réactive\n"

#: src/view/02_dynamic_attributes.md:244
#, fuzzy
msgid "\"Count: \""
msgstr "\"Count: \""

#: src/view/03_components.md:3
msgid ""
"So far, we’ve been building our whole application in a single component. "
"This is fine for really tiny examples, but in any real application you’ll "
"need to break the user interface out into multiple components, so you can "
"break your interface down into smaller, reusable, composable chunks."
msgstr ""
"Jusqu'à présent, nous avons construit toute notre application avec un seul "
"composant. C'est très bien pour des exemples très petits, mais dans toute "
"réelle application, vous aurez besoin de décomposer l'interface utilisateur "
"en plusieurs composants, de sorte que vous puissiez décomposer votre "
"interface en morceaux plus petits, réutilisables et composables."

#: src/view/03_components.md:8
msgid ""
"Let’s take our progress bar example. Imagine that you want two progress bars "
"instead of one: one that advances one tick per click, one that advances two "
"ticks per click."
msgstr ""
"Reprenons notre exemple de barre de progression. Imaginez que vous vouliez "
"deux barres de progression au lieu d'une : une qui avance d'un tick par "
"clic, une qui avance de deux ticks par clic."

#: src/view/03_components.md:12
msgid "You _could_ do this by just creating two `<progress>` elements:"
msgstr ""
"Vous _pourriez_ le faire en créant simplement deux éléments `<progress>` :"

#: src/view/03_components.md:30
msgid ""
"But of course, this doesn’t scale very well. If you want to add a third "
"progress bar, you need to add this code another time. And if you want to "
"edit anything about it, you need to edit it in triplicate."
msgstr ""
"Mais bien sûr, cette méthode n'est pas très évolutive. Si vous désirez "
"ajouter une troisième barre de progression, vous devrez ajouter ce code une "
"fois de plus. Et si vous voulez modifier quoi que ce soit, vous devrez le "
"faire trois fois."

#: src/view/03_components.md:34
msgid "Instead, let’s create a `<ProgressBar/>` component."
msgstr "Au lieu de cela, créons un composant `<ProgressBar/>`."

#: src/view/03_components.md:42
msgid "// hmm... where will we get this from?\n"
msgstr "// hmm... D'où viendront-ils ?\n"

#: src/view/03_components.md:49
#, fuzzy
msgid ""
"There’s just one problem: `progress` is not defined. Where should it come "
"from? When we were defining everything manually, we just used the local "
"variable names. Now we need some way to pass an argument into the component."
msgstr ""
"Il y a juste un problème : `progress` n'est pas défini. D'où doit-il venir ? "
"Lorsque nous définissions tout manuellement, nous utilisions simplement les "
"noms des variables locales. Maintenant, nous avons besoin d'un moyen de "
"passer un argument au composant."

#: src/view/03_components.md:53
msgid "Component Props"
msgstr "Propriétés d'un composant"

#: src/view/03_components.md:55
msgid ""
"We do this using component properties, or “props.” If you’ve used another "
"frontend framework, this is probably a familiar idea. Basically, properties "
"are to components as attributes are to HTML elements: they let you pass "
"additional information into the component."
msgstr ""
"Pour ce faire, nous utilisons les propriétés des composants, ou \"props\". "
"Si vous avez déjà utilisé un autre framework front-end, cette idée vous est "
"probablement familière. Fondamentalement, les propriétés sont aux composants "
"ce que les attributs sont aux éléments HTML : elles vous permettent de "
"passer des informations supplémentaires au composant."

#: src/view/03_components.md:60
msgid ""
"In Leptos, you define props by giving additional arguments to the component "
"function."
msgstr ""
"Dans Leptos, vous définissez des propriétés en donnant des arguments "
"supplémentaires à la fonction du composant."

#: src/view/03_components.md:70
msgid "// now this works\n"
msgstr "// maintenant, cela fonctionne\n"

#: src/view/03_components.md:77
msgid "Now we can use our component in the main `<App/>` component’s view."
msgstr ""
"Nous pouvons maintenant utiliser notre composant dans la vue principale du "
"composant `<App/>`."

#: src/view/03_components.md:87
msgid "// now we use our component!\n"
msgstr "// maintenant, nous utilisons notre composant !\n"

#: src/view/03_components.md:93
msgid ""
"Using a component in the view looks a lot like using an HTML element. You’ll "
"notice that you can easily tell the difference between an element and a "
"component because components always have `PascalCase` names. You pass the "
"`progress` prop in as if it were an HTML element attribute. Simple."
msgstr ""
"L'utilisation d'un composant dans une vue ressemble beaucoup à l'utilisation "
"d'un élément HTML. Vous remarquerez que vous pouvez facilement faire la "
"différence entre un élément et un composant parce que les composants ont "
"toujours des noms en `PascalCase`. Vous passez la propriété `progress` comme "
"s'il s'agissait d'un attribut d'élément HTML. C'est simple."

#: src/view/03_components.md:98
msgid "Reactive and Static Props"
msgstr "Propriétés réactives et statiques"

#: src/view/03_components.md:100
msgid ""
"You’ll notice that throughout this example, `progress` takes a reactive "
"`ReadSignal<i32>`, and not a plain `i32`. This is **very important**."
msgstr ""
"Vous remarquerez que dans cet exemple, `progress` prend un `ReadSignal<i32>` "
"réactif, et non un simple `i32`. C'est **très important**."

#: src/view/03_components.md:103
msgid ""
"Component props have no special meaning attached to them. A component is "
"simply a function that runs once to set up the user interface. The only way "
"to tell the interface to respond to changes is to pass it a signal type. So "
"if you have a component property that will change over time, like our "
"`progress`, it should be a signal."
msgstr ""
"Les propriétés des composants n'ont pas de signification particulière. Un "
"composant est simplement une fonction qui s'exécute une fois pour configurer "
"l'interface utilisateur. La seule façon de dire à l'interface de répondre "
"aux changements est de lui passer un type de signal. Ainsi, si vous avez une "
"propriété qui va changer au cours du temps, comme notre `progress`, elle "
"doit être un signal."

#: src/view/03_components.md:109
msgid "`optional` Props"
msgstr "Propriétés `optional`"

#: src/view/03_components.md:111
#, fuzzy
msgid ""
"Right now the `max` setting is hard-coded. Let’s take that as a prop too. "
"But let’s add a catch: let’s make this prop optional by annotating the "
"particular argument to the component function with `#[prop(optional)]`."
msgstr ""
"Pour l'instant, le paramètre `max` est codé en dur. Utilisons-le aussi comme "
"une propriété, mais ajoutons un piège. Rendons cette propriété optionnelle, "
"en annotant l'argument particulier de la fonction du composant avec "
"`#[prop(optional)]`."

#: src/view/03_components.md:118
msgid ""
"// mark this prop optional\n"
"    // you can specify it or not when you use <ProgressBar/>\n"
msgstr ""
"// marque cette propriété comme optionnelle\n"
"    // vous pouvez le spécifier ou pas lorsque vous utilisez <ProgressBar/>\n"

#: src/view/03_components.md:133
msgid ""
"Now, we can use `<ProgressBar max=50 progress=count/>`, or we can omit `max` "
"to use the default value (i.e., `<ProgressBar progress=count/>`). The "
"default value on an `optional` is its `Default::default()` value, which for "
"a `u16` is going to be `0`. In the case of a progress bar, a max value of "
"`0` is not very useful."
msgstr ""
"Maintenant, nous pouvons utiliser `<ProgressBar max=50 progress=count/>`, ou "
"nous pouvons omettre `max` pour utiliser la valeur par défaut (c.-à-d., "
"`<ProgressBar progress=count/>`). La valeur par défaut d'un `optional` est "
"sa valeur `Default::default()`, qui pour un `u16` sera `0`. Dans le cas "
"d'une barre de progression, une valeur maximale de `0` n'est pas très utile."

#: src/view/03_components.md:138
msgid "So let’s give it a particular default value instead."
msgstr "Nous allons donc lui donner une valeur par défaut spécifique."

#: src/view/03_components.md:140
msgid "`default` props"
msgstr "La propriété `default`"

#: src/view/03_components.md:142
msgid ""
"You can specify a default value other than `Default::default()` pretty "
"simply with `#[prop(default = ...)`."
msgstr ""
"Vous pouvez spécifier une valeur par défaut autre que `Default::default()` "
"assez simplement en utilisant `#[prop(default = ...)`."

#: src/view/03_components.md:161
msgid "Generic Props"
msgstr "Propriétés génériques"

#: src/view/03_components.md:163
msgid ""
"This is great. But we began with two counters, one driven by `count`, and "
"one by the derived signal `double_count`. Let’s recreate that by using "
"`double_count` as the `progress` prop on another `<ProgressBar/>`."
msgstr ""
"C'est très bien, mais nous avons commencé avec deux compteurs, l'un piloté "
"par `count`, et l'autre par le signal dérivé `double_count`. Recréons cela "
"en utilisant `double_count` comme une propriété `progress` sur une autre "
"`<ProgressBar/>`."

#: src/view/03_components.md:178
msgid "// add a second progress bar\n"
msgstr "// ajoute une deuxième barre de progression\n"

#: src/view/03_components.md:184
msgid ""
"Hm... this won’t compile. It should be pretty easy to understand why: we’ve "
"declared that the `progress` prop takes `ReadSignal<i32>`, and "
"`double_count` is not `ReadSignal<i32>`. As rust-analyzer will tell you, its "
"type is `|| -> i32`, i.e., it’s a closure that returns an `i32`."
msgstr ""
"Hm... cela ne compilera pas. Il devrait être assez facile de comprendre "
"pourquoi : nous avons déclaré que la propriété `progress` prend la valeur "
"`ReadSignal<i32>`, et `double_count` n'est pas un `ReadSignal<i32>`. Comme "
"rust-analyzer vous le dira, son type est `|| -> i32`, c'est-à-dire que c'est "
"une closure qui retourne un `i32`."

#: src/view/03_components.md:189
#, fuzzy
msgid ""
"There are a couple ways to handle this. One would be to say: “Well, I know "
"that a `ReadSignal` is a function, and I know that a closure is a function; "
"maybe I could just take any function?” If you’re savvy, you may know that "
"both these implement the trait `Fn() -> i32`. So you could use a generic "
"component:"
msgstr ""
"Il y a plusieurs façons de traiter cela. La première serait de dire : \"Je "
"sais qu'un `ReadSignal` est une fonction, et je sais qu'une closure est une "
"fonction; peut-être pourrais-je utiliser n'importe quelle fonction ?\". Si "
"vous êtes un expert, vous savez que ces deux fonctions implémentent le trait "
"`Fn() -> i32`. Vous pouvez donc utiliser un composant générique :"

#: src/view/03_components.md:213
msgid ""
"This is a perfectly reasonable way to write this component: `progress` now "
"takes any value that implements this `Fn()` trait."
msgstr ""
"C'est une façon parfaitement raisonnable d'écrire ce composant : `progress` "
"prend maintenant n'importe quelle valeur qui implémente le trait `Fn()`."

#: src/view/03_components.md:216
msgid "This generic can also be specified inline:"
msgstr "Ce générique peut également être spécifié en ligne :"

#: src/view/03_components.md:233
#, fuzzy
msgid ""
"Note that generic component props _can’t_ be specified with an `impl` yet "
"(`progress: impl Fn() -> i32 + 'static,`), in part because they’re actually "
"used to generate a `struct ProgressBarProps`, and struct fields cannot be "
"`impl` types. The `#[component]` macro may be further improved in the future "
"to allow inline `impl` generic props."
msgstr ""
"Notez que les propriétés des composants génériques _ne peuvent pas_ encore "
"être spécifiés avec `impl` (`progress : impl Fn() -> i32 + 'static,`), c'est "
"en partie parce qu'ils sont utilisés pour générer une `struct "
"ProgressBarProps`, et que les champs de la structure ne peuvent pas être de "
"type `impl`. La macro `#[component]` pourra être améliorée dans le futur "
"pour autoriser les éléments génériques `impl` inline."

#: src/view/03_components.md:235
#, fuzzy
msgid ""
"Generics need to be used somewhere in the component props. This is because "
"props are built into a struct, so all generic types must be used somewhere "
"in the struct. This is often easily accomplished using an optional "
"`PhantomData` prop. You can then specify a generic in the view using the "
"syntax for expressing types: `<Component<T>/>` (not with the turbofish-style "
"`<Component::<T>/>`)."
msgstr ""
"Les types génériques doivent être utilisés quelque part dans le composant "
"props. En effet, les props sont construits dans une structure, donc tous les "
"types génériques doivent être utilisés quelque part dans la structure. Ceci "
"est souvent facilement réalisable en utilisant une propriété optionnelle "
"`PhantomData`. Vous pouvez alors spécifier un type générique dans la vue en "
"utilisant la syntaxe d'expression des types : `<Composant<T>/>` (pas avec le "
"style turbofish `<Composant::<T>/>`)."

#: src/view/03_components.md:252
#, fuzzy
msgid ""
"Note that there are some limitations. For example, our view macro parser "
"can’t handle nested generics like `<SizeOf<Vec<T>>/>`."
msgstr ""
"Notez qu'il y a quelques limitations. Par exemple, notre analyseur de macros "
"de vues ne peut pas gérer les génériques imbriqués comme `<SizeOf<Vec<T>>/>`."

#: src/view/03_components.md:254
#, fuzzy
msgid "`into` Props"
msgstr "Les propriétés `into` "

#: src/view/03_components.md:256
msgid ""
"There’s one more way we could implement this, and it would be to use "
"`#[prop(into)]`. This attribute automatically calls `.into()` on the values "
"you pass as props, which allows you to easily pass props with different "
"values."
msgstr ""
"On peut l'implémenter d'une autre façon, en utilisant `#[prop(into)]`. Cet "
"attribut appelle automatiquement `.into()` sur les valeurs que vous passez "
"en tant que props, ceci permet de facilement passer des props avec "
"différentes valeurs."

#: src/view/03_components.md:260
#, fuzzy
msgid ""
"In this case, it’s helpful to know about the [`Signal`](https://docs.rs/"
"leptos/latest/leptos/struct.Signal.html) type. `Signal` is an enumerated "
"type that represents any kind of readable reactive signal. It can be useful "
"when defining APIs for components you’ll want to reuse while passing "
"different sorts of signals. The [`MaybeSignal`](https://docs.rs/leptos/"
"latest/leptos/enum.MaybeSignal.html) type is useful when you want to be able "
"to take either a static or reactive value."
msgstr ""
"Dans ce cas, il est utile de connaître le type [`Signal`](https://docs.rs/"
"leptos/latest/leptos/struct.Signal.html). `Signal` est un type énuméré qui "
"représente n'importe quel type de signal réactif lisible. Il peut être utile "
"lors de la définition d'API pour des composants que vous voudrez réutiliser "
"en passant différents types de signaux. Le type [`MaybeSignal`](https://docs."
"rs/leptos/latest/leptos/enum.MaybeSignal.html) est utile lorsque vous voulez "
"être capable de prendre une valeur statique ou réactive."

#: src/view/03_components.md:293
msgid "// .into() converts `ReadSignal` to `Signal`\n"
msgstr "// .into() convertit un `ReadSignal` en `Signal`\n"

#: src/view/03_components.md:295
msgid "// use `Signal::derive()` to wrap a derived signal\n"
msgstr "// utilise `Signal::derive()` pour envelopper un signal dérivé\n"

#: src/view/03_components.md:301
msgid "Optional Generic Props"
msgstr "Props génériques facultatives"

#: src/view/03_components.md:303
msgid ""
"Note that you can’t specify optional generic props for a component. Let’s "
"see what would happen if you try:"
msgstr ""
"Notez que vous ne pouvez pas spécifier de propriétés génériques facultatives "
"pour un composant. Voyons ce qui se passe si vous essayez :"

#: src/view/03_components.md:328
msgid "Rust helpfully gives the error"
msgstr "Rust donne l'erreur suivante"

#: src/view/03_components.md:340
#, fuzzy
msgid ""
"You can specify generics on components with a `<ProgressBar<F>/>` syntax (no "
"turbofish in the `view` macro). Specifying the correct type here is not "
"possible; closures and functions in general are unnameable types. The "
"compiler can display them with a shorthand, but you can’t specify them."
msgstr ""
"Vous pouvez spécifier des génériques sur les composants avec une syntaxe "
"`<ProgressBar<F>/>` (pas de turbofish dans la macro `view`). Spécifier le "
"type correct ici n'est pas possible; les closures et les fonctions en "
"général sont des types sans nom. Le compilateur peut les afficher avec une "
"abréviation, mais vous ne pouvez pas les spécifier."

#: src/view/03_components.md:342
msgid ""
"However, you can get around this by providing a concrete type using `Box<dyn "
"_>` or `&dyn _`:"
msgstr ""
"Cependant, vous pouvez contourner ce problème en fournissant un type concret "
"en utilisant `Box<dyn _>` ou `&dyn _` :"

#: src/view/03_components.md:367
msgid ""
"Because the Rust compiler now knows the concrete type of the prop, and "
"therefore its size in memory even in the `None` case, this compiles fine."
msgstr ""
"Comme le compilateur Rust connaît maintenant le type concret de la "
"propriété, et donc sa taille en mémoire, même dans le cas de `None`, cela se "
"compile correctement."

#: src/view/03_components.md:369
msgid ""
"In this particular case, `&dyn Fn() -> i32` will cause lifetime issues, but "
"in other cases, it may be a possibility."
msgstr ""
"Dans ce cas particulier, `&dyn Fn() -> i32` posera des problèmes de durée de "
"vie, mais dans d'autres cas, cela peut être une possibilité."

#: src/view/03_components.md:371
msgid "Documenting Components"
msgstr "Documentation des composants"

#: src/view/03_components.md:373
msgid ""
"This is one of the least essential but most important sections of this book. "
"It’s not strictly necessary to document your components and their props. It "
"may be very important, depending on the size of your team and your app. But "
"it’s very easy, and bears immediate fruit."
msgstr ""
"Il s'agit de l'une des sections les moins essentielles mais les plus "
"importantes de cet ouvrage. Il n'est pas strictement nécessaire de "
"documenter vos composants et leurs propriétés. Cela peut prendre beaucoup de "
"temps, en fonction de la taille de votre équipe et de votre application. "
"Mais c'est très facile à réaliser et cela porte immédiatement ses fruits."

#: src/view/03_components.md:378
msgid ""
"To document a component and its props, you can simply add doc comments on "
"the component function, and each one of the props:"
msgstr ""
"Pour documenter un composant et ses propriétés, il suffit d'ajouter des "
"commentaires doc sur la fonction du composant et sur chacune de ses "
"propriétés :"

#: src/view/03_components.md:382 src/view/03_components.md:437
msgid "/// Shows progress toward a goal.\n"
msgstr "/// Montre la progression vers un objectif.\n"

#: src/view/03_components.md:385 src/view/03_components.md:444
msgid "/// The maximum value of the progress bar.\n"
msgstr "/// La valeur maximale de la barre de progression.\n"

#: src/view/03_components.md:388
msgid "/// How much progress should be displayed.\n"
msgstr "/// Le degré d'avancement doit être affiché.\n"

#: src/view/03_components.md:396
#, fuzzy
msgid ""
"That’s all you need to do. These behave like ordinary Rust doc comments, "
"except that you can document individual component props, which can’t be done "
"with Rust function arguments."
msgstr ""
"C'est tout ce que vous avez à faire. Ces commentaires se comportent comme "
"des commentaires Rust doc ordinaires, sauf que vous pouvez documenter des "
"composants individuels, ce qui ne peut pas être fait avec les arguments de "
"fonctions Rust."

#: src/view/03_components.md:400
#, fuzzy
msgid ""
"This will automatically generate documentation for your component, its "
"`Props` type, and each of the fields used to add props. It can be a little "
"hard to understand how powerful this is until you hover over the component "
"name or props and see the power of the `#[component]` macro combined with "
"rust-analyzer here."
msgstr ""
"Cela générera automatiquement de la documentation pour votre composant, son "
"type `Props`, et chacun des champs utilisés pour ajouter des props. Il peut "
"être un peu difficile de comprendre à quel point c'est puissant jusqu'à ce "
"que vous survoliez le nom du composant ou les props et que vous voyiez la "
"puissance de la macro `#[component]` combinée avec rust-analyzer dans ce cas."

#: src/view/03_components.md:405
msgid "Advanced Topic: `#[component(transparent)]`"
msgstr "Sujet avancé : `#[component(transparent)]`"

#: src/view/03_components.md:407
#, fuzzy
msgid ""
"All Leptos components return `-> impl IntoView`. Some, though, need to "
"return some data directly without any additional wrapping. These can be "
"marked with `#[component(transparent)]`, in which case they return exactly "
"the value they return, without the rendering system transforming them in any "
"way."
msgstr ""
"Tous les composants Leptos renvoient `-> impl IntoView`. Certains, "
"cependant, ont besoin de renvoyer des données directement sans aucune "
"enveloppe supplémentaire. Ces composants peuvent être marqués avec "
"`#[component(transparent)]`, auquel cas ils renvoient exactement la valeur "
"qu'ils renvoient, sans que le système de rendu ne les transforme de quelque "
"manière que ce soit."

#: src/view/03_components.md:412
msgid "This is mostly used in two situations:"
msgstr "Ceci est principalement utilisé dans deux situations :"

#: src/view/03_components.md:414
#, fuzzy
msgid ""
"Creating wrappers around `<Suspense/>` or `<Transition/>`, which return a "
"transparent suspense structure to integrate with SSR and hydration properly."
msgstr ""
"Création de wrappers autour de `<Suspense/>` ou `<Transition/>`, qui "
"renvoient une structure de suspense transparente pour s'intégrer "
"correctement au SSR et à l'hydratation."

#: src/view/03_components.md:416
#, fuzzy
msgid ""
"Refactoring `<Route/>` definitions for `leptos_router` out into separate "
"components, because `<Route/>` is a transparent component that returns a "
"`RouteDefinition` struct rather than a view."
msgstr ""
"Refactorisation des définitions `<Route/>` pour `leptos_router` dans des "
"composants séparés, car `<Route/>` est un composant transparent qui retourne "
"une structure `RouteDefinition` plutôt qu'une vue."

#: src/view/03_components.md:420
msgid ""
"In general, you should not need to use transparent components unless you are "
"creating custom wrapping components that fall into one of these two "
"categories."
msgstr ""
"En général, vous ne devriez pas avoir besoin d'utiliser des composants "
"transparents, à moins de créer des composants de wrapping personnalisés "
"entrant dans l'une de ces deux catégories."

#: src/view/03_components.md:423
msgid ""
"[Click to open CodeSandbox.](https://codesandbox.io/p/sandbox/3-"
"components-0-5-5vvl69?file=%2Fsrc%2Fmain.rs%3A1%2C1)"
msgstr ""
"[Cliquez pour ouvrir le CodeSandbox.](https://codesandbox.io/p/sandbox/3-"
"components-0-5-5vvl69?file=%2Fsrc%2Fmain.rs%3A1%2C1)"

#: src/view/03_components.md:432
msgid ""
"// Composing different components together is how we build\n"
"// user interfaces. Here, we'll define a reusable <ProgressBar/>.\n"
"// You'll see how doc comments can be used to document components\n"
"// and their properties.\n"
msgstr ""
"// L'assemblage de différents composants est la façon dont nous "
"construisons\n"
"// les interfaces utilisateur. Ici, nous allons définir une <ProgressBar/> "
"réutilisable.\n"
"// Vous verrez comment les commentaires de documentation peuvent être "
"utilisés\n"
"// pour documenter les composants et leurs propriétés.\n"

#: src/view/03_components.md:441
msgid ""
"// Marks this as an optional prop. It will default to the default\n"
"    // value of its type, i.e., 0.\n"
msgstr ""
"// Marque cette option comme une propriété facultative. Elle prendra par "
"défaut la valeur\n"
"    // par défaut de son type, c'est-à-dire 0.\n"

#: src/view/03_components.md:446
msgid "// Will run `.into()` on the value passed into the prop.\n"
msgstr "// Exécute `.into()` sur la valeur passée dans la propriété.\n"

#: src/view/03_components.md:448
msgid ""
"// `Signal<T>` is a wrapper for several reactive types.\n"
"    // It can be helpful in component APIs like this, where we\n"
"    // might want to take any kind of reactive value\n"
"    /// How much progress should be displayed.\n"
msgstr ""
"// `Signal<T>` est un wrapper pour plusieurs types réactifs.\n"
"    // Il peut être utile dans les API de composants comme celle-ci,\n"
"    // où l'on peut vouloir prendre n'importe quelle valeur réactive.\n"
"    /// Le niveau de progression doit être affichée.\n"

#: src/view/03_components.md:478
msgid ""
"// If you have this open in CodeSandbox or an editor with\n"
"        // rust-analyzer support, try hovering over `ProgressBar`,\n"
"        // `max`, or `progress` to see the docs we defined above\n"
msgstr ""
"// Si vous avez ouvert cette page dans un CodeSandbox ou\n"
"        // dans un éditeur supportant rust-analyzer, essayez de survoler\n"
"        // `ProgressBar`, `max`, ou `progress` pour voir les documentations\n"
"        // que nous avons définies précédemment\n"

#: src/view/03_components.md:482
msgid ""
"// Let's use the default max value on this one\n"
"        // the default is 100, so it should move half as fast\n"
msgstr ""
"// Utilisons la valeur maximale par défaut pour celui-ci\n"
"        // la valeur par défaut est 100, donc il devrait se\n"
"       // déplacer deux fois moins vite\n"

#: src/view/03_components.md:485
msgid ""
"// Signal::derive creates a Signal wrapper from our derived signal\n"
"        // using double_count means it should move twice as fast\n"
msgstr ""
"// Signal::derive crée un wrapper Signal à partir de notre signal dérivé\n"
"        // l'utilisation de double_count signifie qu'il devrait se déplacer\n"
"        // deux fois plus vite\n"

#: src/view/04_iteration.md:3
msgid ""
"Whether you’re listing todos, displaying a table, or showing product images, "
"iterating over a list of items is a common task in web applications. "
"Reconciling the differences between changing sets of items can also be one "
"of the trickiest tasks for a framework to handle well."
msgstr ""
"Qu'il s'agisse de lister des tâches, d'afficher un tableau, ou montrer des "
"images de produits, l'itération sur une liste d'éléments est une tâche "
"courante dans les applications web. Le rapprochement des différences entre "
"des ensembles d'éléments changeants peut également être l'une des tâches les "
"plus délicates à gérer pour un framework."

#: src/view/04_iteration.md:8
msgid "Leptos supports two different patterns for iterating over items:"
msgstr ""
"Leptos prend en charge deux modèles différents pour les itérations "
"d'éléments :"

#: src/view/04_iteration.md:10
msgid "For static views: `Vec<_>`"
msgstr "Pour les vues statiques : `Vec<_>`"

#: src/view/04_iteration.md:11
msgid "For dynamic lists: `<For/>`"
msgstr "Pour les listes dynamiques : `<For/>`"

#: src/view/04_iteration.md:13
msgid "Static Views with `Vec<_>`"
msgstr "Les vues statiques avec `Vec<_>`"

#: src/view/04_iteration.md:15
#, fuzzy
msgid ""
"Sometimes you need to show an item repeatedly, but the list you’re drawing "
"from does not often change. In this case, it’s important to know that you "
"can insert any `Vec<IV> where IV: IntoView` into your view. In other words, "
"if you can render `T`, you can render `Vec<T>`."
msgstr ""
"Il est parfois nécessaire d'afficher un élément de façon répétée, sauf que "
"la liste à partir de laquelle vous dessinez ne change pas souvent. Dans ce "
"cas, il est important de savoir que vous pouvez insérer n'importe quel "
"`Vec<IV> où IV : IntoView` dans votre vue. En d'autres termes, si vous "
"pouvez rendre `T`, vous pouvez rendre `Vec<T>`."

#: src/view/04_iteration.md:23 src/view/04_iteration.md:39
msgid "// this will just render \"012\"\n"
msgstr "// cela affichera simplement \"012\".\n"

#: src/view/04_iteration.md:25 src/view/04_iteration.md:41
msgid "// or we can wrap them in <li>\n"
msgstr "// ou nous pouvons les encadrer de <li>\n"

#: src/view/04_iteration.md:34
msgid ""
"Leptos also provides a `.collect_view()` helper function that allows you to "
"collect any iterator of `T: IntoView` into `Vec<View>`."
msgstr ""
"Leptos fournit également une fonction de debogage `.collect_view()` qui vous "
"permet de collecter n'importe quel itérateur de `T : IntoView` dans un "
"`Vec<View>`."

#: src/view/04_iteration.md:50
msgid ""
"The fact that the _list_ is static doesn’t mean the interface needs to be "
"static. You can render dynamic items as part of a static list."
msgstr ""
"Le fait que la _liste_ soit statique ne signifie pas que l'interface doive "
"être statique. Il est possible d'intégrer des éléments dynamiques dans une "
"liste statique."

#: src/view/04_iteration.md:54
msgid "// create a list of 5 signals\n"
msgstr "// crée une liste de 5 signaux\n"

#: src/view/04_iteration.md:57
msgid ""
"// each item manages a reactive view\n"
"// but the list itself will never change\n"
msgstr ""
"// chaque élément gère une vue réactive\n"
"// mais la liste elle-même ne changera jamais\n"

#: src/view/04_iteration.md:79
msgid ""
"You _can_ render a `Fn() -> Vec<_>` reactively as well. But note that every "
"time it changes, this will rerender every item in the list. This is quite "
"inefficient! Fortunately, there’s a better way."
msgstr ""
"Vous _pouvez_ également effectuer un rendu de `Fn() -> Vec<_>` de manière "
"réactive. Mais notez que chaque fois qu'il changera, chaque élément de la "
"liste sera rendu. C'est assez inefficace ! Heureusement, il existe une "
"meilleure solution."

#: src/view/04_iteration.md:83
msgid "Dynamic Rendering with the `<For/>` Component"
msgstr "Rendu dynamique avec le composant `<For/>`"

#: src/view/04_iteration.md:85
#, fuzzy
msgid ""
"The [`<For/>`](https://docs.rs/leptos/latest/leptos/fn.For.html) component "
"is a keyed dynamic list. It takes three props:"
msgstr ""
"Le composant [`<For/>`](https://docs.rs/leptos/latest/leptos/fn.For.html)  "
"est une liste dynamique à clés. Elle prend trois propriétés:"

#: src/view/04_iteration.md:88
msgid ""
"`each`: a function (such as a signal) that returns the items `T` to be "
"iterated over"
msgstr ""
"`each` : une fonction (telle qu'un signal) qui renvoie les éléments `T` à "
"parcourir"

#: src/view/04_iteration.md:89
msgid ""
"`key`: a key function that takes `&T` and returns a stable, unique key or ID"
msgstr ""
"`key` : une fonction clé qui prend `&T` et renvoie une clé ou un ID stable "
"et unique"

#: src/view/04_iteration.md:90
msgid "`children`: renders each `T` into a view"
msgstr "`children` : effectue le rendu de chaque `T` dans une vue"

#: src/view/04_iteration.md:92
msgid ""
"`key` is, well, the key. You can add, remove, and move items within the "
"list. As long as each item’s key is stable over time, the framework does not "
"need to rerender any of the items, unless they are new additions, and it can "
"very efficiently add, remove, and move items as they change. This allows for "
"extremely efficient updates to the list as it changes, with minimal "
"additional work."
msgstr ""
"`key` est  la clé. Vous pouvez ajouter, supprimer et déplacer des éléments "
"de la liste. Tant que la clé de chaque élément est stable dans le temps, le "
"framework n'a pas besoin de redessiner les éléments, à moins qu'il ne "
"s'agisse de nouveaux ajouts, et il peut très efficacement ajouter, supprimer "
"et déplacer des éléments au fur et à mesure qu'ils changent. Cela permet des "
"mises à jour extrêmement efficaces de la liste au fur et à mesure qu'elle "
"change, avec un minimum de travail supplémentaire."

#: src/view/04_iteration.md:98
msgid ""
"Creating a good `key` can be a little tricky. You generally do _not_ want to "
"use an index for this purpose, as it is not stable—if you remove or move "
"items, their indices change."
msgstr ""
"La création d'une bonne \"clé\" peut s'avérer un peu délicate. En général, "
"vous ne désirez _pas_ utiliser un index pour cela, car sa valeur n'est pas "
"stable - si vous supprimez ou déplacez des éléments, leurs index changent."

#: src/view/04_iteration.md:102
#, fuzzy
msgid ""
"But it’s a great idea to do something like generating a unique ID for each "
"row as it is generated, and using that as an ID for the key function."
msgstr ""
"Une excellente idée est de générer un identifiant unique pour chaque ligne, "
"au fur et à mesure qu'elle est générée, puis de l'utiliser comme identifiant "
"pour la fonction clé."

#: src/view/04_iteration.md:105
msgid "Check out the `<DynamicList/>` component below for an example."
msgstr "Le composant `<DynamicList/>` ci-dessous en est un exemple."

#: src/view/04_iteration.md:107
msgid ""
"[Click to open CodeSandbox.](https://codesandbox.io/p/sandbox/4-"
"iteration-0-5-pwdn2y?file=%2Fsrc%2Fmain.rs%3A1%2C1)"
msgstr ""
"[Cliquez pour ouvrir le CodeSandbox.](https://codesandbox.io/p/sandbox/4-"
"iteration-0-5-pwdn2y?file=%2Fsrc%2Fmain.rs%3A1%2C1)"

#: src/view/04_iteration.md:116
msgid ""
"// Iteration is a very common task in most applications.\n"
"// So how do you take a list of data and render it in the DOM?\n"
"// This example will show you the two ways:\n"
"// 1) for mostly-static lists, using Rust iterators\n"
"// 2) for lists that grow, shrink, or move items, using <For/>\n"
msgstr ""
"// L'itération est une tâche très courante dans la plupart des "
"applications.\n"
"// Alors comment prendre une liste de données et l'ajouter dans le DOM ?\n"
"// Cet exemple vous montre deux façons de procéder :\n"
"// 1) pour les listes principalement statiques, en utilisant les itérateurs "
"Rust\n"
"// 2) pour les listes qui grandissent, diminuent ou déplacent des éléments, "
"en utilisant <For/>.\n"

#: src/view/04_iteration.md:126
#, fuzzy
msgid "\"Iteration\""
msgstr "\"Itération\""

#: src/view/04_iteration.md:127
#, fuzzy
msgid "\"Static List\""
msgstr "\"Liste Statique\""

#: src/view/04_iteration.md:128
msgid "\"Use this pattern if the list itself is static.\""
msgstr "\"Utilisez ce modèle si la liste elle-même est statique.\""

#: src/view/04_iteration.md:130
#, fuzzy
msgid "\"Dynamic List\""
msgstr "\"Liste Dynamique\""

#: src/view/04_iteration.md:131
msgid "\"Use this pattern if the rows in your list will change.\""
msgstr ""
"\"Utilisez ce modèle si les éléments de votre liste sont appelés à changer."

#: src/view/04_iteration.md:135
msgid ""
"/// A list of counters, without the ability\n"
"/// to add or remove any.\n"
msgstr ""
"/// Une liste de compteurs, sans la possibilité\n"
"/// d'en ajouter ou d'en supprimer.\n"

#: src/view/04_iteration.md:140
#, fuzzy
msgid "/// How many counters to include in this list.\n"
msgstr "/// Combien de compteurs inclure dans cette liste.\n"

#: src/view/04_iteration.md:143
#, fuzzy
msgid "// create counter signals that start at incrementing numbers\n"
msgstr ""
"// créer des signaux de compteur qui commencent par des nombres incrémentés\n"

#: src/view/04_iteration.md:146
#, fuzzy
msgid ""
"// when you have a list that doesn't change, you can\n"
"    // manipulate it using ordinary Rust iterators\n"
"    // and collect it into a Vec<_> to insert it into the DOM\n"
msgstr ""
"// lorsque vous avez une liste qui ne change pas, vous pouvez\n"
"    // la manipuler en utilisant des itérateurs Rust ordinaires\n"
"    // et la rassembler dans un Vec<_> pour l'insérer dans le DOM\n"

#: src/view/04_iteration.md:163
#, fuzzy
msgid ""
"// Note that if `counter_buttons` were a reactive list\n"
"    // and its value changed, this would be very inefficient:\n"
"    // it would rerender every row every time the list changed.\n"
msgstr ""
"// Notez que si `counter_buttons` était une liste réactive\n"
"    // et que sa valeur changeait, cela ne serait pas très efficace :\n"
"    // chaque ligne serait de nouveau rendue à chaque modification de la "
"liste.\n"

#: src/view/04_iteration.md:170
msgid ""
"/// A list of counters that allows you to add or\n"
"/// remove counters.\n"
msgstr ""
"/// Une liste de compteurs qui vous permet d'en\n"
"/// ajouter ou d'en supprimer.\n"

#: src/view/04_iteration.md:175
#, fuzzy
msgid "/// The number of counters to begin with.\n"
msgstr "/// Le nombre de compteurs avec lesquels commencer.\n"

#: src/view/04_iteration.md:178
msgid ""
"// This dynamic list will use the <For/> component.\n"
"    // <For/> is a keyed list. This means that each row\n"
"    // has a defined key. If the key does not change, the row\n"
"    // will not be re-rendered. When the list changes, only\n"
"    // the minimum number of changes will be made to the DOM.\n"
msgstr ""
"// Cette liste dynamique utilisera le composant <For/>.\n"
"    // <For/> est une liste à clés. Cela signifie que chaque ligne\n"
"    // a une clé définie. Lorsque la clé ne change pas, la ligne\n"
"    // n'est pas redessinée. Lorsque la liste change, seul un nombre\n"
"    // minimum de changements est effectué dans le DOM.\n"

#: src/view/04_iteration.md:184
msgid ""
"// `next_counter_id` will let us generate unique IDs\n"
"    // we do this by simply incrementing the ID by one\n"
"    // each time we create a counter\n"
msgstr ""
"// `next_counter_id` nous permet de générer des ID uniques\n"
"    // pour cela, il suffit d'incrémenter l'ID d'une unité\n"
"    // à chaque fois que nous créons un compteur\n"

#: src/view/04_iteration.md:189
#, fuzzy
msgid ""
"// we generate an initial list as in <StaticList/>\n"
"    // but this time we include the ID along with the signal\n"
msgstr ""
"// nous générons une liste initiale comme dans <StaticList/>\n"
"    // mais cette fois nous incluons l'ID avec le signal\n"

#: src/view/04_iteration.md:195
#, fuzzy
msgid ""
"// now we store that initial list in a signal\n"
"    // this way, we'll be able to modify the list over time,\n"
"    // adding and removing counters, and it will change reactively\n"
msgstr ""
"// nous stockons maintenant cette liste initiale dans un signal.\n"
"    // de cette façon, nous pourrons modifier la liste au fil du temps, en\n"
"    // ajoutant et en supprimant des compteurs, et elle sera changée de "
"manière réactive.\n"

#: src/view/04_iteration.md:201
msgid "// create a signal for the new counter\n"
msgstr "// crée un signal pour le nouveau compteur\n"

#: src/view/04_iteration.md:203
msgid "// add this counter to the list of counters\n"
msgstr "// ajoute ce compteur à la liste des compteurs\n"

#: src/view/04_iteration.md:205
#, fuzzy
msgid ""
"// since `.update()` gives us `&mut T`\n"
"            // we can just use normal Vec methods like `push`\n"
msgstr ""
"// puisque `.update()` nous donne `&mut T`, nous pouvons\n"
"    // simplement utiliser des méthodes Vec standards, telle `push`\n"

#: src/view/04_iteration.md:209
msgid "// increment the ID so it's always unique\n"
msgstr "// incrémente l'ID pour qu'il soit toujours unique\n"

#: src/view/04_iteration.md:216
msgid "\"Add Counter\""
msgstr "\"Ajouter un compteur"

#: src/view/04_iteration.md:219
msgid ""
"// The <For/> component is central here\n"
"                // This allows for efficient, key list rendering\n"
msgstr ""
"// Le composant <For/> est central ici\n"
"                // Cela permet un tracé efficace des listes de clés\n"

#: src/view/04_iteration.md:222
#, fuzzy
msgid ""
"// `each` takes any function that returns an iterator\n"
"                    // this should usually be a signal or derived signal\n"
"                    // if it's not reactive, just render a Vec<_> instead of "
"<For/>\n"
msgstr ""
"// `each` prend n'importe quelle fonction retournant un itérateur\n"
"                // il s'agit généralement d'un signal ou d'un signal dérivé\n"
"                // s'il n'est pas réactif, il trace simplement un Vec<_> au "
"lieu d'un <For/>\n"

#: src/view/04_iteration.md:226
msgid ""
"// the key should be unique and stable for each row\n"
"                    // using an index is usually a bad idea, unless your "
"list\n"
"                    // can only grow, because moving items around inside the "
"list\n"
"                    // means their indices will change and they will all "
"rerender\n"
msgstr ""
"// la clé doit être unique et stable pour chaque ligne\n"
"                // l'utilisation d'un index est généralement une mauvaise "
"idée, sauf si votre liste\n"
"                // ne peut que croître, car le déplacement des éléments à "
"l'intérieur de la liste\n"
"                 // signifie que leurs indices changeront et qu'ils seront "
"tous redessinés.\n"

#: src/view/04_iteration.md:231
msgid ""
"// `children` receives each item from your `each` iterator\n"
"                    // and returns a view\n"
msgstr ""
"// `children' reçoit chaque élément de votre itérateur `each`\n"
"                    // et retourne une vue\n"

#: src/view/04_iteration.md:248
#, fuzzy
msgid "\"Remove\""
msgstr "\"Supprimer\""

#: src/view/04b_iteration.md:1
msgid "Iterating over More Complex Data with `<For/>`"
msgstr "Itérer sur des données plus complexes avec `<For/>`"

#: src/view/04b_iteration.md:3
#, fuzzy
msgid ""
"This chapter goes into iteration over nested data structures in a bit more "
"depth. It belongs here with the other chapter on iteration, but feel free to "
"skip it and come back if you’d like to stick with simpler subjects for now."
msgstr ""
"Ce chapitre traite de l'itération sur des structures de données imbriquées "
"de manière un peu plus approfondie. Il a sa place ici avec l'autre chapitre "
"sur l'itération, mais n'hésitez pas à le sauter, pour  y revenir plus tard "
"si vous souhaitez vous en tenir à des sujets plus simples pour l'instant."

#: src/view/04b_iteration.md:8 src/interlude_projecting_children.md:5
msgid "The Problem"
msgstr "Le Problème"

#: src/view/04b_iteration.md:10
#, fuzzy
msgid ""
"I just said that the framework does not rerender any of the items in one of "
"the rows, unless the key has changed. This probably makes sense at first, "
"but it can easily trip you up."
msgstr ""
"Je viens de dire que le framework ne rafraîchit pas les éléments d'une des "
"lignes, à moins que la clé n'ait changé. C'est probablement logique à "
"première vue, mais cela peut facilement vous tromper."

#: src/view/04b_iteration.md:14
msgid ""
"Let’s consider an example in which each of the items in our row is some data "
"structure. Imagine, for example, that the items come from some JSON array of "
"keys and values:"
msgstr ""
"Considérons un exemple dans lequel chacun des éléments de notre ligne est "
"une structure de données. Imaginons, par exemple, que les éléments "
"proviennent d'un tableau JSON de clés et de valeurs :"

#: src/view/04b_iteration.md:25
msgid ""
"Let’s define a simple component that will iterate over the rows and display "
"each one:"
msgstr ""
"Définissons un composant simple qui parcourra les lignes et affichera "
"chacune d'entre elles :"

#: src/view/04b_iteration.md:30 src/view/04b_iteration.md:156
msgid "// start with a set of three rows\n"
msgstr "// on commence par un ensemble de trois lignes\n"

#: src/view/04b_iteration.md:33 src/view/04b_iteration.md:159
#: src/view/builder.md:32
msgid "\"foo\""
msgstr "\"foo\""

#: src/view/04b_iteration.md:37 src/view/04b_iteration.md:163
msgid "\"bar\""
msgstr "\"bar\""

#: src/view/04b_iteration.md:41 src/view/04b_iteration.md:167
msgid "\"baz\""
msgstr "\"baz\""

#: src/view/04b_iteration.md:46 src/view/04b_iteration.md:172
msgid ""
"// when we click, update each row,\n"
"\t\t// doubling its value\n"
msgstr ""
"// lorsque nous cliquons, nous mettons à jour chaque ligne,\n"
"\t\t// en doublant sa valeur\n"

#: src/view/04b_iteration.md:54 src/view/04b_iteration.md:180
msgid "// log the new value of the signal\n"
msgstr "// donne la nouvelle valeur du signal\n"

#: src/view/04b_iteration.md:55 src/view/04b_iteration.md:181
msgid "\"{:?}\""
msgstr "\"{:?}\""

#: src/view/04b_iteration.md:57 src/view/04b_iteration.md:183
msgid "\"Update Values\""
msgstr "\"Mettre à jour les valeurs\""

#: src/view/04b_iteration.md:59 src/view/04b_iteration.md:185
msgid "// iterate over the rows and display each value\n"
msgstr "// itére les lignes et affiche chaque valeur\n"

#: src/view/04b_iteration.md:71
#, fuzzy
msgid ""
"Note the `let:child` syntax here. In the previous chapter we introduced "
"`<For/>` with a `children` prop. We can actually create this value directly "
"in the children of the `<For/>` component, without breaking out of the "
"`view` macro: the `let:child` combined with `<p>{child.value}</p>` above is "
"the equivalent of"
msgstr ""
"Notez la syntaxe `let:child`. Dans le chapitre précédent, nous avons "
"présenté `<For/>` avec une propriété `children`. Nous pouvons en fait créer "
"cette valeur directement dans les enfants du composant `<For/>`, sans sortir "
"de la macro `view` : le `let:child` combiné avec `<p>{child.value}</p>` ci-"
"dessus est l'équivalent de"

#: src/view/04b_iteration.md:80
#, fuzzy
msgid ""
"When you click the `Update Values` button... nothing happens. Or rather: the "
"signal is updated, the new value is logged, but the `{child.value}` for each "
"row doesn’t update."
msgstr ""
"Lorsque vous cliquez sur le bouton `Mettre à jour les valeurs`... rien ne se "
"passe. Ou plutôt : le signal est mis à jour, la nouvelle valeur est "
"enregistrée, mais le `{child.value}` de chaque ligne n'est pas mis à jour."

#: src/view/04b_iteration.md:84
msgid ""
"Let’s see: is that because we forgot to add a closure to make it reactive? "
"Let’s try `{move || child.value}`."
msgstr ""
"Voyons voir : est-ce parce que nous avons oublié d'ajouter une closure pour "
"la rendre réactive ? Essayons `{move || child.value}`."

#: src/view/04b_iteration.md:87
msgid "...Nope. Still nothing."
msgstr "... Non. Toujours rien."

#: src/view/04b_iteration.md:89
msgid ""
"Here’s the problem: as I said, each row is only rerendered when the key "
"changes. We’ve updated the value for each row, but not the key for any of "
"the rows, so nothing has rerendered. And if you look at the type of `child."
"value`, it’s a plain `i32`, not a reactive `ReadSignal<i32>` or something. "
"This means that even if we wrap a closure around it, the value in this row "
"will never update."
msgstr ""
"Voici le problème : comme je l'ai dit, chaque ligne n'est restituée que "
"lorsque la clé change. Nous avons mis à jour la valeur pour chaque ligne, "
"mais pas la clé pour aucune des lignes, donc rien n'a été rafraîchi. Et si "
"vous regardez le type de `child.value`, c'est un simple `i32`, pas un "
"`ReadSignal<i32>` réactif ou quelque chose comme ça. Cela signifie que même "
"si nous la plaçons dans une closure, la valeur de cette ligne ne sera jamais "
"mise à jour."

#: src/view/04b_iteration.md:95
msgid "We have three possible solutions:"
msgstr "Trois solutions s'offrent à nous :"

#: src/view/04b_iteration.md:97
#, fuzzy
msgid ""
"change the `key` so that it always updates when the data structure changes"
msgstr ""
"modifier `key` de façon à ce qu'elle soit toujours mise à jour lorsque la "
"structure de données change"

#: src/view/04b_iteration.md:98
msgid "change the `value` so that it’s reactive"
msgstr "changer `value` pour qu'elle soit réactive"

#: src/view/04b_iteration.md:99
msgid ""
"take a reactive slice of the data structure instead of using each row "
"directly"
msgstr ""
"prendre une partie réactive de la structure de données au lieu d'utiliser "
"chaque ligne directement"

#: src/view/04b_iteration.md:101
msgid "Option 1: Change the Key"
msgstr "Option 1: Change la clé"

#: src/view/04b_iteration.md:103
msgid ""
"Each row is only rerendered when the key changes. Our rows above didn’t "
"rerender, because the key didn’t change. So: why not just force the key to "
"change?"
msgstr ""
"Chaque ligne n'est restituée que lorsque la clé change. Nos lignes ci-dessus "
"n'ont pas été à nouveau affichées, car la clé n'a pas changé. Alors : "
"pourquoi ne pas forcer le changement de la clé ?"

#: src/view/04b_iteration.md:116
msgid ""
"Now we include both the key and the value in the `key`. This means that "
"whenever the value of a row changes, `<For/>` will treat it as if it’s an "
"entirely new row, and replace the previous one."
msgstr ""
"Maintenant, nous incluons à la fois la clé et la valeur dans `key`. Cela "
"signifie qu'à chaque fois que la valeur d'une ligne change, `<For/>` la "
"traitera comme s'il s'agissait d'une toute nouvelle ligne, et remplacera la "
"précédente."

#: src/view/04b_iteration.md:120 src/view/04b_iteration.md:212
#: src/view/04b_iteration.md:262
msgid "Pros"
msgstr "Avantages"

#: src/view/04b_iteration.md:122
#, fuzzy
msgid ""
"This is very easy. We can make it even easier by deriving `PartialEq`, `Eq`, "
"and `Hash` on `DatabaseEntry`, in which case we could just `key=|state| "
"state.clone()`."
msgstr ""
"C'est très simple. Nous pouvons rendre cela encore plus facile en dérivant "
"`PartialEq`, `Eq`, et `Hash` sur `DatabaseEntry`, auquel cas nous pourrions "
"simplement `key=|state| state.clone()`."

#: src/view/04b_iteration.md:125 src/view/04b_iteration.md:218
#: src/view/04b_iteration.md:267
msgid "Cons"
msgstr "Inconvénients"

#: src/view/04b_iteration.md:127
#, fuzzy
msgid ""
"**This is the least efficient of the three options.** Every time the value "
"of a row changes, it throws out the previous `<p>` element and replaces it "
"with an entirely new one. Rather than making a fine-grained update to the "
"text node, in other words, it really does rerender the entire row on every "
"change, and this is expensive in proportion to how complex the UI of the row "
"is."
msgstr ""
"**C'est la moins efficace des trois options.** Chaque fois que la valeur "
"d'une ligne change, l'élément `<p>` précédent est supprimé et remplacé par "
"un élément entièrement nouveau. Plutôt que d'effectuer une mise à jour fine "
"du nœud de texte, en d'autres termes, il s'agit en fait de recréer la ligne "
"entière à chaque changement, ce qui est coûteux par rapport à la complexité "
"de l'interface utilisateur de la ligne."

#: src/view/04b_iteration.md:133
msgid ""
"You’ll notice we also end up cloning the whole data structure so that `<For/"
">` can hold onto a copy of the key. For more complex structures, this can "
"become a bad idea fast!"
msgstr ""
"Vous remarquerez que nous clonons également toute la structure de données "
"afin que `<For/>` puisse conserver une copie de la clé. Pour des structures "
"plus complexes, cela peut vite devenir une mauvaise idée !"

#: src/view/04b_iteration.md:136
msgid "Option 2: Nested Signals"
msgstr "Option 2 : Signaux imbriqués"

#: src/view/04b_iteration.md:138
msgid ""
"If we do want that fine-grained reactivity for the value, one option is to "
"wrap the `value` of each row in a signal."
msgstr ""
"Si nous voulons une réactivité fine pour la valeur, une option est "
"d'envelopper la `valeur` de chaque ligne dans un signal."

#: src/view/04b_iteration.md:149
msgid ""
"`RwSignal<_>` is a “read-write signal,” which combines the getter and setter "
"in one object. I’m using it here because it’s a little easier to store in a "
"struct than separate getters and setters."
msgstr ""
"`RwSignal<_>` est un \"signal de lecture-écriture\", qui combine le getter "
"et le setter en un seul objet. Je l'utilise ici parce qu'il est un peu plus "
"facile de le stocker dans une structure que de séparer les getters et les "
"setters."

#: src/view/04b_iteration.md:197
msgid ""
"This version works! And if you look in the DOM inspector in your browser, "
"you’ll see that unlike in the previous version, in this version only the "
"individual text nodes are updated. Passing the signal directly into `{child."
"value}` works, as signals do keep their reactivity if you pass them into the "
"view."
msgstr ""
"Cette version fonctionne ! Et si vous regardez dans l'inspecteur du DOM de "
"votre navigateur, vous verrez que contrairement à la version précédente, "
"dans cette version, seuls les nœuds de texte individuels sont mis à jour. "
"Passer le signal directement à `{child.value}` fonctionne, car les signaux "
"conservent leur réactivité si vous les passez à la vue."

#: src/view/04b_iteration.md:202
msgid ""
"Note that I changed the `set_data.update()` to a `data.with()`. `.with()` is "
"the non-cloning way of accessing a signal’s value. In this case, we are only "
"updating the internal values, not updating the list of values: because "
"signals maintain their own state, we don’t actually need to update the "
"`data` signal at all, so the immutable `.with()` is fine here."
msgstr ""
"Notez que j'ai changé le `set_data.update()` en un `data.with()`. `.with()` "
"est la façon d'accéder à la valeur d'un signal sans clonage. Dans ce cas, "
"nous ne mettons à jour que les valeurs internes, pas la liste des valeurs : "
"puisque les signaux maintiennent leur propre état, nous n'avons pas du tout "
"besoin de mettre à jour le signal `data`, donc le `.with()` immuable est "
"parfait ici."

#: src/view/04b_iteration.md:208
msgid ""
"In fact, this version doesn’t update `data`, so the `<For/>` is essentially "
"a static list as in the last chapter, and this could just be a plain "
"iterator. But the `<For/>` is useful if we want to add or remove rows in the "
"future."
msgstr ""
"En fait, cette version ne met pas à jour `data`, donc le `<For/>` est "
"essentiellement une liste statique comme dans le dernier chapitre, et ceci "
"pourrait être un simple itérateur. Mais le `<For/>` est utile si nous "
"voulons ajouter ou supprimer des lignes dans le futur."

#: src/view/04b_iteration.md:214
#, fuzzy
msgid ""
"This is the most efficient option, and fits directly with the rest of the "
"mental model of the framework: values that change over time are wrapped in "
"signals so the interface can respond to them."
msgstr ""
"Il s'agit de l'option la plus efficace s'inscrivant directement dans le "
"reste du modèle mental du framework : les valeurs qui changent au fil du "
"temps sont enveloppées dans des signaux afin que l'interface puisse y "
"répondre."

#: src/view/04b_iteration.md:220
#, fuzzy
msgid ""
"Nested reactivity can be cumbersome if you’re receiving data from an API or "
"another data source you don’t control, and you don’t want to create a "
"different struct wrapping each field in a signal."
msgstr ""
"La réactivité imbriquée peut être lourde à utiliser si vous recevez des "
"données d'une API ou d'une autre source de données que vous ne contrôlez "
"pas, et que vous ne voulez pas créer une structure différente enveloppant "
"chaque champ dans un signal."

#: src/view/04b_iteration.md:224
msgid "Option 3: Memoized Slices"
msgstr "Option 3 : Slices mémorisées"

#: src/view/04b_iteration.md:226
msgid ""
"Leptos provides a primitive called [`create_memo`](https://docs.rs/leptos/"
"latest/leptos/fn.create_memo.html), which creates a derived computation that "
"only triggers a reactive update when its value has changed."
msgstr ""
"Leptos fournit une primitive appelée [`create_memo`] (https://docs.rs/leptos/"
"latest/leptos/fn.create_memo.html), qui crée un calcul dérivé qui ne "
"déclenche une mise à jour réactive que lorsque sa valeur a changé."

#: src/view/04b_iteration.md:230
msgid ""
"This allows you to create reactive values for subfields of a larger data "
"structure, without needing to wrap the fields of that structure in signals."
msgstr ""
"Cela vous permet de créer des valeurs réactives pour des sous-champs d'une "
"structure de données plus large, sans devoir envelopper les champs de cette "
"structure dans des signaux."

#: src/view/04b_iteration.md:233
msgid ""
"Most of the application can remain the same as the initial (broken) version, "
"but the `<For/>` will be updated to this:"
msgstr ""
"La majeure partie de l'application peut rester identique à la version "
"initiale (cassée), mais le `<For/>` sera mis à jour en conséquence :"

#: src/view/04b_iteration.md:251
msgid "You’ll notice a few differences here:"
msgstr "Vous remarquerez quelques différences :"

#: src/view/04b_iteration.md:253
msgid "we convert the `data` signal into an enumerated iterator"
msgstr "nous convertissons le signal `data` en un itérateur énuméré"

#: src/view/04b_iteration.md:254
#, fuzzy
msgid ""
"we use the `children` prop explicitly, to make it easier to run some non-"
"`view` code"
msgstr ""
"nous utilisons la propriété `children` explicitement, pour faciliter "
"l'exécution de code non-`view`."

#: src/view/04b_iteration.md:255
msgid ""
"we define a `value` memo and use that in the view. This `value` field "
"doesn’t actually use the `child` being passed into each row. Instead, it "
"uses the index and reaches back into the original `data` to get the value."
msgstr ""
"nous définissons un mémo `value` et l'utilisons dans la vue. Ce champ "
"`value` n'utilise pas réellement le `child` qui est passé à chaque ligne. Au "
"lieu de cela, il utilise l'index et utilise le `data` original pour obtenir "
"la valeur."

#: src/view/04b_iteration.md:259
msgid ""
"Every time `data` changes, now, each memo will be recalculated. If its value "
"has changed, it will update its text node, without rerendering the whole row."
msgstr ""
"Maintenant, chaque fois que `data` change, chaque mémo est recalculé. Si sa "
"valeur a changé, il mettra à jour son nœud de texte, sans avoir à redessiner "
"toute la ligne."

#: src/view/04b_iteration.md:264
#, fuzzy
msgid ""
"We get the same fine-grained reactivity of the signal-wrapped version, "
"without needing to wrap the data in signals."
msgstr ""
"Nous obtenons la même réactivité fine que la version enveloppée de signaux, "
"sans avoir besoin d'envelopper les données dans des signaux."

#: src/view/04b_iteration.md:269
#, fuzzy
msgid ""
"It’s a bit more complex to set up this memo-per-row inside the `<For/>` loop "
"rather than using nested signals. For example, you’ll notice that we have to "
"guard against the possibility that the `data[index]` would panic by using "
"`data.get(index)`, because this memo may be  triggered to re-run once just "
"after the row is removed. (This is because the memo for each row and the "
"whole `<For/>` both depend on the same `data` signal, and the order of "
"execution for multiple reactive values that depend on the same signal isn’t "
"guaranteed.)"
msgstr ""
"Il est un peu plus complexe de mettre en place ce mémo par rangée à "
"l'intérieur de la boucle `<For/>`, plutôt que d'utiliser des signaux "
"imbriqués. Par exemple, vous remarquerez que nous devons nous prémunir "
"contre la possibilité que `data[index]` panique en utilisant `data."
"get(index)`. En effet, ce memo peut être déclenché pour être ré-exécuté une "
"fois, juste après que la ligne ait été supprimée. (Ceci parce que le mémo "
"pour chaque ligne et le `<For/>` en entier dépendent tous deux du même "
"signal `data`, et l'ordre d'exécution pour de multiples valeurs réactives "
"qui dépendent du même signal n'est pas garanti)."

#: src/view/04b_iteration.md:276
msgid ""
"Note also that while memos memoize their reactive changes, the same "
"calculation does need to re-run to check the value every time, so nested "
"reactive signals will still be more efficient for pinpoint updates here."
msgstr ""
"Notez également que si les mémos mémorisent leurs changements réactifs, le "
"même calcul doit être exécuté à nouveau pour vérifier la valeur à chaque "
"fois, de sorte que les signaux réactifs imbriqués seront toujours plus "
"efficaces pour des mises à jour précises."

#: src/view/05_forms.md:3
msgid ""
"Forms and form inputs are an important part of interactive apps. There are "
"two basic patterns for interacting with inputs in Leptos, which you may "
"recognize if you’re familiar with React, SolidJS, or a similar framework: "
"using **controlled** or **uncontrolled** inputs."
msgstr ""
"Les formulaires et les entrées de formulaires sont une partie importante des "
"applications interactives. Il existe deux modèles de base pour interagir "
"avec les entrées dans Leptos, que vous reconnaîtrez peut-être si vous êtes "
"familier de React, SolidJS ou d'un framework similaire : l'utilisation "
"d'entrées **contrôlées** ou **non contrôlées**."

#: src/view/05_forms.md:8
msgid "Controlled Inputs"
msgstr "Entrées contrôlées"

#: src/view/05_forms.md:10
msgid ""
"In a \"controlled input,\" the framework controls the state of the input "
"element. On every `input` event, it updates a local signal that holds the "
"current state, which in turn updates the `value` prop of the input."
msgstr ""

#: src/view/05_forms.md:14
msgid "There are two important things to remember:"
msgstr ""

#: src/view/05_forms.md:16
msgid ""
"The `input` event fires on (almost) every change to the element, while the "
"`change` event fires (more or less) when you unfocus the input. You probably "
"want `on:input`, but we give you the freedom to choose."
msgstr ""

#: src/view/05_forms.md:19
msgid ""
"The `value` _attribute_ only sets the initial value of the input, i.e., it "
"only updates the input up to the point that you begin typing. The `value` "
"_property_ continues updating the input after that. You usually want to set "
"`prop:value` for this reason. (The same is true for `checked` and `prop:"
"checked` on an `<input type=\"checkbox\">`.)"
msgstr ""

#: src/view/05_forms.md:26 src/view/05_forms.md:264
msgid "\"Controlled\""
msgstr ""

#: src/view/05_forms.md:29 src/view/05_forms.md:90 src/view/05_forms.md:267
#: src/view/05_forms.md:326 src/view/09_component_children.md:13
#: src/view/builder.md:26 src/reactivity/14_create_effect.md:209
#: src/reactivity/14_create_effect.md:218
#: src/reactivity/14_create_effect.md:264
#: src/reactivity/14_create_effect.md:265 src/async/13_actions.md:81
#: src/async/13_actions.md:148 src/15_global_state.md:381
#: src/router/20_form.md:118 src/router/20_form.md:141
#: src/progressive_enhancement/action_form.md:33
#: src/progressive_enhancement/action_form.md:80
#: src/progressive_enhancement/action_form.md:82
msgid "\"text\""
msgstr ""

#: src/view/05_forms.md:31
msgid ""
"// event_target_value is a Leptos helper function\n"
"            // it functions the same way as event.target.value\n"
"            // in JavaScript, but smooths out some of the typecasting\n"
"            // necessary to make this work in Rust\n"
msgstr ""

#: src/view/05_forms.md:38
msgid ""
"// the `prop:` syntax lets you update a DOM property,\n"
"        // rather than an attribute.\n"
msgstr ""

#: src/view/05_forms.md:42 src/view/05_forms.md:96 src/view/05_forms.md:291
#: src/view/05_forms.md:337 src/15_global_state.md:388
msgid "\"Name is: \""
msgstr ""

#: src/view/05_forms.md:46
msgid "Why do you need `prop:value`?"
msgstr ""

#: src/view/05_forms.md:48
msgid ""
"Web browsers are the most ubiquitous and stable platform for rendering "
"graphical user interfaces in existence. They have also maintained an "
"incredible backwards compatibility over their three decades of existence. "
"Inevitably, this means there are some quirks."
msgstr ""

#: src/view/05_forms.md:50
msgid ""
"One odd quirk is that there is a distinction between HTML attributes and DOM "
"element properties, i.e., between something called an “attribute” which is "
"parsed from HTML and can be set on a DOM element with `.setAttribute()`, and "
"something called a “property” which is a field of the JavaScript class "
"representation of that parsed HTML element."
msgstr ""

#: src/view/05_forms.md:52
msgid ""
"In the case of an `<input value=...>`, setting the `value` _attribute_ is "
"defined as setting the initial value for the input, and setting `value` "
"_property_ sets its current value. It maybe easiest to understand this by "
"opening `about:blank` and running the following JavaScript in the browser "
"console, line by line:"
msgstr ""

#: src/view/05_forms.md:55
msgid "// create an input and append it to the DOM\n"
msgstr ""

#: src/view/05_forms.md:56
msgid "\"input\""
msgstr ""

#: src/view/05_forms.md:59 src/view/05_forms.md:60 src/view/05_forms.md:64
msgid "\"value\""
msgstr ""

#: src/view/05_forms.md:59
msgid "\"test\""
msgstr ""

#: src/view/05_forms.md:59
msgid "// updates the input\n"
msgstr ""

#: src/view/05_forms.md:60
msgid "\"another test\""
msgstr ""

#: src/view/05_forms.md:60
msgid "// updates the input again\n"
msgstr ""

#: src/view/05_forms.md:62
msgid "// now go and type into the input: delete some characters, etc.\n"
msgstr ""

#: src/view/05_forms.md:64
msgid "\"one more time?\""
msgstr ""

#: src/view/05_forms.md:65
msgid ""
"// nothing should have changed. setting the \"initial value\" does nothing "
"now\n"
msgstr ""

#: src/view/05_forms.md:67
msgid "// however...\n"
msgstr ""

#: src/view/05_forms.md:68
msgid "\"But this works\""
msgstr ""

#: src/view/05_forms.md:71
msgid ""
"Many other frontend frameworks conflate attributes and properties, or create "
"a special case for inputs that sets the value correctly. Maybe Leptos should "
"do this too; but for now, I prefer giving users the maximum amount of "
"control over whether they’re setting an attribute or a property, and doing "
"my best to educate people about the actual underlying browser behavior "
"rather than obscuring it."
msgstr ""

#: src/view/05_forms.md:73
msgid "Uncontrolled Inputs"
msgstr ""

#: src/view/05_forms.md:75
msgid ""
"In an \"uncontrolled input,\" the browser controls the state of the input "
"element. Rather than continuously updating a signal to hold its value, we "
"use a [`NodeRef`](https://docs.rs/leptos/latest/leptos/struct.NodeRef.html) "
"to access the input when we want to get its value."
msgstr ""

#: src/view/05_forms.md:80
msgid ""
"In this example, we only notify the framework when the `<form>` fires a "
"`submit` event. Note the use of the [`leptos::html`](https://docs.rs/leptos/"
"latest/leptos/html/index.html#) module, which provides a bunch of types for "
"every HTML element."
msgstr ""

#: src/view/05_forms.md:84 src/view/05_forms.md:300
msgid "\"Uncontrolled\""
msgstr ""

#: src/view/05_forms.md:89
msgid "// on_submit defined below\n"
msgstr ""

#: src/view/05_forms.md:94 src/view/05_forms.md:335 src/async/13_actions.md:85
#: src/async/13_actions.md:152 src/router/20_form.md:38
#: src/router/20_form.md:134 src/router/20_form.md:169
#: src/progressive_enhancement/action_form.md:35
#: src/progressive_enhancement/action_form.md:86
msgid "\"submit\""
msgstr ""

#: src/view/05_forms.md:94 src/view/05_forms.md:335
#: src/view/09_component_children.md:16
msgid "\"Submit\""
msgstr ""

#: src/view/05_forms.md:100
msgid "The view should be pretty self-explanatory by now. Note two things:"
msgstr ""

#: src/view/05_forms.md:102
msgid ""
"Unlike in the controlled input example, we use `value` (not `prop:value`). "
"This is because we’re just setting the initial value of the input, and "
"letting the browser control its state. (We could use `prop:value` instead.)"
msgstr ""

#: src/view/05_forms.md:105
msgid ""
"We use `node_ref=...` to fill the `NodeRef`. (Older examples sometimes use "
"`_ref`. They are the same thing, but `node_ref` has better rust-analyzer "
"support.)"
msgstr ""

#: src/view/05_forms.md:108
msgid ""
"`NodeRef` is a kind of reactive smart pointer: we can use it to access the "
"underlying DOM node. Its value will be set when the element is rendered."
msgstr ""

#: src/view/05_forms.md:113 src/view/05_forms.md:309
msgid "// stop the page from reloading!\n"
msgstr ""

#: src/view/05_forms.md:116 src/view/05_forms.md:312
msgid "// here, we'll extract the value from the input\n"
msgstr ""

#: src/view/05_forms.md:118
msgid ""
"// event handlers can only fire after the view\n"
"        // is mounted to the DOM, so the `NodeRef` will be `Some`\n"
msgstr ""

#: src/view/05_forms.md:120
msgid "\"<input> should be mounted\""
msgstr ""

#: src/view/05_forms.md:121
msgid ""
"// `leptos::HtmlElement<html::Input>` implements `Deref`\n"
"        // to a `web_sys::HtmlInputElement`.\n"
"        // this means we can call`HtmlInputElement::value()`\n"
"        // to get the current value of the input\n"
msgstr ""

#: src/view/05_forms.md:130
msgid ""
"Our `on_submit` handler will access the input’s value and use it to call "
"`set_name`. To access the DOM node stored in the `NodeRef`, we can simply "
"call it as a function (or using `.get()`). This will return `Option<leptos::"
"HtmlElement<html::Input>>`, but we know that the element has already been "
"mounted (how else did you fire this event!), so it's safe to unwrap here."
msgstr ""

#: src/view/05_forms.md:136
msgid ""
"We can then call `.value()` to get the value out of the input, because "
"`NodeRef` gives us access to a correctly-typed HTML element."
msgstr ""

#: src/view/05_forms.md:139
msgid ""
"Take a look at [`web_sys` and `HtmlElement`](../web_sys.md) to learn more "
"about using a `leptos::HtmlElement`. Also see the full CodeSandbox example "
"at the end of this page."
msgstr ""

#: src/view/05_forms.md:142
msgid "Special Cases: `<textarea>` and `<select>`"
msgstr ""

#: src/view/05_forms.md:144
msgid "Two form elements tend to cause some confusion, in different ways."
msgstr ""

#: src/view/05_forms.md:146
msgid "`<textarea>`"
msgstr ""

#: src/view/05_forms.md:148
msgid ""
"Unlike `<input>`, the `<textarea>` element does not support a `value` "
"attribute. Instead, it receives its value as a plain text node in its HTML "
"children."
msgstr ""

#: src/view/05_forms.md:151
msgid ""
"In the current version of Leptos (in fact in Leptos 0.1-0.6), creating a "
"dynamic child inserts a comment marker node. This can cause incorrect "
"`<textarea>` rendering (and issues during hydration) if you try to use it to "
"show dynamic content."
msgstr ""

#: src/view/05_forms.md:155
msgid ""
"Instead, you can pass a non-reactive initial value as a child, and use `prop:"
"value` to set its current value. (`<textarea>` doesn’t support the `value` "
"**attribute**, but _does_ support the `value` **property**...)"
msgstr ""

#: src/view/05_forms.md:163
msgid "/* etc */"
msgstr ""

#: src/view/05_forms.md:165
msgid "/* plain-text initial value, does not change if the signal changes */"
msgstr ""

#: src/view/05_forms.md:171
msgid "`<select>`"
msgstr ""

#: src/view/05_forms.md:173
msgid ""
"The `<select>` element also does not have a `value` attribute, _nor_ a "
"`value` property. Instead, its value is determined by the `selected` "
"attribute of its `<option>` fields. Some frameworks obscure this with a "
"`value` field on `<select>`; if you try this in Leptos (or vanilla "
"JavaScript) it won’t work."
msgstr ""

#: src/view/05_forms.md:178
msgid "To use the `selected` field:"
msgstr ""

#: src/view/05_forms.md:181 src/view/05_forms.md:194 src/view/05_forms.md:195
#: src/view/05_forms.md:197 src/view/05_forms.md:208 src/view/05_forms.md:215
#: src/view/09_component_children.md:119 src/async/11_suspense.md:59
#: src/router/20_form.md:125 src/router/20_form.md:126
#: src/router/20_form.md:160 src/router/20_form.md:161
msgid "\"B\""
msgstr ""

#: src/view/05_forms.md:188 src/view/05_forms.md:189 src/view/05_forms.md:191
#: src/view/05_forms.md:214 src/view/09_component_children.md:118
#: src/async/11_suspense.md:54 src/router/20_form.md:122
#: src/router/20_form.md:123 src/router/20_form.md:157
#: src/router/20_form.md:158
msgid "\"A\""
msgstr ""

#: src/view/05_forms.md:203
msgid "That's somewhat repetitive, but can easily be refactored:"
msgstr ""

#: src/view/05_forms.md:216 src/view/09_component_children.md:120
#: src/router/20_form.md:128 src/router/20_form.md:129
#: src/router/20_form.md:163 src/router/20_form.md:164
msgid "\"C\""
msgstr ""

#: src/view/05_forms.md:234
msgid ""
"Tip: the single `value` attribute in the component is equivalent to "
"`value=value`. This is only the case for _components_: in HTML elements, a "
"single `value` attribute is equivalent to `value=true`. This is expected to "
"be made consistent in the next major version of Leptos; see [this issue]"
"(https://github.com/leptos-rs/leptos/issues/2196) for more details."
msgstr ""

#: src/view/05_forms.md:239
msgid "**Controlled vs uncontrolled forms CodeSandbox:**"
msgstr ""

#: src/view/05_forms.md:241
msgid ""
"[Click to open CodeSandbox.](https://codesandbox.io/p/sandbox/5-forms-0-5-"
"rf2t7c?file=%2Fsrc%2Fmain.rs%3A1%2C1)"
msgstr ""

#: src/view/05_forms.md:254
msgid "\"Controlled Component\""
msgstr ""

#: src/view/05_forms.md:256
msgid "\"Uncontrolled Component\""
msgstr ""

#: src/view/05_forms.md:263
msgid "// create a signal to hold the value\n"
msgstr ""

#: src/view/05_forms.md:268
msgid "// fire an event whenever the input changes\n"
msgstr ""

#: src/view/05_forms.md:270
msgid ""
"// event_target_value is a Leptos helper function\n"
"                // it functions the same way as event.target.value\n"
"                // in JavaScript, but smooths out some of the typecasting\n"
"                // necessary to make this work in Rust\n"
msgstr ""

#: src/view/05_forms.md:277
msgid ""
"// the `prop:` syntax lets you update a DOM property,\n"
"            // rather than an attribute.\n"
"            //\n"
"            // IMPORTANT: the `value` *attribute* only sets the\n"
"            // initial value, until you have made a change.\n"
"            // The `value` *property* sets the current value.\n"
"            // This is a quirk of the DOM; I didn't invent it.\n"
"            // Other frameworks gloss this over; I think it's\n"
"            // more important to give you access to the browser\n"
"            // as it really works.\n"
"            //\n"
"            // tl;dr: use prop:value for form inputs\n"
msgstr ""

#: src/view/05_forms.md:297
msgid "// import the type for <input>\n"
msgstr ""

#: src/view/05_forms.md:302
msgid ""
"// we'll use a NodeRef to store a reference to the input element\n"
"    // this will be filled when the element is created\n"
msgstr ""

#: src/view/05_forms.md:306
msgid ""
"// fires when the form `submit` event happens\n"
"    // this will store the value of the <input> in our signal\n"
msgstr ""

#: src/view/05_forms.md:314
msgid ""
"// event handlers can only fire after the view\n"
"            // is mounted to the DOM, so the `NodeRef` will be `Some`\n"
msgstr ""

#: src/view/05_forms.md:316
msgid "\"<input> to exist\""
msgstr ""

#: src/view/05_forms.md:317
msgid ""
"// `NodeRef` implements `Deref` for the DOM element type\n"
"            // this means we can call`HtmlInputElement::value()`\n"
"            // to get the current value of the input\n"
msgstr ""

#: src/view/05_forms.md:327
msgid ""
"// here, we use the `value` *attribute* to set only\n"
"                // the initial value, letting the browser maintain\n"
"                // the state after that\n"
msgstr ""

#: src/view/05_forms.md:332
msgid "// store a reference to this input in `input_element`\n"
msgstr ""

#: src/view/06_control_flow.md:3
msgid ""
"In most applications, you sometimes need to make a decision: Should I render "
"this part of the view, or not? Should I render `<ButtonA/>` or `<WidgetB/>`? "
"This is **control flow**."
msgstr ""

#: src/view/06_control_flow.md:7
msgid "A Few Tips"
msgstr ""

#: src/view/06_control_flow.md:9
msgid ""
"When thinking about how to do this with Leptos, it’s important to remember a "
"few things:"
msgstr ""

#: src/view/06_control_flow.md:12
msgid ""
"Rust is an expression-oriented language: control-flow expressions like `if "
"x() { y } else { z }` and `match x() { ... }` return their values. This "
"makes them very useful for declarative user interfaces."
msgstr ""

#: src/view/06_control_flow.md:15
msgid ""
"For any `T` that implements `IntoView`—in other words, for any type that "
"Leptos knows how to render—`Option<T>` and `Result<T, impl Error>` _also_ "
"implement `IntoView`. And just as `Fn() -> T` renders a reactive `T`, `Fn() -"
"> Option<T>` and `Fn() -> Result<T, impl Error>` are reactive."
msgstr ""

#: src/view/06_control_flow.md:19
msgid ""
"Rust has lots of handy helpers like [Option::map](https://doc.rust-lang.org/"
"std/option/enum.Option.html#method.map), [Option::and_then](https://doc.rust-"
"lang.org/std/option/enum.Option.html#method.and_then), [Option::ok_or]"
"(https://doc.rust-lang.org/std/option/enum.Option.html#method.ok_or), "
"[Result::map](https://doc.rust-lang.org/std/result/enum.Result.html#method."
"map), [Result::ok](https://doc.rust-lang.org/std/result/enum.Result."
"html#method.ok), and [bool::then](https://doc.rust-lang.org/std/primitive."
"bool.html#method.then) that allow you to convert, in a declarative way, "
"between a few different standard types, all of which can be rendered. "
"Spending time in the `Option` and `Result` docs in particular is one of the "
"best ways to level up your Rust game."
msgstr ""

#: src/view/06_control_flow.md:28
msgid ""
"And always remember: to be reactive, values must be functions. You’ll see me "
"constantly wrap things in a `move ||` closure, below. This is to ensure that "
"they actually rerun when the signal they depend on changes, keeping the UI "
"reactive."
msgstr ""

#: src/view/06_control_flow.md:32
msgid "So What?"
msgstr ""

#: src/view/06_control_flow.md:34
msgid ""
"To connect the dots a little: this means that you can actually implement "
"most of your control flow with native Rust code, without any control-flow "
"components or special knowledge."
msgstr ""

#: src/view/06_control_flow.md:38
msgid "For example, let’s start with a simple signal and derived signal:"
msgstr ""

#: src/view/06_control_flow.md:45
msgid ""
"If you don’t recognize what’s going on with `is_odd`, don’t worry about it "
"too much. It’s just a simple way to test whether an integer is odd by doing "
"a bitwise `AND` with `1`."
msgstr ""

#: src/view/06_control_flow.md:49
msgid "We can use these signals and ordinary Rust to build most control flow."
msgstr ""

#: src/view/06_control_flow.md:51
msgid "`if` statements"
msgstr ""

#: src/view/06_control_flow.md:53
msgid ""
"Let’s say I want to render some text if the number is odd, and some other "
"text if it’s even. Well, how about this?"
msgstr ""

#: src/view/06_control_flow.md:60 src/view/06_control_flow.md:111
#: src/view/06_control_flow.md:330
msgid "\"Odd\""
msgstr ""

#: src/view/06_control_flow.md:62 src/view/06_control_flow.md:112
#: src/view/06_control_flow.md:332
msgid "\"Even\""
msgstr ""

#: src/view/06_control_flow.md:68
msgid ""
"An `if` expression returns its value, and a `&str` implements `IntoView`, so "
"a `Fn() -> &str` implements `IntoView`, so this... just works!"
msgstr ""

#: src/view/06_control_flow.md:71
msgid "`Option<T>`"
msgstr ""

#: src/view/06_control_flow.md:73
msgid ""
"Let’s say we want to render some text if it’s odd, and nothing if it’s even."
msgstr ""

#: src/view/06_control_flow.md:78 src/view/06_control_flow.md:92
msgid "\"Ding ding ding!\""
msgstr ""

#: src/view/06_control_flow.md:89
msgid ""
"This works fine. We can make it a little shorter if we’d like, using `bool::"
"then()`."
msgstr ""

#: src/view/06_control_flow.md:98
msgid ""
"You could even inline this if you’d like, although personally I sometimes "
"like the better `cargo fmt` and `rust-analyzer` support I get by pulling "
"things out of the `view`."
msgstr ""

#: src/view/06_control_flow.md:101
msgid "`match` statements"
msgstr ""

#: src/view/06_control_flow.md:103
msgid ""
"We’re still just writing ordinary Rust code, right? So you have all the "
"power of Rust’s pattern matching at your disposal."
msgstr ""

#: src/view/06_control_flow.md:109
msgid "\"Zero\""
msgstr ""

#: src/view/06_control_flow.md:110 src/view/06_control_flow.md:236
#: src/view/06_control_flow.md:273 src/view/06_control_flow.md:366
msgid "\"One\""
msgstr ""

#: src/view/06_control_flow.md:120
msgid "And why not? YOLO, right?"
msgstr ""

#: src/view/06_control_flow.md:122
msgid "Preventing Over-Rendering"
msgstr ""

#: src/view/06_control_flow.md:124
msgid "Not so YOLO."
msgstr ""

#: src/view/06_control_flow.md:126
msgid ""
"Everything we’ve just done is basically fine. But there’s one thing you "
"should remember and try to be careful with. Each one of the control-flow "
"functions we’ve created so far is basically a derived signal: it will rerun "
"every time the value changes. In the examples above, where the value "
"switches from even to odd on every change, this is fine."
msgstr ""

#: src/view/06_control_flow.md:131
msgid "But consider the following example:"
msgstr ""

#: src/view/06_control_flow.md:137 src/view/06_control_flow.md:152
msgid "\"Big\""
msgstr ""

#: src/view/06_control_flow.md:139 src/view/06_control_flow.md:155
msgid "\"Small\""
msgstr ""

#: src/view/06_control_flow.md:147
msgid "This _works_, for sure. But if you added a log, you might be surprised"
msgstr ""

#: src/view/06_control_flow.md:151
msgid "\"{}: rendering Big\""
msgstr ""

#: src/view/06_control_flow.md:154
msgid "\"{}: rendering Small\""
msgstr ""

#: src/view/06_control_flow.md:159
msgid "As a user clicks a button, you’d see something like this:"
msgstr ""

#: src/view/06_control_flow.md:173
msgid ""
"Every time `value` changes, it reruns the `if` statement. This makes sense, "
"with how reactivity works. But it has a downside. For a simple text node, "
"rerunning the `if` statement and rerendering isn’t a big deal. But imagine "
"it were like this:"
msgstr ""

#: src/view/06_control_flow.md:186
msgid ""
"This rerenders `<Small/>` five times, then `<Big/>` infinitely. If they’re "
"loading resources, creating signals, or even just creating DOM nodes, this "
"is unnecessary work."
msgstr ""

#: src/view/06_control_flow.md:190
msgid "`<Show/>`"
msgstr ""

#: src/view/06_control_flow.md:192
msgid ""
"The [`<Show/>`](https://docs.rs/leptos/latest/leptos/fn.Show.html) component "
"is the answer. You pass it a `when` condition function, a `fallback` to be "
"shown if the `when` function returns `false`, and children to be rendered if "
"`when` is `true`."
msgstr ""

#: src/view/06_control_flow.md:209
msgid ""
"`<Show/>` memoizes the `when` condition, so it only renders its `<Small/>` "
"once, continuing to show the same component until `value` is greater than "
"five; then it renders `<Big/>` once, continuing to show it indefinitely or "
"until `value` goes below five and then renders `<Small/>` again."
msgstr ""

#: src/view/06_control_flow.md:214
msgid ""
"This is a helpful tool to avoid rerendering when using dynamic `if` "
"expressions. As always, there's some overhead: for a very simple node (like "
"updating a single text node, or updating a class or attribute), a `move || "
"if ...` will be more efficient. But if it’s at all expensive to render "
"either branch, reach for `<Show/>`."
msgstr ""

#: src/view/06_control_flow.md:220
msgid "Note: Type Conversions"
msgstr ""

#: src/view/06_control_flow.md:222
msgid "There‘s one final thing it’s important to say in this section."
msgstr ""

#: src/view/06_control_flow.md:224
msgid ""
"The `view` macro doesn’t return the most-generic wrapping type [`View`]"
"(https://docs.rs/leptos/latest/leptos/enum.View.html). Instead, it returns "
"things with types like `Fragment` or `HtmlElement<Input>`. This can be a "
"little annoying if you’re returning different HTML elements from different "
"branches of a conditional:"
msgstr ""

#: src/view/06_control_flow.md:235 src/view/06_control_flow.md:272
msgid "// returns HtmlElement<Pre>\n"
msgstr ""

#: src/view/06_control_flow.md:239 src/view/06_control_flow.md:276
msgid "// returns HtmlElement<P>\n"
msgstr ""

#: src/view/06_control_flow.md:240 src/view/06_control_flow.md:277
#: src/view/06_control_flow.md:371
msgid "\"Two\""
msgstr ""

#: src/view/06_control_flow.md:242 src/view/06_control_flow.md:279
msgid "// returns HtmlElement<Textarea>\n"
msgstr ""

#: src/view/06_control_flow.md:249
msgid ""
"This strong typing is actually very powerful, because [`HtmlElement`]"
"(https://docs.rs/leptos/0.1.3/leptos/struct.HtmlElement.html) is, among "
"other things, a smart pointer: each `HtmlElement<T>` type implements `Deref` "
"for the appropriate underlying `web_sys` type. In other words, in the "
"browser your `view` returns real DOM elements, and you can access native DOM "
"methods on them."
msgstr ""

#: src/view/06_control_flow.md:256
msgid ""
"But it can be a little annoying in conditional logic like this, because you "
"can’t return different types from different branches of a condition in Rust. "
"There are two ways to get yourself out of this situation:"
msgstr ""

#: src/view/06_control_flow.md:260
msgid ""
"If you have multiple `HtmlElement` types, convert them to "
"`HtmlElement<AnyElement>` with [`.into_any()`](https://docs.rs/leptos/latest/"
"leptos/struct.HtmlElement.html#method.into_any)"
msgstr ""

#: src/view/06_control_flow.md:262
msgid ""
"If you have a variety of view types that are not all `HtmlElement`, convert "
"them to `View`s with [`.into_view()`](https://docs.rs/leptos/latest/leptos/"
"trait.IntoView.html#tymethod.into_view)."
msgstr ""

#: src/view/06_control_flow.md:265
msgid "Here’s the same example, with the conversion added:"
msgstr ""

#: src/view/06_control_flow.md:286
msgid ""
"[Click to open CodeSandbox.](https://codesandbox.io/p/sandbox/6-control-"
"flow-0-5-4yn7qz?file=%2Fsrc%2Fmain.rs%3A1%2C1)"
msgstr ""

#: src/view/06_control_flow.md:300
msgid "\"How odd!\""
msgstr ""

#: src/view/06_control_flow.md:303
msgid "\"Control Flow\""
msgstr ""

#: src/view/06_control_flow.md:305
msgid "// Simple UI to update and show a value\n"
msgstr ""

#: src/view/06_control_flow.md:307 src/view/builder.md:67 src/testing.md:102
#: src/15_global_state.md:132
msgid "\"+1\""
msgstr ""

#: src/view/06_control_flow.md:309
msgid "\"Value is: \""
msgstr ""

#: src/view/06_control_flow.md:313
msgid "\"Option<T>\""
msgstr ""

#: src/view/06_control_flow.md:314
msgid ""
"// For any `T` that implements `IntoView`,\n"
"        // so does `Option<T>`\n"
msgstr ""

#: src/view/06_control_flow.md:318
msgid "// This means you can use `Option` methods on it\n"
msgstr ""

#: src/view/06_control_flow.md:321
msgid "\"Conditional Logic\""
msgstr ""

#: src/view/06_control_flow.md:322
msgid ""
"// You can do dynamic conditional if-then-else\n"
"        // logic in several ways\n"
"        //\n"
"        // a. An \"if\" expression in a function\n"
"        //    This will simply re-render every time the value\n"
"        //    changes, which makes it good for lightweight UI\n"
msgstr ""

#: src/view/06_control_flow.md:336
msgid ""
"// b. Toggling some kind of class\n"
"        //    This is smart for an element that's going to\n"
"        //    toggled often, because it doesn't destroy\n"
"        //    it in between states\n"
"        //    (you can find the `hidden` class in `index.html`)\n"
msgstr ""

#: src/view/06_control_flow.md:341
msgid "\"Appears if even.\""
msgstr ""

#: src/view/06_control_flow.md:343
msgid ""
"// c. The <Show/> component\n"
"        //    This only renders the fallback and the child\n"
"        //    once, lazily, and toggles between them when\n"
"        //    needed. This makes it more efficient in many cases\n"
"        //    than a {move || if ...} block\n"
msgstr ""

#: src/view/06_control_flow.md:349
msgid "\"Even steven\""
msgstr ""

#: src/view/06_control_flow.md:351
msgid "\"Oddment\""
msgstr ""

#: src/view/06_control_flow.md:354
msgid ""
"// d. Because `bool::then()` converts a `bool` to\n"
"        //    `Option`, you can use it to create a show/hide toggled\n"
msgstr ""

#: src/view/06_control_flow.md:356
msgid "\"Oddity!\""
msgstr ""

#: src/view/06_control_flow.md:358
msgid "\"Converting between Types\""
msgstr ""

#: src/view/06_control_flow.md:359
msgid ""
"// e. Note: if branches return different types,\n"
"        //    you can convert between them with\n"
"        //    `.into_any()` (for different HTML element types)\n"
"        //    or `.into_view()` (for all view types)\n"
msgstr ""

#: src/view/06_control_flow.md:365
msgid "// <pre> returns HtmlElement<Pre>\n"
msgstr ""

#: src/view/06_control_flow.md:369
msgid ""
"// <p> returns HtmlElement<P>\n"
"                // so we convert into a more generic type\n"
msgstr ""

#: src/view/07_errors.md:3
msgid ""
"[In the last chapter](./06_control_flow.md), we saw that you can render "
"`Option<T>`: in the `None` case, it will render nothing, and in the `T` "
"case, it will render `T` (that is, if `T` implements `IntoView`). You can "
"actually do something very similar with a `Result<T, E>`. In the `Err(_)` "
"case, it will render nothing. In the `Ok(T)` case, it will render the `T`."
msgstr ""

#: src/view/07_errors.md:9
msgid "Let’s start with a simple component to capture a number input."
msgstr ""

#: src/view/07_errors.md:16 src/view/07_errors.md:127
msgid "// when input changes, try to parse a number from the input\n"
msgstr ""

#: src/view/07_errors.md:21
msgid "\"Type a number (or not!)\""
msgstr ""

#: src/view/07_errors.md:22 src/view/07_errors.md:72 src/view/07_errors.md:134
#: src/router/20_form.md:95 src/router/20_form.md:106 src/router/20_form.md:119
#: src/router/20_form.md:149 src/router/20_form.md:150
msgid "\"number\""
msgstr ""

#: src/view/07_errors.md:24 src/view/07_errors.md:89 src/view/07_errors.md:156
msgid "\"You entered \""
msgstr ""

#: src/view/07_errors.md:32
msgid ""
"Every time you change the input, `on_input` will attempt to parse its value "
"into a 32-bit integer (`i32`), and store it in our `value` signal, which is "
"a `Result<i32, _>`. If you type the number `42`, the UI will display"
msgstr ""

#: src/view/07_errors.md:40
msgid "But if you type the string`foo`, it will display"
msgstr ""

#: src/view/07_errors.md:46
msgid ""
"This is not great. It saves us using `.unwrap_or_default()` or something, "
"but it would be much nicer if we could catch the error and do something with "
"it."
msgstr ""

#: src/view/07_errors.md:49
msgid ""
"You can do that, with the [`<ErrorBoundary/>`](https://docs.rs/leptos/latest/"
"leptos/fn.ErrorBoundary.html) component."
msgstr ""

#: src/view/07_errors.md:52
msgid "`<ErrorBoundary/>`"
msgstr ""

#: src/view/07_errors.md:54
msgid ""
"An `<ErrorBoundary/>` is a little like the `<Show/>` component we saw in the "
"last chapter. If everything’s okay—which is to say, if everything is `Ok(_)`—"
"it renders its children. But if there’s an `Err(_)` rendered among those "
"children, it will trigger the `<ErrorBoundary/>`’s `fallback`."
msgstr ""

#: src/view/07_errors.md:59
msgid "Let’s add an `<ErrorBoundary/>` to this example."
msgstr ""

#: src/view/07_errors.md:69 src/view/07_errors.md:131
msgid "\"Error Handling\""
msgstr ""

#: src/view/07_errors.md:71 src/view/07_errors.md:133
msgid "\"Type a number (or something that's not a number!)\""
msgstr ""

#: src/view/07_errors.md:74 src/view/07_errors.md:139
msgid "// the fallback receives a signal containing current errors\n"
msgstr ""

#: src/view/07_errors.md:76 src/view/07_errors.md:141
msgid "\"error\""
msgstr ""

#: src/view/07_errors.md:77 src/view/07_errors.md:142
msgid "\"Not a number! Errors: \""
msgstr ""

#: src/view/07_errors.md:78
msgid "// we can render a list of errors as strings, if we'd like\n"
msgstr ""

#: src/view/07_errors.md:96
msgid "Now, if you type `42`, `value` is `Ok(42)` and you’ll see"
msgstr ""

#: src/view/07_errors.md:102
msgid ""
"If you type `foo`, value is `Err(_)` and the `fallback` will render. We’ve "
"chosen to render the list of errors as a `String`, so you’ll see something "
"like"
msgstr ""

#: src/view/07_errors.md:110
msgid ""
"If you fix the error, the error message will disappear and the content "
"you’re wrapping in an `<ErrorBoundary/>` will appear again."
msgstr ""

#: src/view/07_errors.md:113
msgid ""
"[Click to open CodeSandbox.](https://codesandbox.io/p/sandbox/7-"
"errors-0-5-5mptv9?file=%2Fsrc%2Fmain.rs%3A1%2C1)"
msgstr ""

#: src/view/07_errors.md:135
msgid ""
"// If an `Err(_) had been rendered inside the <ErrorBoundary/>,\n"
"            // the fallback will be displayed. Otherwise, the children of "
"the\n"
"            // <ErrorBoundary/> will be displayed.\n"
msgstr ""

#: src/view/07_errors.md:143
msgid ""
"// we can render a list of errors\n"
"                        // as strings, if we'd like\n"
msgstr ""

#: src/view/07_errors.md:157
msgid ""
"// because `value` is `Result<i32, _>`,\n"
"                    // it will render the `i32` if it is `Ok`,\n"
"                    // and render nothing and trigger the error boundary\n"
"                    // if it is `Err`. It's a signal, so this will "
"dynamically\n"
"                    // update when `value` changes\n"
msgstr ""

#: src/view/08_parent_child.md:3
msgid ""
"You can think of your application as a nested tree of components. Each "
"component handles its own local state and manages a section of the user "
"interface, so components tend to be relatively self-contained."
msgstr ""

#: src/view/08_parent_child.md:7
msgid ""
"Sometimes, though, you’ll want to communicate between a parent component and "
"its child. For example, imagine you’ve defined a `<FancyButton/>` component "
"that adds some styling, logging, or something else to a `<button/>`. You "
"want to use a `<FancyButton/>` in your `<App/>` component. But how can you "
"communicate between the two?"
msgstr ""

#: src/view/08_parent_child.md:13
msgid ""
"It’s easy to communicate state from a parent component to a child component. "
"We covered some of this in the material on [components and props]"
"(./03_components.md). Basically if you want the parent to communicate to the "
"child, you can pass a [`ReadSignal`](https://docs.rs/leptos/latest/leptos/"
"struct.ReadSignal.html), a [`Signal`](https://docs.rs/leptos/latest/leptos/"
"struct.Signal.html), or even a [`MaybeSignal`](https://docs.rs/leptos/latest/"
"leptos/enum.MaybeSignal.html) as a prop."
msgstr ""

#: src/view/08_parent_child.md:20
msgid ""
"But what about the other direction? How can a child send notifications about "
"events or state changes back up to the parent?"
msgstr ""

#: src/view/08_parent_child.md:23
msgid "There are four basic patterns of parent-child communication in Leptos."
msgstr ""

#: src/view/08_parent_child.md:25
msgid ""
"1. Pass a [`WriteSignal`](https://docs.rs/leptos/latest/leptos/struct."
"WriteSignal.html)"
msgstr ""

#: src/view/08_parent_child.md:27
msgid ""
"One approach is simply to pass a `WriteSignal` from the parent down to the "
"child, and update it in the child. This lets you manipulate the state of the "
"parent from the child."
msgstr ""

#: src/view/08_parent_child.md:35 src/view/08_parent_child.md:68
#: src/view/08_parent_child.md:107 src/view/08_parent_child.md:145
#: src/view/08_parent_child.md:181 src/view/08_parent_child.md:222
#: src/view/08_parent_child.md:281
msgid "\"Toggled? \""
msgstr ""

#: src/view/08_parent_child.md:46 src/view/08_parent_child.md:79
#: src/view/08_parent_child.md:120 src/view/08_parent_child.md:156
#: src/view/08_parent_child.md:301
msgid "\"Toggle\""
msgstr ""

#: src/view/08_parent_child.md:52
msgid ""
"This pattern is simple, but you should be careful with it: passing around a "
"`WriteSignal` can make it hard to reason about your code. In this example, "
"it’s pretty clear when you read `<App/>` that you are handing off the "
"ability to mutate `toggled`, but it’s not at all clear when or how it will "
"change. In this small, local example it’s easy to understand, but if you "
"find yourself passing around `WriteSignal`s like this throughout your code, "
"you should really consider whether this is making it too easy to write "
"spaghetti code."
msgstr ""

#: src/view/08_parent_child.md:59
msgid "2. Use a Callback"
msgstr ""

#: src/view/08_parent_child.md:61
msgid ""
"Another approach would be to pass a callback to the child: say, `on_click`."
msgstr ""

#: src/view/08_parent_child.md:85
msgid ""
"You’ll notice that whereas `<ButtonA/>` was given a `WriteSignal` and "
"decided how to mutate it, `<ButtonB/>` simply fires an event: the mutation "
"happens back in `<App/>`. This has the advantage of keeping local state "
"local, preventing the problem of spaghetti mutation. But it also means the "
"logic to mutate that signal needs to exist up in `<App/>`, not down in "
"`<ButtonB/>`. These are real trade-offs, not a simple right-or-wrong choice."
msgstr ""

#: src/view/08_parent_child.md:91
msgid ""
"Note the way we use the `Callback<In, Out>` type. This is basically a "
"wrapper around a closure `Fn(In) -> Out` that is also `Copy` and makes it "
"easy to pass around."
msgstr ""

#: src/view/08_parent_child.md:95
msgid ""
"We also used the `#[prop(into)]` attribute so we can pass a normal closure "
"into `on_click`. Please see the [chapter \"`into` Props\"](./03_components."
"md#into-props) for more details."
msgstr ""

#: src/view/08_parent_child.md:98
msgid "2.1 Use Closure instead of `Callback`"
msgstr ""

#: src/view/08_parent_child.md:100
msgid ""
"You can use a Rust closure `Fn(MouseEvent)` directly instead of `Callback`:"
msgstr ""

#: src/view/08_parent_child.md:126
msgid ""
"The code is very similar in this case. On more advanced use-cases using a "
"closure might require some cloning compared to using a `Callback`."
msgstr ""

#: src/view/08_parent_child.md:129
msgid ""
"Note the way we declare the generic type `F` here for the callback. If "
"you’re confused, look back at the [generic props](./03_components."
"html#generic-props) section of the chapter on components."
msgstr ""

#: src/view/08_parent_child.md:134
msgid "3. Use an Event Listener"
msgstr ""

#: src/view/08_parent_child.md:136
msgid ""
"You can actually write Option 2 in a slightly different way. If the callback "
"maps directly onto a native DOM event, you can add an `on:` listener "
"directly to the place you use the component in your `view` macro in `<App/>`."
msgstr ""

#: src/view/08_parent_child.md:146
msgid ""
"// note the on:click instead of on_click\n"
"        // this is the same syntax as an HTML element event listener\n"
msgstr ""

#: src/view/08_parent_child.md:161
msgid ""
"This lets you write way less code in `<ButtonC/>` than you did for `<ButtonB/"
">`, and still gives a correctly-typed event to the listener. This works by "
"adding an `on:` event listener to each element that `<ButtonC/>` returns: in "
"this case, just the one `<button>`."
msgstr ""

#: src/view/08_parent_child.md:166
msgid ""
"Of course, this only works for actual DOM events that you’re passing "
"directly through to the elements you’re rendering in the component. For more "
"complex logic that doesn’t map directly onto an element (say you create "
"`<ValidatedForm/>` and want an `on_valid_form_submit` callback) you should "
"use Option 2."
msgstr ""

#: src/view/08_parent_child.md:171
msgid "4. Providing a Context"
msgstr ""

#: src/view/08_parent_child.md:173
msgid ""
"This version is actually a variant on Option 1. Say you have a deeply-nested "
"component tree:"
msgstr ""

#: src/view/08_parent_child.md:190 src/view/08_parent_child.md:231
msgid "\"My Page\""
msgstr ""

#: src/view/08_parent_child.md:201 src/view/08_parent_child.md:242
msgid "\"content\""
msgstr ""

#: src/view/08_parent_child.md:213
msgid ""
"Now `<ButtonD/>` is no longer a direct child of `<App/>`, so you can’t "
"simply pass your `WriteSignal` to its props. You could do what’s sometimes "
"called “prop drilling,” adding a prop to each layer between the two:"
msgstr ""

#: src/view/08_parent_child.md:254
msgid ""
"This is a mess. `<Layout/>` and `<Content/>` don’t need `set_toggled`; they "
"just pass it through to `<ButtonD/>`. But I need to declare the prop in "
"triplicate. This is not only annoying but hard to maintain: imagine we add a "
"“half-toggled” option and the type of `set_toggled` needs to change to an "
"`enum`. We have to change it in three places!"
msgstr ""

#: src/view/08_parent_child.md:260
msgid "Isn’t there some way to skip levels?"
msgstr ""

#: src/view/08_parent_child.md:262
msgid "There is!"
msgstr ""

#: src/view/08_parent_child.md:264
msgid "4.1 The Context API"
msgstr ""

#: src/view/08_parent_child.md:266
msgid ""
"You can provide data that skips levels by using [`provide_context`](https://"
"docs.rs/leptos/latest/leptos/fn.provide_context.html) and [`use_context`]"
"(https://docs.rs/leptos/latest/leptos/fn.use_context.html). Contexts are "
"identified by the type of the data you provide (in this example, "
"`WriteSignal<bool>`), and they exist in a top-down tree that follows the "
"contours of your UI tree. In this example, we can use context to skip the "
"unnecessary prop drilling."
msgstr ""

#: src/view/08_parent_child.md:277
msgid "// share `set_toggled` with all children of this component\n"
msgstr ""

#: src/view/08_parent_child.md:285
msgid ""
"// <Layout/> and <Content/> omitted\n"
"// To work in this version, drop their references to set_toggled\n"
msgstr ""

#: src/view/08_parent_child.md:291
msgid ""
"// use_context searches up the context tree, hoping to\n"
"    // find a `WriteSignal<bool>`\n"
"    // in this case, I .expect() because I know I provided it\n"
msgstr ""

#: src/view/08_parent_child.md:295
msgid "\"to have found the setter provided\""
msgstr ""

#: src/view/08_parent_child.md:307
msgid ""
"The same caveats apply to this as to `<ButtonA/>`: passing a `WriteSignal` "
"around should be done with caution, as it allows you to mutate state from "
"arbitrary parts of your code. But when done carefully, this can be one of "
"the most effective techniques for global state management in Leptos: simply "
"provide the state at the highest level you’ll need it, and use it wherever "
"you need it lower down."
msgstr ""

#: src/view/08_parent_child.md:314
msgid ""
"Note that there are no performance downsides to this approach. Because you "
"are passing a fine-grained reactive signal, _nothing happens_ in the "
"intervening components (`<Layout/>` and `<Content/>`) when you update it. "
"You are communicating directly between `<ButtonD/>` and `<App/>`. In fact—"
"and this is the power of fine-grained reactivity—you are communicating "
"directly between a button click in `<ButtonD/>` and a single text node in "
"`<App/>`. It’s as if the components themselves don’t exist at all. And, "
"well... at runtime, they don’t. It’s just signals and effects, all the way "
"down."
msgstr ""

#: src/view/08_parent_child.md:323
msgid ""
"[Click to open CodeSandbox.](https://codesandbox.io/p/sandbox/8-parent-"
"child-0-5-7rz7qd?file=%2Fsrc%2Fmain.rs%3A1%2C2)"
msgstr ""

#: src/view/08_parent_child.md:332
msgid ""
"// This highlights four different ways that child components can "
"communicate\n"
"// with their parent:\n"
"// 1) <ButtonA/>: passing a WriteSignal as one of the child component "
"props,\n"
"//    for the child component to write into and the parent to read\n"
"// 2) <ButtonB/>: passing a closure as one of the child component props, "
"for\n"
"//    the child component to call\n"
"// 3) <ButtonC/>: adding an `on:` event listener to a component\n"
"// 4) <ButtonD/>: providing a context that is used in the component (rather "
"than prop drilling)\n"
msgstr ""

#: src/view/08_parent_child.md:347
msgid "// just some signals to toggle three classes on our <p>\n"
msgstr ""

#: src/view/08_parent_child.md:353
msgid ""
"// the newtype pattern isn't *necessary* here but is a good practice\n"
"    // it avoids confusion with other possible future `WriteSignal<bool>` "
"contexts\n"
"    // and makes it easier to refer to it in ButtonC\n"
msgstr ""

#: src/view/08_parent_child.md:361
msgid ""
"// class: attributes take F: Fn() => bool, and these signals all implement "
"Fn()\n"
msgstr ""

#: src/view/08_parent_child.md:367
msgid "\"Lorem ipsum sit dolor amet.\""
msgstr ""

#: src/view/08_parent_child.md:370
msgid "// Button A: pass the signal setter\n"
msgstr ""

#: src/view/08_parent_child.md:373
msgid "// Button B: pass a closure\n"
msgstr ""

#: src/view/08_parent_child.md:376
msgid ""
"// Button B: use a regular event listener\n"
"            // setting an event listener on a component like this applies "
"it\n"
"            // to each of the top-level elements the component returns\n"
msgstr ""

#: src/view/08_parent_child.md:381
msgid "// Button D gets its setter from context rather than props\n"
msgstr ""

#: src/view/08_parent_child.md:386
msgid "/// Button A receives a signal setter and updates the signal itself\n"
msgstr ""

#: src/view/08_parent_child.md:390
msgid "/// Signal that will be toggled when the button is clicked.\n"
msgstr ""

#: src/view/08_parent_child.md:397
msgid "\"Toggle Red\""
msgstr ""

#: src/view/08_parent_child.md:401
msgid "/// Button B receives a closure\n"
msgstr ""

#: src/view/08_parent_child.md:405
msgid "/// Callback that will be invoked when the button is clicked.\n"
msgstr ""

#: src/view/08_parent_child.md:415
msgid "\"Toggle Right\""
msgstr ""

#: src/view/08_parent_child.md:419
msgid ""
"// just a note: in an ordinary function ButtonB could take on_click: impl "
"Fn(MouseEvent) + 'static\n"
"    // and save you from typing out the generic\n"
"    // the component macro actually expands to define a\n"
"    //\n"
"    // struct ButtonBProps<F> where F: Fn(MouseEvent) + 'static {\n"
"    //   on_click: F\n"
"    // }\n"
"    //\n"
"    // this is what allows us to have named props in our component "
"invocation,\n"
"    // instead of an ordered list of function arguments\n"
"    // if Rust ever had named function arguments we could drop this "
"requirement\n"
msgstr ""

#: src/view/08_parent_child.md:431
msgid ""
"/// Button C is a dummy: it renders a button but doesn't handle\n"
"/// its click. Instead, the parent component adds an event listener.\n"
msgstr ""

#: src/view/08_parent_child.md:438
msgid "\"Toggle Italics\""
msgstr ""

#: src/view/08_parent_child.md:442
msgid ""
"/// Button D is very similar to Button A, but instead of passing the setter "
"as a prop\n"
"/// we get it from the context\n"
msgstr ""

#: src/view/08_parent_child.md:453
msgid "\"Toggle Small Caps\""
msgstr ""

#: src/view/09_component_children.md:1
msgid "Component Children"
msgstr ""

#: src/view/09_component_children.md:3
msgid ""
"It’s pretty common to want to pass children into a component, just as you "
"can pass children into an HTML element. For example, imagine I have a "
"`<FancyForm/>` component that enhances an HTML `<form>`. I need some way to "
"pass all its inputs."
msgstr ""

#: src/view/09_component_children.md:12
msgid "\"Some Input\""
msgstr ""

#: src/view/09_component_children.md:13
msgid "\"something\""
msgstr ""

#: src/view/09_component_children.md:21
msgid ""
"How can you do this in Leptos? There are basically two ways to pass "
"components to other components:"
msgstr ""

#: src/view/09_component_children.md:24
msgid "**render props**: properties that are functions that return a view"
msgstr ""

#: src/view/09_component_children.md:25
msgid ""
"the **`children`** prop: a special component property that includes anything "
"you pass as a child to the component."
msgstr ""

#: src/view/09_component_children.md:28
msgid ""
"In fact, you’ve already seen these both in action in the [`<Show/>`](/"
"view/06_control_flow.html#show) component:"
msgstr ""

#: src/view/09_component_children.md:33
msgid "// `when` is a normal prop\n"
msgstr ""

#: src/view/09_component_children.md:35
msgid "// `fallback` is a \"render prop\": a function that returns a view\n"
msgstr ""

#: src/view/09_component_children.md:38
msgid ""
"// `<Big/>` (and anything else here)\n"
"    // will be given to the `children` prop\n"
msgstr ""

#: src/view/09_component_children.md:45
msgid "Let’s define a component that takes some children and a render prop."
msgstr ""

#: src/view/09_component_children.md:50 src/view/09_component_children.md:181
msgid ""
"/// Takes a function (type F) that returns anything that can be\n"
"    /// converted into a View (type IV)\n"
msgstr ""

#: src/view/09_component_children.md:53
msgid "/// `children` takes the `Children` type\n"
msgstr ""

#: src/view/09_component_children.md:61 src/view/09_component_children.md:195
msgid "\"Render Prop\""
msgstr ""

#: src/view/09_component_children.md:64 src/view/09_component_children.md:198
msgid "\"Children\""
msgstr ""

#: src/view/09_component_children.md:70
msgid ""
"`render_prop` and `children` are both functions, so we can call them to "
"generate the appropriate views. `children`, in particular, is an alias for "
"`Box<dyn FnOnce() -> Fragment>`. (Aren't you glad we named it `Children` "
"instead?)"
msgstr ""

#: src/view/09_component_children.md:74
msgid ""
"If you need a `Fn` or `FnMut` here because you need to call `children` more "
"than once, we also provide `ChildrenFn` and `ChildrenMut` aliases."
msgstr ""

#: src/view/09_component_children.md:77
msgid "We can use the component like this:"
msgstr ""

#: src/view/09_component_children.md:81
msgid "\"Hi, there!\""
msgstr ""

#: src/view/09_component_children.md:82
msgid ""
"// these get passed to `children`\n"
"        \"Some text\""
msgstr ""

#: src/view/09_component_children.md:84
msgid "\"A span\""
msgstr ""

#: src/view/09_component_children.md:89
msgid "Manipulating Children"
msgstr ""

#: src/view/09_component_children.md:91
msgid ""
"The [`Fragment`](https://docs.rs/leptos/latest/leptos/struct.Fragment.html) "
"type is basically a way of wrapping a `Vec<View>`. You can insert it "
"anywhere into your view."
msgstr ""

#: src/view/09_component_children.md:94
msgid ""
"But you can also access those inner views directly to manipulate them. For "
"example, here’s a component that takes its children and turns them into an "
"unordered list."
msgstr ""

#: src/view/09_component_children.md:100
msgid "// Fragment has `nodes` field that contains a Vec<View>\n"
msgstr ""

#: src/view/09_component_children.md:113
msgid "Calling it like this will create a list:"
msgstr ""

#: src/view/09_component_children.md:125
msgid ""
"[Click to open CodeSandbox.](https://codesandbox.io/p/sandbox/9-component-"
"children-0-5-m4jwhp?file=%2Fsrc%2Fmain.rs%3A1%2C1)"
msgstr ""

#: src/view/09_component_children.md:134
msgid ""
"// Often, you want to pass some kind of child view to another\n"
"// component. There are two basic patterns for doing this:\n"
"// - \"render props\": creating a component prop that takes a function\n"
"//   that creates a view\n"
"// - the `children` prop: a special property that contains content\n"
"//   passed as the children of a component in your view, not as a\n"
"//   property\n"
msgstr ""

#: src/view/09_component_children.md:147
msgid ""
"// items.with(...) reacts to the value without cloning\n"
"        // by applying a function. Here, we pass the `len` method\n"
"        // on a `Vec<_>` directly\n"
msgstr ""

#: src/view/09_component_children.md:152
msgid "\"Length: \""
msgstr ""

#: src/view/09_component_children.md:157
msgid ""
"// This component just displays the two kinds of children,\n"
"        // embedding them in some other markup\n"
msgstr ""

#: src/view/09_component_children.md:160
msgid ""
"// for component props, you can shorthand\n"
"            // `render_prop=render_prop` => `render_prop`\n"
"            // (this doesn't work for HTML element attributes)\n"
msgstr ""

#: src/view/09_component_children.md:165
msgid "// these look just like the children of an HTML element\n"
msgstr ""

#: src/view/09_component_children.md:166 src/view/09_component_children.md:172
msgid "\"Here's a child.\""
msgstr ""

#: src/view/09_component_children.md:167 src/view/09_component_children.md:173
msgid "\"Here's another child.\""
msgstr ""

#: src/view/09_component_children.md:170
msgid "// This component actually iterates over and wraps the children\n"
msgstr ""

#: src/view/09_component_children.md:177
msgid "/// Displays a `render_prop` and some children within markup.\n"
msgstr ""

#: src/view/09_component_children.md:184
msgid ""
"/// `children` takes the `Children` type\n"
"    /// this is an alias for `Box<dyn FnOnce() -> Fragment>`\n"
"    /// ... aren't you glad we named it `Children` instead?\n"
msgstr ""

#: src/view/09_component_children.md:194
msgid "\"<TakesChildren/>\""
msgstr ""

#: src/view/09_component_children.md:202
msgid "/// Wraps each child in an `<li>` and embeds them in a `<ul>`.\n"
msgstr ""

#: src/view/09_component_children.md:206
msgid ""
"// children() returns a `Fragment`, which has a\n"
"    // `nodes` field that contains a Vec<View>\n"
"    // this means we can iterate over the children\n"
"    // to create something new!\n"
msgstr ""

#: src/view/09_component_children.md:217
msgid "\"<WrapsChildren/>\""
msgstr ""

#: src/view/09_component_children.md:218
msgid "// wrap our wrapped children in a UL\n"
msgstr ""

#: src/view/builder.md:3
msgid ""
"If you’re perfectly happy with the `view!` macro syntax described so far, "
"you’re welcome to skip this chapter. The builder syntax described in this "
"section is always available, but never required."
msgstr ""

#: src/view/builder.md:5
msgid ""
"For one reason or another, many developers would prefer to avoid macros. "
"Perhaps you don’t like the limited `rustfmt` support. (Although, you should "
"check out [`leptosfmt`](https://github.com/bram209/leptosfmt), which is an "
"excellent tool!) Perhaps you worry about the effect of macros on compile "
"time. Perhaps you prefer the aesthetics of pure Rust syntax, or you have "
"trouble context-switching between an HTML-like syntax and your Rust code. Or "
"perhaps you want more flexibility in how you create and manipulate HTML "
"elements than the `view` macro provides."
msgstr ""

#: src/view/builder.md:7
msgid "If you fall into any of those camps, the builder syntax may be for you."
msgstr ""

#: src/view/builder.md:9
msgid ""
"The `view` macro expands an HTML-like syntax to a series of Rust functions "
"and method calls. If you’d rather not use the `view` macro, you can simply "
"use that expanded syntax yourself. And it’s actually pretty nice!"
msgstr ""

#: src/view/builder.md:11
msgid ""
"First off, if you want you can even drop the `#[component]` macro: a "
"component is just a setup function that creates your view, so you can define "
"a component as a simple function call:"
msgstr ""

#: src/view/builder.md:17
msgid ""
"Elements are created by calling a function with the same name as the HTML "
"element:"
msgstr ""

#: src/view/builder.md:23
msgid ""
"You can add children to the element with [`.child()`](https://docs.rs/leptos/"
"latest/leptos/struct.HtmlElement.html#method.child), which takes a single "
"child or a tuple or array of types that implement [`IntoView`](https://docs."
"rs/leptos/latest/leptos/trait.IntoView.html)."
msgstr ""

#: src/view/builder.md:26
msgid "\"Big, \""
msgstr ""

#: src/view/builder.md:26
msgid "\"bold \""
msgstr ""

#: src/view/builder.md:29
msgid ""
"Attributes are added with [`.attr()`](https://docs.rs/leptos/latest/leptos/"
"struct.HtmlElement.html#method.attr). This can take any of the same types "
"that you could pass as an attribute into the view macro (types that "
"implement [`IntoAttribute`](https://docs.rs/leptos/latest/leptos/trait."
"IntoAttribute.html))."
msgstr ""

#: src/view/builder.md:32 src/router/17_nested_routing.md:293
#: src/router/18_params_and_queries.md:74
#: src/router/18_params_and_queries.md:171 src/router/19_a.md:124
msgid "\"id\""
msgstr ""

#: src/view/builder.md:32
msgid "\"data-count\""
msgstr ""

#: src/view/builder.md:35
msgid ""
"Similarly, the `class:`, `prop:`, and `style:` syntaxes map directly onto [`."
"class()`](https://docs.rs/leptos/latest/leptos/struct.HtmlElement."
"html#method.class), [`.prop()`](https://docs.rs/leptos/latest/leptos/struct."
"HtmlElement.html#method.prop), and [`.style()`](https://docs.rs/leptos/"
"latest/leptos/struct.HtmlElement.html#method.style) methods."
msgstr ""

#: src/view/builder.md:37
msgid ""
"Event listeners can be added with [`.on()`](https://docs.rs/leptos/latest/"
"leptos/struct.HtmlElement.html#method.on). Typed events found in [`leptos::"
"ev`](https://docs.rs/leptos/latest/leptos/ev/index.html) prevent typos in "
"event names and allow for correct type inference in the callback function."
msgstr ""

#: src/view/builder.md:42 src/view/builder.md:60 src/testing.md:99
msgid "\"Clear\""
msgstr ""

#: src/view/builder.md:45
msgid ""
"Many additional methods can be found in the [`HtmlElement`](https://docs.rs/"
"leptos/latest/leptos/struct.HtmlElement.html#method.child) docs, including "
"some methods that are not directly available in the `view` macro."
msgstr ""

#: src/view/builder.md:47
msgid ""
"All of this adds up to a very Rusty syntax to build full-featured views, if "
"you prefer this style."
msgstr ""

#: src/view/builder.md:50
msgid ""
"/// A simple counter view.\n"
"// A component is really just a function call: it runs once to create the "
"DOM and reactive system\n"
msgstr ""

#: src/view/builder.md:56
msgid ""
"// typed events found in leptos::ev\n"
"            // 1) prevent typos in event names\n"
"            // 2) allow for correct type inference in callbacks\n"
msgstr ""

#: src/view/builder.md:63 src/testing.md:100
msgid "\"-1\""
msgstr ""

#: src/view/builder.md:64 src/testing.md:101
msgid "\"Value: \""
msgstr ""

#: src/view/builder.md:64 src/testing.md:101
msgid "\"!\""
msgstr ""

#: src/view/builder.md:72
msgid ""
"This also has the benefit of being more flexible: because these are all "
"plain Rust functions and methods, it’s easier to use them in things like "
"iterator adapters without any additional “magic”:"
msgstr ""

#: src/view/builder.md:75
msgid "// take some set of attribute names and values\n"
msgstr ""

#: src/view/builder.md:76
msgid ""
"// you can use the builder syntax to “spread” these onto the\n"
"// element in a way that’s not possible with the view macro\n"
msgstr ""

#: src/view/builder.md:85
msgid "Performance Note"
msgstr ""

#: src/view/builder.md:87
msgid ""
"One caveat: the `view` macro applies significant optimizations in server-"
"side-rendering (SSR) mode to improve HTML rendering performance "
"significantly (think 2-4x faster, depending on the characteristics of any "
"given app). It does this by analyzing your `view` at compile time and "
"converting the static parts into simple HTML strings, rather than expanding "
"them into the builder syntax."
msgstr ""

#: src/view/builder.md:89
msgid "This means two things:"
msgstr ""

#: src/view/builder.md:91
msgid ""
"The builder syntax and `view` macro should not be mixed, or should only be "
"mixed very carefully: at least in SSR mode, the output of the `view` should "
"be treated as a “black box” that can’t have additional builder methods "
"applied to it without causing inconsistencies."
msgstr ""

#: src/view/builder.md:92
msgid ""
"Using the builder syntax will result in less-than-optimal SSR performance. "
"It won’t be slow, by any means (and it’s worth running your own benchmarks "
"in any case), just slower than the `view`\\-optimized version."
msgstr ""

#: src/reactivity/index.md:3
msgid ""
"Leptos is built on top of a fine-grained reactive system, designed to run "
"expensive side effects (like rendering something in a browser, or making a "
"network request) as infrequently as possible in response to change, reactive "
"values."
msgstr ""

#: src/reactivity/index.md:5
msgid ""
"So far we’ve seen signals in action. These chapters will go into a bit more "
"depth, and look at effects, which are the other half of the story."
msgstr ""

#: src/reactivity/working_with_signals.md:3
msgid ""
"So far we’ve used some simple examples of [`create_signal`](https://docs.rs/"
"leptos/latest/leptos/fn.create_signal.html), which returns a [`ReadSignal`]"
"(https://docs.rs/leptos/latest/leptos/struct.ReadSignal.html) getter and a "
"[`WriteSignal`](https://docs.rs/leptos/latest/leptos/struct.WriteSignal."
"html) setter."
msgstr ""

#: src/reactivity/working_with_signals.md:5
msgid "Getting and Setting"
msgstr ""

#: src/reactivity/working_with_signals.md:7
msgid "There are four basic signal operations:"
msgstr ""

#: src/reactivity/working_with_signals.md:9
msgid ""
"[`.get()`](https://docs.rs/leptos/latest/leptos/struct.ReadSignal.html#impl-"
"SignalGet%3CT%3E-for-ReadSignal%3CT%3E) clones the current value of the "
"signal and tracks any future changes to the value reactively."
msgstr ""

#: src/reactivity/working_with_signals.md:10
msgid ""
"[`.with()`](https://docs.rs/leptos/latest/leptos/struct.ReadSignal.html#impl-"
"SignalWith%3CT%3E-for-ReadSignal%3CT%3E) takes a function, which receives "
"the current value of the signal by reference (`&T`), and tracks any future "
"changes."
msgstr ""

#: src/reactivity/working_with_signals.md:11
msgid ""
"[`.set()`](https://docs.rs/leptos/latest/leptos/struct.WriteSignal.html#impl-"
"SignalSet%3CT%3E-for-WriteSignal%3CT%3E) replaces the current value of the "
"signal and notifies any subscribers that they need to update."
msgstr ""

#: src/reactivity/working_with_signals.md:12
msgid ""
"[`.update()`](https://docs.rs/leptos/latest/leptos/struct.WriteSignal."
"html#impl-SignalUpdate%3CT%3E-for-WriteSignal%3CT%3E) takes a function, "
"which receives a mutable reference to the current value of the signal (`&mut "
"T`), and notifies any subscribers that they need to update. (`.update()` "
"doesn’t return the value returned by the closure, but you can use [`."
"try_update()`](https://docs.rs/leptos/latest/leptos/trait.SignalUpdate."
"html#tymethod.try_update) if you need to; for example, if you’re removing an "
"item from a `Vec<_>` and want the removed item.)"
msgstr ""

#: src/reactivity/working_with_signals.md:14
msgid ""
"Calling a `ReadSignal` as a function is syntax sugar for `.get()`. Calling a "
"`WriteSignal` as a function is syntax sugar for `.set()`. So"
msgstr ""

#: src/reactivity/working_with_signals.md:22
msgid "is the same as"
msgstr ""

#: src/reactivity/working_with_signals.md:30
msgid ""
"You might notice that `.get()` and `.set()` can be implemented in terms of `."
"with()` and `.update()`. In other words, `count.get()` is identical with "
"`count.with(|n| n.clone())`, and `count.set(1)` is implemented by doing "
"`count.update(|n| *n = 1)`."
msgstr ""

#: src/reactivity/working_with_signals.md:32
msgid ""
"But of course, `.get()` and `.set()` (or the plain function-call forms!) are "
"much nicer syntax."
msgstr ""

#: src/reactivity/working_with_signals.md:34
msgid ""
"However, there are some very good use cases for `.with()` and `.update()`."
msgstr ""

#: src/reactivity/working_with_signals.md:36
msgid "For example, consider a signal that holds a `Vec<String>`."
msgstr ""

#: src/reactivity/working_with_signals.md:41
#: src/reactivity/working_with_signals.md:52 src/async/12_transition.md:23
#: src/interlude_projecting_children.md:127 src/router/17_nested_routing.md:276
#: src/router/17_nested_routing.md:297 src/router/18_params_and_queries.md:154
#: src/router/18_params_and_queries.md:175 src/router/19_a.md:107
#: src/router/19_a.md:128 src/appendix_reactive_graph.md:41
#: src/appendix_reactive_graph.md:70 src/appendix_reactive_graph.md:134
msgid "\"Alice\""
msgstr ""

#: src/reactivity/working_with_signals.md:45
msgid ""
"In terms of logic, this is simple enough, but it’s hiding some significant "
"inefficiencies. Remember that `names().is_empty()` is sugar for `names.get()."
"is_empty()`, which clones the value (it’s `names.with(|n| n.clone())."
"is_empty()`). This means we clone the whole `Vec<String>`, run `is_empty()`, "
"and then immediately throw away the clone."
msgstr ""

#: src/reactivity/working_with_signals.md:47
msgid ""
"Likewise, `set_names` replaces the value with a whole new `Vec<_>`. This is "
"fine, but we might as well just mutate the original `Vec<_>` in place."
msgstr ""

#: src/reactivity/working_with_signals.md:56
msgid ""
"Now our function simply takes `names` by reference to run `is_empty()`, "
"avoiding that clone."
msgstr ""

#: src/reactivity/working_with_signals.md:58
msgid ""
"And if you have Clippy on, or if you have sharp eyes, you may notice we can "
"make this even neater:"
msgstr ""

#: src/reactivity/working_with_signals.md:62 src/testing.md:41
#: src/web_sys.md:124 src/web_sys.md:132 src/web_sys.md:137 src/web_sys.md:142
#: src/web_sys.md:147 src/islands.md:343 src/islands.md:358
msgid "// ...\n"
msgstr ""

#: src/reactivity/working_with_signals.md:66
msgid ""
"After all, `.with()` simply takes a function that takes the value by "
"reference. Since `Vec::is_empty` takes `&self`, we can pass it in directly "
"and avoid the unnecessary closure."
msgstr ""

#: src/reactivity/working_with_signals.md:68
msgid ""
"There are some helper macros to make using `.with()` and `.update()` easier "
"to use, especially when using multiple signals."
msgstr ""

#: src/reactivity/working_with_signals.md:71 src/async/12_transition.md:24
#: src/15_global_state.md:95 src/router/17_nested_routing.md:277
#: src/router/17_nested_routing.md:298 src/router/18_params_and_queries.md:155
#: src/router/18_params_and_queries.md:176 src/router/19_a.md:108
#: src/router/19_a.md:129 src/appendix_reactive_graph.md:51
#: src/appendix_reactive_graph.md:102
msgid "\"Bob\""
msgstr ""

#: src/reactivity/working_with_signals.md:72
msgid "\"J.\""
msgstr ""

#: src/reactivity/working_with_signals.md:73
msgid "\"Smith\""
msgstr ""

#: src/reactivity/working_with_signals.md:76
msgid ""
"If you wanted to concatenate these 3 signals together without unnecessary "
"cloning, you would have to write something like:"
msgstr ""

#: src/reactivity/working_with_signals.md:81
#: src/reactivity/working_with_signals.md:91
msgid "\"{first} {middle} {last}\""
msgstr ""

#: src/reactivity/working_with_signals.md:86
msgid "Which is very long and annoying to write."
msgstr ""

#: src/reactivity/working_with_signals.md:88
msgid ""
"Instead, you can use the `with!` macro to get references to all the signals "
"at the same time."
msgstr ""

#: src/reactivity/working_with_signals.md:94
msgid ""
"This expands to the same thing as above. Take a look at the [`with!`]"
"(https://docs.rs/leptos/latest/leptos/macro.with.html) docs for more info, "
"and the corresponding macros [`update!`](https://docs.rs/leptos/latest/"
"leptos/macro.update.html), [`with_value!`](https://docs.rs/leptos/latest/"
"leptos/macro.with_value.html) and [`update_value!`](https://docs.rs/leptos/"
"latest/leptos/macro.update_value.html)."
msgstr ""

#: src/reactivity/working_with_signals.md:96
msgid "Making signals depend on each other"
msgstr ""

#: src/reactivity/working_with_signals.md:98
msgid ""
"Often people ask about situations in which some signal needs to change based "
"on some other signal’s value. There are three good ways to do this, and one "
"that’s less than ideal but okay under controlled circumstances."
msgstr ""

#: src/reactivity/working_with_signals.md:100
msgid "Good Options"
msgstr ""

#: src/reactivity/working_with_signals.md:102
msgid ""
"**1) B is a function of A.** Create a signal for A and a derived signal or "
"memo for B."
msgstr ""

#: src/reactivity/working_with_signals.md:110
msgid ""
"For guidance on whether to use a derived signal or a memo, see the docs for "
"[`create_memo`](https://docs.rs/leptos/latest/leptos/fn.create_memo.html)"
msgstr ""

#: src/reactivity/working_with_signals.md:112
msgid ""
"**2) C is a function of A and some other thing B.** Create signals for A and "
"B and a derived signal or memo for C."
msgstr ""

#: src/reactivity/working_with_signals.md:115
msgid "\"Bridget\""
msgstr ""

#: src/reactivity/working_with_signals.md:116
msgid "\"Jones\""
msgstr ""

#: src/reactivity/working_with_signals.md:117
msgid "\"{first_name} {last_name}\""
msgstr ""

#: src/reactivity/working_with_signals.md:120
msgid ""
"**3) A and B are independent signals, but sometimes updated at the same time."
"** When you make the call to update A, make a separate call to update B."
msgstr ""

#: src/reactivity/working_with_signals.md:124
msgid "// use this to handle a click on a `Clear` button\n"
msgstr ""

#: src/reactivity/working_with_signals.md:132
msgid "If you really must..."
msgstr ""

#: src/reactivity/working_with_signals.md:134
msgid ""
"**4) Create an effect to write to B whenever A changes.** This is officially "
"discouraged, for several reasons: a) It will always be less efficient, as it "
"means every time A updates you do two full trips through the reactive "
"process. (You set A, which causes the effect to run, as well as any other "
"effects that depend on A. Then you set B, which causes any effects that "
"depend on B to run.) b) It increases your chances of accidentally creating "
"things like infinite loops or over-re-running effects. This is the kind of "
"ping-ponging, reactive spaghetti code that was common in the early 2010s and "
"that we try to avoid with things like read-write segregation and "
"discouraging writing to signals from effects."
msgstr ""

#: src/reactivity/working_with_signals.md:138
msgid ""
"In most situations, it’s best to rewrite things such that there’s a clear, "
"top-down data flow based on derived signals or memos. But this isn’t the end "
"of the world."
msgstr ""

#: src/reactivity/working_with_signals.md:140
msgid ""
"I’m intentionally not providing an example here. Read the [`create_effect`]"
"(https://docs.rs/leptos/latest/leptos/fn.create_effect.html) docs to figure "
"out how this would work."
msgstr ""

#: src/reactivity/14_create_effect.md:3
msgid ""
"We’ve made it this far without having mentioned half of the reactive system: "
"effects."
msgstr ""

#: src/reactivity/14_create_effect.md:5
msgid ""
"Reactivity works in two halves: updating individual reactive values "
"(“signals”) notifies the pieces of code that depend on them (“effects”) that "
"they need to run again. These two halves of the reactive system are inter-"
"dependent. Without effects, signals can change within the reactive system "
"but never be observed in a way that interacts with the outside world. "
"Without signals, effects run once but never again, as there’s no observable "
"value to subscribe to. Effects are quite literally “side effects” of the "
"reactive system: they exist to synchronize the reactive system with the non-"
"reactive world outside it."
msgstr ""

#: src/reactivity/14_create_effect.md:7
msgid ""
"Hidden behind the whole reactive DOM renderer that we’ve seen so far is a "
"function called `create_effect`."
msgstr ""

#: src/reactivity/14_create_effect.md:9
msgid ""
"[`create_effect`](https://docs.rs/leptos_reactive/latest/leptos_reactive/fn."
"create_effect.html) takes a function as its argument. It immediately runs "
"the function. If you access any reactive signal inside that function, it "
"registers the fact that the effect depends on that signal with the reactive "
"runtime. Whenever one of the signals that the effect depends on changes, the "
"effect runs again."
msgstr ""

#: src/reactivity/14_create_effect.md:16
msgid "// immediately prints \"Value: 0\" and subscribes to `a`\n"
msgstr ""

#: src/reactivity/14_create_effect.md:17
msgid "\"Value: {}\""
msgstr ""

#: src/reactivity/14_create_effect.md:21
msgid ""
"The effect function is called with an argument containing whatever value it "
"returned the last time it ran. On the initial run, this is `None`."
msgstr ""

#: src/reactivity/14_create_effect.md:23
msgid ""
"By default, effects **do not run on the server**. This means you can call "
"browser-specific APIs within the effect function without causing issues. If "
"you need an effect to run on the server, use [`create_isomorphic_effect`]"
"(https://docs.rs/leptos_reactive/latest/leptos_reactive/fn."
"create_isomorphic_effect.html)."
msgstr ""

#: src/reactivity/14_create_effect.md:25
msgid "Autotracking and Dynamic Dependencies"
msgstr ""

#: src/reactivity/14_create_effect.md:27
msgid ""
"If you’re familiar with a framework like React, you might notice one key "
"difference. React and similar frameworks typically require you to pass a "
"“dependency array,” an explicit set of variables that determine when the "
"effect should rerun."
msgstr ""

#: src/reactivity/14_create_effect.md:29
msgid ""
"Because Leptos comes from the tradition of synchronous reactive programming, "
"we don’t need this explicit dependency list. Instead, we automatically track "
"dependencies depending on which signals are accessed within the effect."
msgstr ""

#: src/reactivity/14_create_effect.md:31
msgid "This has two effects (no pun intended). Dependencies are:"
msgstr ""

#: src/reactivity/14_create_effect.md:33
msgid ""
"**Automatic**: You don’t need to maintain a dependency list, or worry about "
"what should or shouldn’t be included. The framework simply tracks which "
"signals might cause the effect to rerun, and handles it for you."
msgstr ""

#: src/reactivity/14_create_effect.md:34
msgid ""
"**Dynamic**: The dependency list is cleared and updated every time the "
"effect runs. If your effect contains a conditional (for example), only "
"signals that are used in the current branch are tracked. This means that "
"effects rerun the absolute minimum number of times."
msgstr ""

#: src/reactivity/14_create_effect.md:36
msgid ""
"If this sounds like magic, and if you want a deep dive into how automatic "
"dependency tracking works, [check out this video](https://www.youtube.com/"
"watch?v=GWB3vTWeLd4). (Apologies for the low volume!)"
msgstr ""

#: src/reactivity/14_create_effect.md:38
msgid "Effects as Zero-Cost-ish Abstraction"
msgstr ""

#: src/reactivity/14_create_effect.md:40
msgid ""
"While they’re not a “zero-cost abstraction” in the most technical sense—they "
"require some additional memory use, exist at runtime, etc.—at a higher "
"level, from the perspective of whatever expensive API calls or other work "
"you’re doing within them, effects are a zero-cost abstraction. They rerun "
"the absolute minimum number of times necessary, given how you’ve described "
"them."
msgstr ""

#: src/reactivity/14_create_effect.md:42
msgid ""
"Imagine that I’m creating some kind of chat software, and I want people to "
"be able to display their full name, or just their first name, and to notify "
"the server whenever their name changes:"
msgstr ""

#: src/reactivity/14_create_effect.md:48
msgid ""
"// this will add the name to the log\n"
"// any time one of the source signals changes\n"
msgstr ""

#: src/reactivity/14_create_effect.md:54 src/reactivity/14_create_effect.md:250
msgid "\"{} {}\""
msgstr ""

#: src/reactivity/14_create_effect.md:62
msgid ""
"If `use_last` is `true`, effect should rerun whenever `first`, `last`, or "
"`use_last` changes. But if I toggle `use_last` to `false`, a change in "
"`last` will never cause the full name to change. In fact, `last` will be "
"removed from the dependency list until `use_last` toggles again. This saves "
"us from sending multiple unnecessary requests to the API if I change `last` "
"multiple times while `use_last` is still `false`."
msgstr ""

#: src/reactivity/14_create_effect.md:64
msgid "To `create_effect`, or not to `create_effect`?"
msgstr ""

#: src/reactivity/14_create_effect.md:66
msgid ""
"Effects are intended to synchronize the reactive system with the non-"
"reactive world outside, not to synchronize between different reactive "
"values. In other words: using an effect to read a value from one signal and "
"set it in another is always sub-optimal."
msgstr ""

#: src/reactivity/14_create_effect.md:68
msgid ""
"If you need to define a signal that depends on the value of other signals, "
"use a derived signal or [`create_memo`](https://docs.rs/leptos_reactive/"
"latest/leptos_reactive/fn.create_memo.html). Writing to a signal inside an "
"effect isn’t the end of the world, and it won’t cause your computer to light "
"on fire, but a derived signal or memo is always better—not only because the "
"dataflow is clear, but because the performance is better."
msgstr ""

#: src/reactivity/14_create_effect.md:72
msgid "// ⚠️ not great\n"
msgstr ""

#: src/reactivity/14_create_effect.md:78
msgid "// ✅ woo-hoo!\n"
msgstr ""

#: src/reactivity/14_create_effect.md:83
msgid ""
"If you need to synchronize some reactive value with the non-reactive world "
"outside—like a web API, the console, the filesystem, or the DOM—writing to a "
"signal in an effect is a fine way to do that. In many cases, though, you’ll "
"find that you’re really writing to a signal inside an event listener or "
"something else, not inside an effect. In these cases, you should check out "
"[`leptos-use`](https://leptos-use.rs/) to see if it already provides a "
"reactive wrapping primitive to do that!"
msgstr ""

#: src/reactivity/14_create_effect.md:85
msgid ""
"If you’re curious for more information about when you should and shouldn’t "
"use `create_effect`, [check out this video](https://www.youtube.com/watch?"
"v=aQOFJQ2JkvQ) for a more in-depth consideration!"
msgstr ""

#: src/reactivity/14_create_effect.md:87
msgid "Effects and Rendering"
msgstr ""

#: src/reactivity/14_create_effect.md:89
msgid ""
"We’ve managed to get this far without mentioning effects because they’re "
"built into the Leptos DOM renderer. We’ve seen that you can create a signal "
"and pass it into the `view` macro, and it will update the relevant DOM node "
"whenever the signal changes:"
msgstr ""

#: src/reactivity/14_create_effect.md:99
msgid ""
"This works because the framework essentially creates an effect wrapping this "
"update. You can imagine Leptos translating this view into something like "
"this:"
msgstr ""

#: src/reactivity/14_create_effect.md:103
msgid "// create a DOM element\n"
msgstr ""

#: src/reactivity/14_create_effect.md:106
msgid "\"p\""
msgstr ""

#: src/reactivity/14_create_effect.md:107
msgid "// create an effect to reactively update the text\n"
msgstr ""

#: src/reactivity/14_create_effect.md:110
msgid "// first, access the signal’s value and convert it to a string\n"
msgstr ""

#: src/reactivity/14_create_effect.md:113
msgid "// if this is different from the previous value, update the node\n"
msgstr ""

#: src/reactivity/14_create_effect.md:118
msgid "// return this value so we can memoize the next update\n"
msgstr ""

#: src/reactivity/14_create_effect.md:123
msgid ""
"Every time `count` is updated, this effect wil rerun. This is what allows "
"reactive, fine-grained updates to the DOM."
msgstr ""

#: src/reactivity/14_create_effect.md:125
msgid "Explicit, Cancelable Tracking with `watch`"
msgstr ""

#: src/reactivity/14_create_effect.md:127
msgid ""
"In addition to `create_effect`, Leptos provides a [`watch`](https://docs.rs/"
"leptos_reactive/latest/leptos_reactive/fn.watch.html) function, which can be "
"used for two main purposes:"
msgstr ""

#: src/reactivity/14_create_effect.md:129
msgid ""
"Separating tracking and responding to changes by explicitly passing in a set "
"of values to track."
msgstr ""

#: src/reactivity/14_create_effect.md:130
msgid "Canceling tracking by calling a stop function."
msgstr ""

#: src/reactivity/14_create_effect.md:132
msgid ""
"Like `create_resource`, `watch` takes a first argument, which is reactively "
"tracked, and a second, which is not. Whenever a reactive value in its `deps` "
"argument is changed, the `callback` is run. `watch` returns a function that "
"can be called to stop tracking the dependencies."
msgstr ""

#: src/reactivity/14_create_effect.md:140
msgid "\"Number: {}; Prev: {:?}\""
msgstr ""

#: src/reactivity/14_create_effect.md:145
msgid "// > \"Number: 1; Prev: Some(0)\"\n"
msgstr ""

#: src/reactivity/14_create_effect.md:147
msgid "// stop watching\n"
msgstr ""

#: src/reactivity/14_create_effect.md:149
msgid "// (nothing happens)\n"
msgstr ""

#: src/reactivity/14_create_effect.md:152
msgid ""
"[Click to open CodeSandbox.](https://codesandbox.io/p/sandbox/14-effect-0-5-"
"d6hkch?file=%2Fsrc%2Fmain.rs%3A1%2C1)"
msgstr ""

#: src/reactivity/14_create_effect.md:168
msgid ""
"// Just making a visible log here\n"
"    // You can ignore this...\n"
msgstr ""

#: src/reactivity/14_create_effect.md:171
msgid "\"\\n\""
msgstr ""

#: src/reactivity/14_create_effect.md:173
msgid ""
"// the newtype pattern isn't *necessary* here but is a good practice\n"
"    // it avoids confusion with other possible future "
"`RwSignal<Vec<String>>` contexts\n"
"    // and makes it easier to refer to it\n"
msgstr ""

#: src/reactivity/14_create_effect.md:190
msgid ""
"// this will add the name to the log\n"
"    // any time one of the source signals changes\n"
msgstr ""

#: src/reactivity/14_create_effect.md:194
msgid "\"{first} {last}\""
msgstr ""

#: src/reactivity/14_create_effect.md:202
msgid "\"create_effect\""
msgstr ""

#: src/reactivity/14_create_effect.md:203
msgid "\" Version\""
msgstr ""

#: src/reactivity/14_create_effect.md:207
#: src/reactivity/14_create_effect.md:264
msgid "\"First Name\""
msgstr ""

#: src/reactivity/14_create_effect.md:210
#: src/reactivity/14_create_effect.md:264
msgid "\"first\""
msgstr ""

#: src/reactivity/14_create_effect.md:216
#: src/reactivity/14_create_effect.md:265
msgid "\"Last Name\""
msgstr ""

#: src/reactivity/14_create_effect.md:219
#: src/reactivity/14_create_effect.md:265
msgid "\"last\""
msgstr ""

#: src/reactivity/14_create_effect.md:225
#: src/reactivity/14_create_effect.md:267
msgid "\"Show Last Name\""
msgstr ""

#: src/reactivity/14_create_effect.md:227
#: src/reactivity/14_create_effect.md:267
msgid "\"checkbox\""
msgstr ""

#: src/reactivity/14_create_effect.md:228
#: src/reactivity/14_create_effect.md:267
msgid "\"use_last\""
msgstr ""

#: src/reactivity/14_create_effect.md:245
msgid "\"      listener\""
msgstr ""

#: src/reactivity/14_create_effect.md:262
msgid "\"Manual Version\""
msgstr ""

#: src/reactivity/14_create_effect.md:276
msgid ""
"// Don't do this.\n"
"    /*let (my_optional_value, set_optional_my_value) = create_signal(Option::"
"<String>::None);\n"
"\n"
"    create_effect(move |_| {\n"
"        if !my_value.get().is_empty() {\n"
"            set_optional_my_value(Some(my_value.get()));\n"
"        } else {\n"
"            set_optional_my_value(None);\n"
"        }\n"
"    });*/"
msgstr ""

#: src/reactivity/14_create_effect.md:287
msgid "// Do this\n"
msgstr ""

#: src/reactivity/14_create_effect.md:295
msgid "\"my_optional_value\""
msgstr ""

#: src/reactivity/14_create_effect.md:296 src/15_global_state.md:281
msgid "\" is \""
msgstr ""

#: src/reactivity/14_create_effect.md:298
msgid "\"None\""
msgstr ""

#: src/reactivity/14_create_effect.md:299
msgid "\"Some(\\\"\""
msgstr ""

#: src/reactivity/14_create_effect.md:301
msgid "\"\\\")\""
msgstr ""

#: src/reactivity/14_create_effect.md:310
msgid "/// The components Show wraps\n"
msgstr ""

#: src/reactivity/14_create_effect.md:312
msgid ""
"/// A closure that returns a bool that determines whether this thing runs\n"
msgstr ""

#: src/reactivity/14_create_effect.md:314
msgid ""
"/// A closure that returns what gets rendered if the when statement is "
"false\n"
msgstr ""

#: src/reactivity/interlude_functions.md:3
msgid ""
"One of our core contributors said to me recently: “I never used closures "
"this often until I started using Leptos.” And it’s true. Closures are at the "
"heart of any Leptos application. It sometimes looks a little silly:"
msgstr ""

#: src/reactivity/interlude_functions.md:8
msgid "// a signal holds a value, and can be updated\n"
msgstr ""

#: src/reactivity/interlude_functions.md:10
msgid "// a derived signal is a function that accesses other signals\n"
msgstr ""

#: src/reactivity/interlude_functions.md:15 src/appendix_reactive_graph.md:225
msgid "\"odd\""
msgstr ""

#: src/reactivity/interlude_functions.md:17 src/appendix_reactive_graph.md:225
msgid "\"even\""
msgstr ""

#: src/reactivity/interlude_functions.md:19
msgid ""
"// an effect automatically tracks the signals it depends on\n"
"// and reruns when they change\n"
msgstr ""

#: src/reactivity/interlude_functions.md:23
msgid "\"text = {}\""
msgstr ""

#: src/reactivity/interlude_functions.md:31
msgid "Closures, closures everywhere!"
msgstr ""

#: src/reactivity/interlude_functions.md:33
msgid "But why?"
msgstr ""

#: src/reactivity/interlude_functions.md:35
msgid "Functions and UI Frameworks"
msgstr ""

#: src/reactivity/interlude_functions.md:37
msgid ""
"Functions are at the heart of every UI framework. And this makes perfect "
"sense. Creating a user interface is basically divided into two phases:"
msgstr ""

#: src/reactivity/interlude_functions.md:39
msgid "initial rendering"
msgstr ""

#: src/reactivity/interlude_functions.md:40
msgid "updates"
msgstr ""

#: src/reactivity/interlude_functions.md:42
msgid ""
"In a web framework, the framework does some kind of initial rendering. Then "
"it hands control back over to the browser. When certain events fire (like a "
"mouse click) or asynchronous tasks finish (like an HTTP request finishing), "
"the browser wakes the framework back up to update something. The framework "
"runs some kind of code to update your user interface, and goes back asleep "
"until the browser wakes it up again."
msgstr ""

#: src/reactivity/interlude_functions.md:44
msgid ""
"The key phrase here is “runs some kind of code.” The natural way to “run "
"some kind of code” at an arbitrary point in time—in Rust or in any other "
"programming language—is to call a function. And in fact every UI framework "
"is based on rerunning some kind of function over and over:"
msgstr ""

#: src/reactivity/interlude_functions.md:46
msgid ""
"virtual DOM (VDOM) frameworks like React, Yew, or Dioxus rerun a component "
"or render function over and over, to generate a virtual DOM tree that can be "
"reconciled with the previous result to patch the DOM"
msgstr ""

#: src/reactivity/interlude_functions.md:47
msgid ""
"compiled frameworks like Angular and Svelte divide your component templates "
"into “create” and “update” functions, rerunning the update function when "
"they detect a change to the component’s state"
msgstr ""

#: src/reactivity/interlude_functions.md:48
msgid ""
"in fine-grained reactive frameworks like SolidJS, Sycamore, or Leptos, _you_ "
"define the functions that rerun"
msgstr ""

#: src/reactivity/interlude_functions.md:50
msgid "That’s what all our components are doing."
msgstr ""

#: src/reactivity/interlude_functions.md:52
msgid "Take our typical `<SimpleCounter/>` example in its simplest form:"
msgstr ""

#: src/reactivity/interlude_functions.md:69
msgid ""
"The `SimpleCounter` function itself runs once. The `value` signal is created "
"once. The framework hands off the `increment` function to the browser as an "
"event listener. When you click the button, the browser calls `increment`, "
"which updates `value` via `set_value`. And that updates the single text node "
"represented in our view by `{value}`."
msgstr ""

#: src/reactivity/interlude_functions.md:71
msgid ""
"Closures are key to reactivity. They provide the framework with the ability "
"to rerun the smallest possible unit of your application in response to a "
"change."
msgstr ""

#: src/reactivity/interlude_functions.md:73
msgid "So remember two things:"
msgstr ""

#: src/reactivity/interlude_functions.md:75
msgid ""
"Your component function is a setup function, not a render function: it only "
"runs once."
msgstr ""

#: src/reactivity/interlude_functions.md:76
msgid ""
"For values in your view template to be reactive, they must be functions: "
"either signals (which implement the `Fn` traits) or closures."
msgstr ""

#: src/testing.md:1
msgid "Testing Your Components"
msgstr ""

#: src/testing.md:3
msgid ""
"Testing user interfaces can be relatively tricky, but really important. This "
"article will discuss a couple principles and approaches for testing a Leptos "
"app."
msgstr ""

#: src/testing.md:6
msgid "1. Test business logic with ordinary Rust tests"
msgstr ""

#: src/testing.md:8
msgid ""
"In many cases, it makes sense to pull the logic out of your components and "
"test it separately. For some simple components, there’s no particular logic "
"to test, but for many it’s worth using a testable wrapping type and "
"implementing the logic in ordinary Rust `impl` blocks."
msgstr ""

#: src/testing.md:13
msgid ""
"For example, instead of embedding logic in a component directly like this:"
msgstr ""

#: src/testing.md:19
msgid "// ⚠️ this is hard to test because it's embedded in the component\n"
msgstr ""

#: src/testing.md:26
msgid ""
"You could pull that logic out into a separate data structure and test it:"
msgstr ""

#: src/testing.md:48
msgid "// ✅ this has a test associated with it\n"
msgstr ""

#: src/testing.md:53
msgid ""
"In general, the less of your logic is wrapped into your components "
"themselves, the more idiomatic your code will feel and the easier it will be "
"to test."
msgstr ""

#: src/testing.md:56
msgid "2. Test components with end-to-end (`e2e`) testing"
msgstr ""

#: src/testing.md:58
msgid ""
"Our [`examples`](https://github.com/leptos-rs/leptos/tree/main/examples) "
"directory has several examples with extensive end-to-end testing, using "
"different testing tools."
msgstr ""

#: src/testing.md:60
msgid ""
"The easiest way to see how to use these is to take a look at the test "
"examples themselves:"
msgstr ""

#: src/testing.md:62
msgid ""
"`wasm-bindgen-test` with [`counter`](https://github.com/leptos-rs/leptos/"
"blob/main/examples/counter/tests/web.rs)"
msgstr ""

#: src/testing.md:64
msgid ""
"This is a fairly simple manual testing setup that uses the [`wasm-pack test`]"
"(https://rustwasm.github.io/wasm-pack/book/commands/test.html) command."
msgstr ""

#: src/testing.md:66 src/testing.md:117 src/testing.md:144
msgid "Sample Test"
msgstr ""

#: src/testing.md:72
msgid "\"section\""
msgstr ""

#: src/testing.md:80
msgid "\"div\""
msgstr ""

#: src/testing.md:82
msgid "\"button\""
msgstr ""

#: src/testing.md:91
msgid "// here we spawn a mini reactive system to render the test case\n"
msgstr ""

#: src/testing.md:93
msgid "// it's as if we're creating it with a value of 0, right?\n"
msgstr ""

#: src/testing.md:96
msgid ""
"// we can remove the event listeners because they're not rendered to HTML\n"
msgstr ""

#: src/testing.md:105
msgid ""
"// the view returned an HtmlElement<Div>, which is a smart pointer for\n"
"        // a DOM element. So we can still just call .outer_html()\n"
msgstr ""

#: src/testing.md:113
msgid ""
"[`wasm-bindgen-test` with `counters_stable`](https://github.com/leptos-rs/"
"leptos/tree/main/examples/counters_stable/tests/web)"
msgstr ""

#: src/testing.md:115
msgid ""
"This more developed test suite uses a system of fixtures to refactor the "
"manual DOM manipulation of the `counter` tests and easily test a wide range "
"of cases."
msgstr ""

#: src/testing.md:126
msgid "// Given\n"
msgstr ""

#: src/testing.md:130
msgid "// When\n"
msgstr ""

#: src/testing.md:135
msgid "// Then\n"
msgstr ""

#: src/testing.md:140
msgid ""
"[Playwright with `counters_stable`](https://github.com/leptos-rs/leptos/tree/"
"main/examples/counters_stable/e2e)"
msgstr ""

#: src/testing.md:142
msgid ""
"These tests use the common JavaScript testing tool Playwright to run end-to-"
"end tests on the same example, using a library and testing approach familiar "
"to may who have done frontend development before."
msgstr ""

#: src/testing.md:147
msgid "\"@playwright/test\""
msgstr ""

#: src/testing.md:148
msgid "\"./fixtures/counters_page\""
msgstr ""

#: src/testing.md:150
msgid "\"Increment Count\""
msgstr ""

#: src/testing.md:151
msgid "\"should increase the total count\""
msgstr ""

#: src/testing.md:160
msgid "\"3\""
msgstr ""

#: src/testing.md:165
msgid ""
"[Gherkin/Cucumber Tests with `todo_app_sqlite`](https://github.com/leptos-rs/"
"leptos/blob/main/examples/todo_app_sqlite/e2e/README.md)"
msgstr ""

#: src/testing.md:167
msgid ""
"You can integrate any testing tool you’d like into this flow. This example "
"uses Cucumber, a testing framework based on natural language."
msgstr ""

#: src/testing.md:189
msgid "The definitions for these actions are defined in Rust code."
msgstr ""

#: src/testing.md:196
msgid "\"I see the app\""
msgstr ""

#: src/testing.md:197
msgid "\"I open the app\""
msgstr ""

#: src/testing.md:200 src/async/12_transition.md:61
#: src/router/17_nested_routing.md:73 src/router/17_nested_routing.md:99
#: src/router/17_nested_routing.md:112 src/router/17_nested_routing.md:116
#: src/router/17_nested_routing.md:170 src/router/17_nested_routing.md:183
#: src/router/17_nested_routing.md:245 src/router/17_nested_routing.md:257
#: src/router/17_nested_routing.md:307 src/router/18_params_and_queries.md:123
#: src/router/18_params_and_queries.md:135
#: src/router/18_params_and_queries.md:185 src/router/19_a.md:76
#: src/router/19_a.md:88 src/router/19_a.md:138 src/router/20_form.md:36
#: src/router/20_form.md:55 src/router/20_form.md:83 src/router/20_form.md:116
#: src/router/20_form.md:139 src/ssr/23_ssr_modes.md:87
#: src/ssr/23_ssr_modes.md:144 src/islands.md:406
msgid "\"\""
msgstr ""

#: src/testing.md:205 src/testing.md:206
msgid "\"^I add a todo as (.*)$\""
msgstr ""

#: src/testing.md:213 src/15_global_state.md:104 src/15_global_state.md:123
msgid "// etc.\n"
msgstr ""

#: src/testing.md:217
msgid "Learning More"
msgstr ""

#: src/testing.md:219
msgid ""
"Feel free to check out the CI setup in the Leptos repo to learn more about "
"how to use these tools in your own application. All of these testing methods "
"are run regularly against actual Leptos example apps."
msgstr ""

#: src/async/index.md:1
msgid "Working with `async`"
msgstr ""

#: src/async/index.md:3
msgid ""
"So far we’ve only been working with synchronous users interfaces: You "
"provide some input, the app immediately processes it and updates the "
"interface. This is great, but is a tiny subset of what web applications do. "
"In particular, most web apps have to deal with some kind of asynchronous "
"data loading, usually loading something from an API."
msgstr ""

#: src/async/index.md:7
msgid ""
"Asynchronous data is notoriously hard to integrate with the synchronous "
"parts of your code. Leptos provides a cross-platform [`spawn_local`](https://"
"docs.rs/leptos/latest/leptos/fn.spawn_local.html) function that makes it "
"easy to run a `Future`, but there’s much more to it than that."
msgstr ""

#: src/async/index.md:9
msgid ""
"In this chapter, we’ll see how Leptos helps smooth out that process for you."
msgstr ""

#: src/async/10_resources.md:3
msgid ""
"A [Resource](https://docs.rs/leptos/latest/leptos/struct.Resource.html) is a "
"reactive data structure that reflects the current state of an asynchronous "
"task, allowing you to integrate asynchronous `Future`s into the synchronous "
"reactive system. Rather than waiting for its data to load with `.await`, you "
"transform the `Future` into a signal that returns `Some(T)` if it has "
"resolved, and `None` if it’s still pending."
msgstr ""

#: src/async/10_resources.md:5
msgid ""
"You do this by using the [`create_resource`](https://docs.rs/leptos/latest/"
"leptos/fn.create_resource.html) function. This takes two arguments:"
msgstr ""

#: src/async/10_resources.md:7
msgid "a source signal, which will generate a new `Future` whenever it changes"
msgstr ""

#: src/async/10_resources.md:8
msgid ""
"a fetcher function, which takes the data from that signal and returns a "
"`Future`"
msgstr ""

#: src/async/10_resources.md:10
msgid "Here’s an example"
msgstr ""

#: src/async/10_resources.md:13
msgid "// our source signal: some synchronous, local state\n"
msgstr ""

#: src/async/10_resources.md:15
msgid "// our resource\n"
msgstr ""

#: src/async/10_resources.md:19
msgid "// every time `count` changes, this will run\n"
msgstr ""

#: src/async/10_resources.md:21
msgid "\"loading data from API\""
msgstr ""

#: src/async/10_resources.md:27
msgid ""
"To create a resource that simply runs once, you can pass a non-reactive, "
"empty source signal:"
msgstr ""

#: src/async/10_resources.md:33
msgid ""
"To access the value you can use `.get()` or `.with(|data| /* */)`. These "
"work just like `.get()` and `.with()` on a signal—`get` clones the value and "
"returns it, `with` applies a closure to it—but for any `Resource<_, T>`, "
"they always return `Option<T>`, not `T`: because it’s always possible that "
"your resource is still loading."
msgstr ""

#: src/async/10_resources.md:35
msgid "So, you can show the current state of a resource in your view:"
msgstr ""

#: src/async/10_resources.md:40 src/async/11_suspense.md:10
#: src/async/11_suspense.md:27 src/async/11_suspense.md:49
#: src/async/11_suspense.md:53
msgid "\"My Data\""
msgstr ""

#: src/async/10_resources.md:42 src/async/10_resources.md:99
#: src/async/10_resources.md:105 src/async/11_suspense.md:12
#: src/async/11_suspense.md:33 src/async/11_suspense.md:51
#: src/async/11_suspense.md:138 src/async/12_transition.md:59
#: src/async/12_transition.md:68 src/async/13_actions.md:88
#: src/async/13_actions.md:154
msgid "\"Loading...\""
msgstr ""

#: src/async/10_resources.md:48
msgid ""
"Resources also provide a `refetch()` method that allows you to manually "
"reload the data (for example, in response to a button click) and a "
"`loading()` method that returns a `ReadSignal<bool>` indicating whether the "
"resource is currently loading or not."
msgstr ""

#: src/async/10_resources.md:50
msgid ""
"[Click to open CodeSandbox.](https://codesandbox.io/p/sandbox/10-"
"resources-0-5-x6h5j6?file=%2Fsrc%2Fmain.rs%3A2%2C3)"
msgstr ""

#: src/async/10_resources.md:60
msgid ""
"// Here we define an async function\n"
"// This could be anything: a network request, database read, etc.\n"
"// Here, we just multiply a number by 10\n"
msgstr ""

#: src/async/10_resources.md:65 src/async/13_actions.md:112
msgid "// fake a one-second delay\n"
msgstr ""

#: src/async/10_resources.md:72
msgid "// this count is our synchronous, local state\n"
msgstr ""

#: src/async/10_resources.md:75
msgid "// create_resource takes two arguments after its scope\n"
msgstr ""

#: src/async/10_resources.md:77
msgid "// the first is the \"source signal\"\n"
msgstr ""

#: src/async/10_resources.md:79
msgid ""
"// the second is the loader\n"
"        // it takes the source signal's value as its argument\n"
"        // and does some async work\n"
msgstr ""

#: src/async/10_resources.md:84
msgid "// whenever the source signal changes, the loader reloads\n"
msgstr ""

#: src/async/10_resources.md:86
msgid ""
"// you can also create resources that only load once\n"
"    // just return the unit type () from the source signal\n"
"    // that doesn't depend on anything: we just load it once\n"
msgstr ""

#: src/async/10_resources.md:91
msgid ""
"// we can access the resource values with .get()\n"
"    // this will reactively return None before the Future has resolved\n"
"    // and update to Some(T) when it has resolved\n"
msgstr ""

#: src/async/10_resources.md:97
msgid "\"Server returned {value:?}\""
msgstr ""

#: src/async/10_resources.md:98
msgid "// This loading state will only show before the first load\n"
msgstr ""

#: src/async/10_resources.md:102
msgid ""
"// the resource's loading() method gives us a\n"
"    // signal to indicate whether it's currently loading\n"
msgstr ""

#: src/async/10_resources.md:105
msgid "\"Idle.\""
msgstr ""

#: src/async/10_resources.md:116
msgid "\"stable\""
msgstr ""

#: src/async/10_resources.md:116 src/async/10_resources.md:119
#: src/async/10_resources.md:122
msgid "\": \""
msgstr ""

#: src/async/10_resources.md:119
msgid "\"count\""
msgstr ""

#: src/async/10_resources.md:122
msgid "\"async_value\""
msgstr ""

#: src/async/11_suspense.md:1
msgid "`<Suspense/>`"
msgstr ""

#: src/async/11_suspense.md:3
msgid ""
"In the previous chapter, we showed how you can create a simple loading "
"screen to show some fallback while a resource is loading."
msgstr ""

#: src/async/11_suspense.md:18
msgid "But what if we have two resources, and want to wait for both of them?"
msgstr ""

#: src/async/11_suspense.md:38
msgid ""
"That’s not _so_ bad, but it’s kind of annoying. What if we could invert the "
"flow of control?"
msgstr ""

#: src/async/11_suspense.md:40
msgid ""
"The [`<Suspense/>`](https://docs.rs/leptos/latest/leptos/fn.Suspense.html) "
"component lets us do exactly that. You give it a `fallback` prop and "
"children, one or more of which usually involves reading from a resource. "
"Reading from a resource “under” a `<Suspense/>` (i.e., in one of its "
"children) registers that resource with the `<Suspense/>`. If it’s still "
"waiting for resources to load, it shows the `fallback`. When they’ve all "
"loaded, it shows the children."
msgstr ""

#: src/async/11_suspense.md:68
msgid ""
"Every time one of the resources is reloading, the `\"Loading...\"` fallback "
"will show again."
msgstr ""

#: src/async/11_suspense.md:70
msgid ""
"This inversion of the flow of control makes it easier to add or remove "
"individual resources, as you don’t need to handle the matching yourself. It "
"also unlocks some massive performance improvements during server-side "
"rendering, which we’ll talk about during a later chapter."
msgstr ""

#: src/async/11_suspense.md:72
msgid "`<Await/>`"
msgstr ""

#: src/async/11_suspense.md:74
msgid ""
"If you’re simply trying to wait for some `Future` to resolve before "
"rendering, you may find the `<Await/>` component helpful in reducing "
"boilerplate. `<Await/>` essentially combines a resource with the source "
"argument `|| ()` with a `<Suspense/>` with no fallback."
msgstr ""

#: src/async/11_suspense.md:76
msgid "In other words:"
msgstr ""

#: src/async/11_suspense.md:78
msgid ""
"It only polls the `Future` once, and does not respond to any reactive "
"changes."
msgstr ""

#: src/async/11_suspense.md:79
msgid "It does not render anything until the `Future` resolves."
msgstr ""

#: src/async/11_suspense.md:80
msgid ""
"After the `Future` resolves, it binds its data to whatever variable name you "
"choose and then renders its children with that variable in scope."
msgstr ""

#: src/async/11_suspense.md:84
msgid "// maybe this didn't need to be async\n"
msgstr ""

#: src/async/11_suspense.md:89
msgid "// `future` provides the `Future` to be resolved\n"
msgstr ""

#: src/async/11_suspense.md:91
msgid "// the data is bound to whatever variable name you provide\n"
msgstr ""

#: src/async/11_suspense.md:94
msgid "// you receive the data by reference and can use it in your view here\n"
msgstr ""

#: src/async/11_suspense.md:95
msgid "\" little monkeys, jumping on the bed.\""
msgstr ""

#: src/async/11_suspense.md:100
msgid ""
"[Click to open CodeSandbox.](https://codesandbox.io/p/sandbox/11-"
"suspense-0-5-qzpgqs?file=%2Fsrc%2Fmain.rs%3A1%2C1)"
msgstr ""

#: src/async/11_suspense.md:118
msgid "\"Bill\""
msgstr ""

#: src/async/11_suspense.md:120
msgid "// this will reload every time `name` changes\n"
msgstr ""

#: src/async/11_suspense.md:134
msgid "\"name:\""
msgstr ""

#: src/async/11_suspense.md:136
msgid ""
"// the fallback will show whenever a resource\n"
"            // read \"under\" the suspense is loading\n"
msgstr ""

#: src/async/11_suspense.md:140
msgid ""
"// the children will be rendered once initially,\n"
"            // and then whenever any resources has been resolved\n"
msgstr ""

#: src/async/11_suspense.md:143
msgid "\"Your shouting name is \""
msgstr ""

#: src/async/12_transition.md:1
msgid "`<Transition/>`"
msgstr ""

#: src/async/12_transition.md:3
msgid ""
"You’ll notice in the `<Suspense/>` example that if you keep reloading the "
"data, it keeps flickering back to `\"Loading...\"`. Sometimes this is fine. "
"For other times, there’s [`<Transition/>`](https://docs.rs/leptos/latest/"
"leptos/fn.Transition.html)."
msgstr ""

#: src/async/12_transition.md:5
msgid ""
"`<Transition/>` behaves exactly the same as `<Suspense/>`, but instead of "
"falling back every time, it only shows the fallback the first time. On all "
"subsequent loads, it continues showing the old data until the new data are "
"ready. This can be really handy to prevent the flickering effect, and to "
"allow users to continue interacting with your application."
msgstr ""

#: src/async/12_transition.md:7
msgid ""
"This example shows how you can create a simple tabbed contact list with "
"`<Transition/>`. When you select a new tab, it continues showing the current "
"contact until the new data loads. This can be a much better user experience "
"than constantly falling back to a loading message."
msgstr ""

#: src/async/12_transition.md:9
msgid ""
"[Click to open CodeSandbox.](https://codesandbox.io/p/sandbox/12-"
"transition-0-5-2jg5lz?file=%2Fsrc%2Fmain.rs%3A1%2C1)"
msgstr ""

#: src/async/12_transition.md:25
msgid "\"Carol\""
msgstr ""

#: src/async/12_transition.md:26
msgid "\"User not found\""
msgstr ""

#: src/async/12_transition.md:35
msgid "// this will reload every time `tab` changes\n"
msgstr ""

#: src/async/12_transition.md:39
msgid "\"buttons\""
msgstr ""

#: src/async/12_transition.md:44
msgid "\"Tab A\""
msgstr ""

#: src/async/12_transition.md:50
msgid "\"Tab B\""
msgstr ""

#: src/async/12_transition.md:56
msgid "\"Tab C\""
msgstr ""

#: src/async/12_transition.md:65
msgid ""
"// the fallback will show initially\n"
"            // on subsequent reloads, the current child will\n"
"            // continue showing\n"
msgstr ""

#: src/async/13_actions.md:1
msgid "Mutating Data with Actions"
msgstr ""

#: src/async/13_actions.md:3
msgid ""
"We’ve talked about how to load `async` data with resources. Resources "
"immediately load data and work closely with `<Suspense/>` and `<Transition/"
">` components to show whether data is loading in your app. But what if you "
"just want to call some arbitrary `async` function and keep track of what "
"it’s doing?"
msgstr ""

#: src/async/13_actions.md:5
msgid ""
"Well, you could always use [`spawn_local`](https://docs.rs/leptos/latest/"
"leptos/fn.spawn_local.html). This allows you to just spawn an `async` task "
"in a synchronous environment by handing the `Future` off to the browser (or, "
"on the server, Tokio or whatever other runtime you’re using). But how do you "
"know if it’s still pending? Well, you could just set a signal to show "
"whether it’s loading, and another one to show the result..."
msgstr ""

#: src/async/13_actions.md:7
msgid ""
"All of this is true. Or you could use the final `async` primitive: "
"[`create_action`](https://docs.rs/leptos/latest/leptos/fn.create_action."
"html)."
msgstr ""

#: src/async/13_actions.md:9
msgid ""
"Actions and resources seem similar, but they represent fundamentally "
"different things. If you’re trying to load data by running an `async` "
"function, either once or when some other value changes, you probably want to "
"use `create_resource`. If you’re trying to occasionally run an `async` "
"function in response to something like a user clicking a button, you "
"probably want to use `create_action`."
msgstr ""

#: src/async/13_actions.md:11
msgid "Say we have some `async` function we want to run."
msgstr ""

#: src/async/13_actions.md:15
msgid "/* do some stuff on the server to add a new todo */"
msgstr ""

#: src/async/13_actions.md:19
msgid ""
"`create_action` takes an `async` function that takes a reference to a single "
"argument, which you could think of as its “input type.”"
msgstr ""

#: src/async/13_actions.md:21
msgid ""
"The input is always a single type. If you want to pass in multiple "
"arguments, you can do it with a struct or tuple."
msgstr ""

#: src/async/13_actions.md:24
msgid "// if there's a single argument, just use that\n"
msgstr ""

#: src/async/13_actions.md:30
msgid "// if there are no arguments, use the unit type `()`\n"
msgstr ""

#: src/async/13_actions.md:33
msgid "// if there are multiple arguments, use a tuple\n"
msgstr ""

#: src/async/13_actions.md:39
msgid ""
"Because the action function takes a reference but the `Future` needs to have "
"a `'static` lifetime, you’ll usually need to clone the value to pass it into "
"the `Future`. This is admittedly awkward but it unlocks some powerful "
"features like optimistic UI. We’ll see a little more about that in future "
"chapters."
msgstr ""

#: src/async/13_actions.md:41
msgid "So in this case, all we need to do to create an action is"
msgstr ""

#: src/async/13_actions.md:50
msgid ""
"Rather than calling `add_todo_action` directly, we’ll call it with `."
"dispatch()`, as in"
msgstr ""

#: src/async/13_actions.md:53
msgid "\"Some value\""
msgstr ""

#: src/async/13_actions.md:56
msgid ""
"You can do this from an event listener, a timeout, or anywhere; because `."
"dispatch()` isn’t an `async` function, it can be called from a synchronous "
"context."
msgstr ""

#: src/async/13_actions.md:58
msgid ""
"Actions provide access to a few signals that synchronize between the "
"asynchronous action you’re calling and the synchronous reactive system:"
msgstr ""

#: src/async/13_actions.md:61
msgid "// RwSignal<Option<String>>\n"
msgstr ""

#: src/async/13_actions.md:62
msgid "// ReadSignal<bool>\n"
msgstr ""

#: src/async/13_actions.md:63
msgid "// RwSignal<Option<Uuid>>\n"
msgstr ""

#: src/async/13_actions.md:66
msgid ""
"This makes it easy to track the current state of your request, show a "
"loading indicator, or do “optimistic UI” based on the assumption that the "
"submission will succeed."
msgstr ""

#: src/async/13_actions.md:74 src/async/13_actions.md:141
msgid "// don't reload the page...\n"
msgstr ""

#: src/async/13_actions.md:75 src/async/13_actions.md:142
msgid "\"input to exist\""
msgstr ""

#: src/async/13_actions.md:80 src/async/13_actions.md:147
msgid "\"What do you need to do?\""
msgstr ""

#: src/async/13_actions.md:85 src/async/13_actions.md:152
#: src/server/25_server_functions.md:41
msgid "\"Add Todo\""
msgstr ""

#: src/async/13_actions.md:87
msgid "// use our loading state\n"
msgstr ""

#: src/async/13_actions.md:92
msgid ""
"Now, there’s a chance this all seems a little over-complicated, or maybe too "
"restricted. I wanted to include actions here, alongside resources, as the "
"missing piece of the puzzle. In a real Leptos app, you’ll actually most "
"often use actions alongside server functions, [`create_server_action`]"
"(https://docs.rs/leptos/latest/leptos/fn.create_server_action.html), and the "
"[`<ActionForm/>`](https://docs.rs/leptos_router/latest/leptos_router/fn."
"ActionForm.html) component to create really powerful progressively-enhanced "
"forms. So if this primitive seems useless to you... Don’t worry! Maybe it "
"will make sense later. (Or check out our [`todo_app_sqlite`](https://github."
"com/leptos-rs/leptos/blob/main/examples/todo_app_sqlite/src/todo.rs) example "
"now.)"
msgstr ""

#: src/async/13_actions.md:94
msgid ""
"[Click to open CodeSandbox.](https://codesandbox.io/p/sandbox/13-"
"actions-0-5-8xk35v?file=%2Fsrc%2Fmain.rs%3A1%2C1)"
msgstr ""

#: src/async/13_actions.md:105
msgid ""
"// Here we define an async function\n"
"// This could be anything: a network request, database read, etc.\n"
"// Think of it as a mutation: some imperative async action you run,\n"
"// whereas a resource would be some async data you load\n"
msgstr ""

#: src/async/13_actions.md:114
msgid "// pretend this is a post ID or something\n"
msgstr ""

#: src/async/13_actions.md:120
msgid ""
"// an action takes an async function with single argument\n"
"    // it can be a simple type, a struct, or ()\n"
msgstr ""

#: src/async/13_actions.md:123
msgid ""
"// the input is a reference, but we need the Future to own it\n"
"        // this is important: we need to clone and move into the Future\n"
"        // so it has a 'static lifetime\n"
msgstr ""

#: src/async/13_actions.md:130
msgid ""
"// actions provide a bunch of synchronous, reactive variables\n"
"    // that tell us different things about the state of the action\n"
msgstr ""

#: src/async/13_actions.md:156
msgid "\"Submitted: \""
msgstr ""

#: src/async/13_actions.md:157 src/async/13_actions.md:161
#: src/async/13_actions.md:165 src/15_global_state.md:319
msgid "\"{:#?}\""
msgstr ""

#: src/async/13_actions.md:160
msgid "\"Pending: \""
msgstr ""

#: src/async/13_actions.md:164
msgid "\"Todo ID: \""
msgstr ""

#: src/interlude_projecting_children.md:1
msgid "Projecting Children"
msgstr ""

#: src/interlude_projecting_children.md:3
msgid ""
"As you build components you may occasionally find yourself wanting to "
"“project” children through multiple layers of components."
msgstr ""

#: src/interlude_projecting_children.md:7
msgid "Consider the following:"
msgstr ""

#: src/interlude_projecting_children.md:20
msgid ""
"// check whether user is verified\n"
"\t\t\t\t// by reading from the resource\n"
msgstr ""

#: src/interlude_projecting_children.md:32
msgid ""
"This is pretty straightforward: when the user is logged in, we want to show "
"`children`. If the user is not logged in, we want to show `fallback`. And "
"while we’re waiting to find out, we just render `()`, i.e., nothing."
msgstr ""

#: src/interlude_projecting_children.md:34
msgid ""
"In other words, we want to pass the children of `<LoggedIn/>` _through_ the "
"`<Suspense/>` component to become the children of the `<Show/>`. This is "
"what I mean by “projection.”"
msgstr ""

#: src/interlude_projecting_children.md:36
msgid "This won’t compile."
msgstr ""

#: src/interlude_projecting_children.md:43
msgid ""
"The problem here is that both `<Suspense/>` and `<Show/>` need to be able to "
"construct their `children` multiple times. The first time you construct "
"`<Suspense/>`’s children, it would take ownership of `fallback` and "
"`children` to move them into the invocation of `<Show/>`, but then they're "
"not available for future `<Suspense/>` children construction."
msgstr ""

#: src/interlude_projecting_children.md:45
msgid "The Details"
msgstr ""

#: src/interlude_projecting_children.md:47
msgid "Feel free to skip ahead to the solution."
msgstr ""

#: src/interlude_projecting_children.md:49
msgid ""
"If you want to really understand the issue here, it may help to look at the "
"expanded `view` macro. Here’s a cleaned-up version:"
msgstr ""

#: src/interlude_projecting_children.md:56
msgid "// fallback and children are moved into this closure\n"
msgstr ""

#: src/interlude_projecting_children.md:59
msgid "// fallback and children captured here\n"
msgstr ""

#: src/interlude_projecting_children.md:65
msgid "// but fallback is moved into Show here\n"
msgstr ""

#: src/interlude_projecting_children.md:67
msgid "// and children is moved into Show here\n"
msgstr ""

#: src/interlude_projecting_children.md:81
msgid ""
"All components own their props; so the `<Show/>` in this case can’t be "
"called because it only has captured references to `fallback` and `children`."
msgstr ""

#: src/interlude_projecting_children.md:83 src/ssr/24_hydration_bugs.md:86
#: src/ssr/24_hydration_bugs.md:104
msgid "Solution"
msgstr ""

#: src/interlude_projecting_children.md:85
msgid ""
"However, both `<Suspense/>` and `<Show/>` take `ChildrenFn`, i.e., their "
"`children` should implement the `Fn` type so they can be called multiple "
"times with only an immutable reference. This means we don’t need to own "
"`children` or `fallback`; we just need to be able to pass `'static` "
"references to them."
msgstr ""

#: src/interlude_projecting_children.md:87
msgid ""
"We can solve this problem by using the [`store_value`](https://docs.rs/"
"leptos/latest/leptos/fn.store_value.html) primitive. This essentially stores "
"a value in the reactive system, handing ownership off to the framework in "
"exchange for a reference that is, like signals, `Copy` and `'static`, which "
"we can access or modify through certain methods."
msgstr ""

#: src/interlude_projecting_children.md:89
msgid "In this case, it’s really simple:"
msgstr ""

#: src/interlude_projecting_children.md:114
msgid ""
"At the top level, we store both `fallback` and `children` in the reactive "
"scope owned by `LoggedIn`. Now we can simply move those references down "
"through the other layers into the `<Show/>` component and call them there."
msgstr ""

#: src/interlude_projecting_children.md:116
msgid "A Final Note"
msgstr ""

#: src/interlude_projecting_children.md:118
msgid ""
"Note that this works because `<Show/>` and `<Suspense/>` only need an "
"immutable reference to their children (which `.with_value` can give it), not "
"ownership."
msgstr ""

#: src/interlude_projecting_children.md:120
msgid ""
"In other cases, you may need to project owned props through a function that "
"takes `ChildrenFn` and therefore needs to be called more than once. In this "
"case, you may find the `clone:` helper in the`view` macro helpful."
msgstr ""

#: src/interlude_projecting_children.md:122
msgid "Consider this example"
msgstr ""

#: src/interlude_projecting_children.md:155
msgid "Even with `name=name.clone()`, this gives the error"
msgstr ""

#: src/interlude_projecting_children.md:161
msgid ""
"It’s captured through multiple levels of children that need to run more than "
"once, and there’s no obvious way to clone it _into_ the children."
msgstr ""

#: src/interlude_projecting_children.md:163
msgid ""
"In this case, the `clone:` syntax comes in handy. Calling `clone:name` will "
"clone `name` _before_ moving it into `<Inner/>`’s children, which solves our "
"ownership issue."
msgstr ""

#: src/interlude_projecting_children.md:175
msgid ""
"These issues can be a little tricky to understand or debug, because of the "
"opacity of the `view` macro. But in general, they can always be solved."
msgstr ""

#: src/15_global_state.md:3
msgid ""
"So far, we've only been working with local state in components, and we’ve "
"seen how to coordinate state between parent and child components. On "
"occasion, there are times where people look for a more general solution for "
"global state management that can work throughout an application."
msgstr ""

#: src/15_global_state.md:5
msgid ""
"In general, **you do not need this chapter.** The typical pattern is to "
"compose your application out of components, each of which manages its own "
"local state, not to store all state in a global structure. However, there "
"are some cases (like theming, saving user settings, or sharing data between "
"components in different parts of your UI) in which you may want to use some "
"kind of global state management."
msgstr ""

#: src/15_global_state.md:7
msgid "The three best approaches to global state are"
msgstr ""

#: src/15_global_state.md:9
msgid "Using the router to drive global state via the URL"
msgstr ""

#: src/15_global_state.md:10
msgid "Passing signals through context"
msgstr ""

#: src/15_global_state.md:11
msgid ""
"Creating a global state struct and creating lenses into it with "
"`create_slice`"
msgstr ""

#: src/15_global_state.md:13
msgid "Option #1: URL as Global State"
msgstr ""

#: src/15_global_state.md:15
msgid ""
"In many ways, the URL is actually the best way to store global state. It can "
"be accessed from any component, anywhere in your tree. There are native HTML "
"elements like `<form>` and `<a>` that exist solely to update the URL. And it "
"persists across page reloads and between devices; you can share a URL with a "
"friend or send it from your phone to your laptop and any state stored in it "
"will be replicated."
msgstr ""

#: src/15_global_state.md:17
msgid ""
"The next few sections of the tutorial will be about the router, and we’ll "
"get much more into these topics."
msgstr ""

#: src/15_global_state.md:19
msgid "But for now, we'll just look at options #2 and #3."
msgstr ""

#: src/15_global_state.md:21
msgid "Option #2: Passing Signals through Context"
msgstr ""

#: src/15_global_state.md:23
msgid ""
"In the section on [parent-child communication](view/08_parent_child.md), we "
"saw that you can use `provide_context` to pass signal from a parent "
"component to a child, and `use_context` to read it in the child. But "
"`provide_context` works across any distance. If you want to create a global "
"signal that holds some piece of state, you can provide it and access it via "
"context anywhere in the descendants of the component where you provide it."
msgstr ""

#: src/15_global_state.md:25
msgid ""
"A signal provided via context only causes reactive updates where it is read, "
"not in any of the components in between, so it maintains the power of fine-"
"grained reactive updates, even at a distance."
msgstr ""

#: src/15_global_state.md:27
msgid ""
"We start by creating a signal in the root of the app and providing it to all "
"its children and descendants using `provide_context`."
msgstr ""

#: src/15_global_state.md:33 src/15_global_state.md:218
msgid ""
"// here we create a signal in the root that can be consumed\n"
"    // anywhere in the app.\n"
msgstr ""

#: src/15_global_state.md:36 src/15_global_state.md:221
msgid ""
"// we'll pass the setter to specific components,\n"
"    // but provide the count itself to the whole app via context\n"
msgstr ""

#: src/15_global_state.md:41 src/15_global_state.md:227
msgid "// SetterButton is allowed to modify the count\n"
msgstr ""

#: src/15_global_state.md:43 src/15_global_state.md:229
msgid ""
"// These consumers can only read from it\n"
"        // But we could give them write access by passing `set_count` if we "
"wanted\n"
msgstr ""

#: src/15_global_state.md:51
msgid ""
"`<SetterButton/>` is the kind of counter we’ve written several times now. "
"(See the sandbox below if you don’t understand what I mean.)"
msgstr ""

#: src/15_global_state.md:54
msgid ""
"`<FancyMath/>` and `<ListItems/>` both consume the signal we’re providing "
"via `use_context` and do something with it."
msgstr ""

#: src/15_global_state.md:58 src/15_global_state.md:249
msgid "/// A component that does some \"fancy\" math with the global count\n"
msgstr ""

#: src/15_global_state.md:61 src/15_global_state.md:253
msgid "// here we consume the global count signal with `use_context`\n"
msgstr ""

#: src/15_global_state.md:63 src/15_global_state.md:255
msgid "// we know we just provided this in the parent component\n"
msgstr ""

#: src/15_global_state.md:64 src/15_global_state.md:256
#: src/15_global_state.md:277
msgid "\"there to be a `count` signal provided\""
msgstr ""

#: src/15_global_state.md:68 src/15_global_state.md:161
#: src/15_global_state.md:260 src/15_global_state.md:347
msgid "\"consumer blue\""
msgstr ""

#: src/15_global_state.md:69 src/15_global_state.md:261
msgid "\"The number \""
msgstr ""

#: src/15_global_state.md:72 src/15_global_state.md:264
msgid "\" is\""
msgstr ""

#: src/15_global_state.md:74 src/15_global_state.md:266
msgid "\" is not\""
msgstr ""

#: src/15_global_state.md:76 src/15_global_state.md:268
msgid "\" even.\""
msgstr ""

#: src/15_global_state.md:82
msgid ""
"Note that this same pattern can be applied to more complex state. If you "
"have multiple fields you want to update independently, you can do that by "
"providing some struct of signals:"
msgstr ""

#: src/15_global_state.md:108
msgid "Option #3: Create a Global State Struct and Slices"
msgstr ""

#: src/15_global_state.md:110
msgid ""
"You may find it cumbersome to wrap each field of a structure in a separate "
"signal like this. In some cases, it can be useful to create a plain struct "
"with non-reactive fields, and then wrap that in a signal."
msgstr ""

#: src/15_global_state.md:127
msgid ""
"But there’s a problem: because our whole state is wrapped in one signal, "
"updating the value of one field will cause reactive updates in parts of the "
"UI that only depend on the other."
msgstr ""

#: src/15_global_state.md:137
msgid ""
"In this example, clicking the button will cause the text inside `<p>` to be "
"updated, cloning `state.name` again! Because signals are the atomic unit of "
"reactivity, updating any field of the signal triggers updates to everything "
"that depends on the signal."
msgstr ""

#: src/15_global_state.md:139
msgid ""
"There’s a better way. You can take fine-grained, reactive slices by using "
"[`create_memo`](https://docs.rs/leptos/latest/leptos/fn.create_memo.html) or "
"[`create_slice`](https://docs.rs/leptos/latest/leptos/fn.create_slice.html) "
"(which uses `create_memo` but also provides a setter). “Memoizing” a value "
"means creating a new reactive value which will only update when it changes. "
"“Memoizing a slice” means creating a new reactive value which will only "
"update when some field of the state struct updates."
msgstr ""

#: src/15_global_state.md:141
msgid ""
"Here, instead of reading from the state signal directly, we create “slices” "
"of that state with fine-grained updates via `create_slice`. Each slice "
"signal only updates when the particular piece of the larger struct it "
"accesses updates. This means you can create a single root signal, and then "
"take independent, fine-grained slices of it in different components, each of "
"which can update without notifying the others of changes."
msgstr ""

#: src/15_global_state.md:144 src/15_global_state.md:329
#: src/15_global_state.md:360
msgid "/// A component that updates the count in the global state.\n"
msgstr ""

#: src/15_global_state.md:149 src/15_global_state.md:335
msgid "// `create_slice` lets us create a \"lens\" into the data\n"
msgstr ""

#: src/15_global_state.md:152 src/15_global_state.md:338
#: src/15_global_state.md:370
msgid "// we take a slice *from* `state`\n"
msgstr ""

#: src/15_global_state.md:154 src/15_global_state.md:340
#: src/15_global_state.md:372
msgid "// our getter returns a \"slice\" of the data\n"
msgstr ""

#: src/15_global_state.md:156 src/15_global_state.md:342
#: src/15_global_state.md:374
msgid "// our setter describes how to mutate that slice, given a new value\n"
msgstr ""

#: src/15_global_state.md:167 src/15_global_state.md:244
#: src/15_global_state.md:353
msgid "\"Increment Global Count\""
msgstr ""

#: src/15_global_state.md:170 src/15_global_state.md:356
msgid "\"Count is: \""
msgstr ""

#: src/15_global_state.md:176
msgid ""
"Clicking this button only updates `state.count`, so if we create another "
"slice somewhere else that only takes `state.name`, clicking the button won’t "
"cause that other slice to update. This allows you to combine the benefits of "
"a top-down data flow and of fine-grained reactive updates."
msgstr ""

#: src/15_global_state.md:181
msgid ""
"**Note**: There are some significant drawbacks to this approach. Both "
"signals and memos need to own their values, so a memo will need to clone the "
"field’s value on every change. The most natural way to manage state in a "
"framework like Leptos is always to provide signals that are as locally-"
"scoped and fine-grained as they can be, not to hoist everything up into "
"global state. But when you _do_ need some kind of global state, "
"`create_slice` can be a useful tool."
msgstr ""

#: src/15_global_state.md:183
msgid ""
"[Click to open CodeSandbox.](https://codesandbox.io/p/sandbox/15-global-"
"state-0-5-8c2ff6?file=%2Fsrc%2Fmain.rs%3A1%2C2)"
msgstr ""

#: src/15_global_state.md:192
msgid ""
"// So far, we've only been working with local state in components\n"
"// We've only seen how to communicate between parent and child components\n"
"// But there are also more general ways to manage global state\n"
"//\n"
"// The three best approaches to global state are\n"
"// 1. Using the router to drive global state via the URL\n"
"// 2. Passing signals through context\n"
"// 3. Creating a global state struct and creating lenses into it with "
"`create_slice`\n"
"//\n"
"// Option #1: URL as Global State\n"
"// The next few sections of the tutorial will be about the router.\n"
"// So for now, we'll just look at options #2 and #3.\n"
msgstr ""

#: src/15_global_state.md:205
msgid ""
"// Option #2: Pass Signals through Context\n"
"//\n"
"// In virtual DOM libraries like React, using the Context API to manage "
"global\n"
"// state is a bad idea: because the entire app exists in a tree, changing\n"
"// some value provided high up in the tree can cause the whole app to "
"render.\n"
"//\n"
"// In fine-grained reactive libraries like Leptos, this is simply not the "
"case.\n"
"// You can create a signal in the root of your app and pass it down to "
"other\n"
"// components using provide_context(). Changing it will only cause "
"rerendering\n"
"// in the specific places it is actually used, not the whole app.\n"
msgstr ""

#: src/15_global_state.md:226
msgid "\"Option 2: Passing Signals\""
msgstr ""

#: src/15_global_state.md:231 src/15_global_state.md:323
#: src/router/17_nested_routing.md:142
msgid "\"display: flex\""
msgstr ""

#: src/15_global_state.md:237
msgid "/// A button that increments our global counter.\n"
msgstr ""

#: src/15_global_state.md:242
msgid "\"provider red\""
msgstr ""

#: src/15_global_state.md:272
msgid ""
"/// A component that shows a list of items generated from the global count.\n"
msgstr ""

#: src/15_global_state.md:276
msgid "// again, consume the global count signal with `use_context`\n"
msgstr ""

#: src/15_global_state.md:281
msgid "\"2\""
msgstr ""

#: src/15_global_state.md:286 src/15_global_state.md:379
msgid "\"consumer green\""
msgstr ""

#: src/15_global_state.md:291
msgid ""
"// Option #3: Create a Global State Struct\n"
"//\n"
"// You can use this approach to build a single global data structure\n"
"// that holds the state for your whole app, and then access it by\n"
"// taking fine-grained slices using `create_slice` or `create_memo`,\n"
"// so that changing one part of the state doesn't cause parts of your\n"
"// app that depend on other parts of the state to change.\n"
msgstr ""

#: src/15_global_state.md:308
msgid ""
"// we'll provide a single signal that holds the whole state\n"
"    // each component will be responsible for creating its own \"lens\" into "
"it\n"
msgstr ""

#: src/15_global_state.md:314
msgid "\"Option 3: Passing Signals\""
msgstr ""

#: src/15_global_state.md:315
msgid "\"red consumer\""
msgstr ""

#: src/15_global_state.md:315
msgid "\"width: 100%\""
msgstr ""

#: src/15_global_state.md:316
msgid "\"Current Global State\""
msgstr ""

#: src/15_global_state.md:333 src/15_global_state.md:364
msgid "\"state to have been provided\""
msgstr ""

#: src/15_global_state.md:366
msgid ""
"// this slice is completely independent of the `count` slice\n"
"    // that we created in the other component\n"
"    // neither of them will cause the other to rerun\n"
msgstr ""

#: src/router/index.md:1
msgid "Routing"
msgstr ""

#: src/router/index.md:3
msgid "The Basics"
msgstr ""

#: src/router/index.md:5
msgid ""
"Routing drives most websites. A router is the answer to the question, “Given "
"this URL, what should appear on the page?”"
msgstr ""

#: src/router/index.md:7
msgid ""
"A URL consists of many parts. For example, the URL `https://my-cool-blog.com/"
"blog/search?q=Search#results` consists of"
msgstr ""

#: src/router/index.md:9
msgid "a _scheme_: `https`"
msgstr ""

#: src/router/index.md:10
msgid "a _domain_: `my-cool-blog.com`"
msgstr ""

#: src/router/index.md:11
msgid "a **path**: `/blog/search`"
msgstr ""

#: src/router/index.md:12
msgid "a **query** (or **search**): `?q=Search`"
msgstr ""

#: src/router/index.md:13
msgid "a _hash_: `#results`"
msgstr ""

#: src/router/index.md:15
msgid ""
"The Leptos Router works with the path and query (`/blog/search?q=Search`). "
"Given this piece of the URL, what should the app render on the page?"
msgstr ""

#: src/router/index.md:17
msgid "The Philosophy"
msgstr ""

#: src/router/index.md:19
msgid ""
"In most cases, the path should drive what is displayed on the page. From the "
"user’s perspective, for most applications, most major changes in the state "
"of the app should be reflected in the URL. If you copy and paste the URL and "
"open it in another tab, you should find yourself more or less in the same "
"place."
msgstr ""

#: src/router/index.md:21
msgid ""
"In this sense, the router is really at the heart of the global state "
"management for your application. More than anything else, it drives what is "
"displayed on the page."
msgstr ""

#: src/router/index.md:23
msgid ""
"The router handles most of this work for you by mapping the current location "
"to particular components."
msgstr ""

#: src/router/16_routes.md:1
msgid "Defining Routes"
msgstr ""

#: src/router/16_routes.md:5
msgid "It’s easy to get started with the router."
msgstr ""

#: src/router/16_routes.md:7
msgid ""
"First things first, make sure you’ve added the `leptos_router` package to "
"your dependencies. Like `leptos`, the router relies on activating a `csr`, "
"`hydrate`, or `ssr` feature. For example, if you’re adding the router to a "
"client-side rendered app, you’ll want to run "
msgstr ""

#: src/router/16_routes.md:12
msgid ""
"It’s important that the router is a separate package from `leptos` itself. "
"This means that everything in the router can be defined in user-land code. "
"If you want to create your own router, or use no router, you’re completely "
"free to do that!"
msgstr ""

#: src/router/16_routes.md:14
msgid ""
"And import the relevant types from the router, either with something like"
msgstr ""

#: src/router/16_routes.md:20
msgid "or simply"
msgstr ""

#: src/router/16_routes.md:26
msgid "Providing the `<Router/>`"
msgstr ""

#: src/router/16_routes.md:28
msgid ""
"Routing behavior is provided by the [`<Router/>`](https://docs.rs/"
"leptos_router/latest/leptos_router/fn.Router.html) component. This should "
"usually be somewhere near the root of your application, the rest of the app."
msgstr ""

#: src/router/16_routes.md:30
msgid ""
"You shouldn’t try to use multiple `<Router/>`s in your app. Remember that "
"the router drives global state: if you have multiple routers, which one "
"decides what to do when the URL changes?"
msgstr ""

#: src/router/16_routes.md:32
msgid "Let’s start with a simple `<App/>` component using the router:"
msgstr ""

#: src/router/16_routes.md:55
msgid ""
"The [`<Routes/>`](https://docs.rs/leptos_router/latest/leptos_router/fn."
"Routes.html) component is where you define all the routes to which a user "
"can navigate in your application. Each possible route is defined by a "
"[`<Route/>`](https://docs.rs/leptos_router/latest/leptos_router/fn.Route."
"html) component."
msgstr ""

#: src/router/16_routes.md:57
msgid ""
"You should place the `<Routes/>` component at the location within your app "
"where you want routes to be rendered. Everything outside `<Routes/>` will be "
"present on every page, so you can leave things like a navigation bar or menu "
"outside the `<Routes/>`."
msgstr ""

#: src/router/16_routes.md:71
msgid "// all our routes will appear inside <main>\n"
msgstr ""

#: src/router/16_routes.md:81
msgid ""
"Individual routes are defined by providing children to `<Routes/>` with the "
"`<Route/>` component. `<Route/>` takes a `path` and a `view`. When the "
"current location matches `path`, the `view` will be created and displayed."
msgstr ""

#: src/router/16_routes.md:83
msgid "The `path` can include"
msgstr ""

#: src/router/16_routes.md:85
msgid "a static path (`/users`),"
msgstr ""

#: src/router/16_routes.md:86
msgid "dynamic, named parameters beginning with a colon (`/:id`),"
msgstr ""

#: src/router/16_routes.md:87
msgid "and/or a wildcard beginning with an asterisk (`/user/*any`)"
msgstr ""

#: src/router/16_routes.md:89
msgid ""
"The `view` is a function that returns a view. Any component with no props "
"works here, as does a closure that returns some view."
msgstr ""

#: src/router/16_routes.md:93 src/router/16_routes.md:119
#: src/router/16_routes.md:132 src/router/16_routes.md:141
#: src/router/17_nested_routing.md:7 src/router/17_nested_routing.md:20
#: src/router/17_nested_routing.md:229 src/router/17_nested_routing.md:235
#: src/router/18_params_and_queries.md:107
#: src/router/18_params_and_queries.md:113 src/router/19_a.md:60
#: src/router/19_a.md:66 src/server/27_response.md:62
msgid "\"/\""
msgstr ""

#: src/router/16_routes.md:94 src/router/17_nested_routing.md:8
#: src/router/17_nested_routing.md:21 src/router/17_nested_routing.md:42
#: src/router/17_nested_routing.md:56 src/router/17_nested_routing.md:71
msgid "\"/users\""
msgstr ""

#: src/router/16_routes.md:95 src/router/17_nested_routing.md:9
#: src/router/17_nested_routing.md:43
msgid "\"/users/:id\""
msgstr ""

#: src/router/16_routes.md:96 src/router/17_nested_routing.md:10
#: src/router/17_nested_routing.md:24
msgid "\"/*any\""
msgstr ""

#: src/router/16_routes.md:96
msgid "\"Not Found\""
msgstr ""

#: src/router/16_routes.md:100
msgid ""
"`view` takes a `Fn() -> impl IntoView`. If a component has no props, it can "
"be passed directly into the `view`. In this case, `view=Home` is just a "
"shorthand for `|| view! { <Home/> }`."
msgstr ""

#: src/router/16_routes.md:102
msgid ""
"Now if you navigate to `/` or to `/users` you’ll get the home page or the "
"`<Users/>`. If you go to `/users/3` or `/blahblah` you’ll get a user profile "
"or your 404 page (`<NotFound/>`). On every navigation, the router determines "
"which `<Route/>` should be matched, and therefore what content should be "
"displayed where the `<Routes/>` component is defined."
msgstr ""

#: src/router/16_routes.md:104
msgid ""
"Note that you can define your routes in any order. The router scores each "
"route to see how good a match it is, rather than simply trying to match them "
"top to bottom."
msgstr ""

#: src/router/16_routes.md:106
msgid "Simple enough?"
msgstr ""

#: src/router/16_routes.md:108
msgid "Conditional Routes"
msgstr ""

#: src/router/16_routes.md:110
msgid ""
"`leptos_router` is based on the assumption that you have one and only one "
"`<Routes/>` component in your app. It uses this to generate routes on the "
"server side, optimize route matching by caching calculated branches, and "
"render your application."
msgstr ""

#: src/router/16_routes.md:112
msgid ""
"You should not conditionally render `<Routes/>` using another component like "
"`<Show/>` or `<Suspense/>`."
msgstr ""

#: src/router/16_routes.md:115
msgid "// ❌ don't do this!\n"
msgstr ""

#: src/router/16_routes.md:117 src/router/16_routes.md:135
msgid "\"Loading\""
msgstr ""

#: src/router/16_routes.md:125
msgid ""
"Instead, you can use nested routing to render your `<Routes/>` once, and "
"conditionally render the router outlet:"
msgstr ""

#: src/router/16_routes.md:128
msgid "// ✅ do this instead!\n"
msgstr ""

#: src/router/16_routes.md:131
msgid "// parent route\n"
msgstr ""

#: src/router/16_routes.md:134
msgid "// only show the outlet if data have loaded\n"
msgstr ""

#: src/router/16_routes.md:140
msgid "// nested child route\n"
msgstr ""

#: src/router/16_routes.md:147
msgid ""
"If this looks bizarre, don’t worry! The next section of the book is about "
"this kind of nested routing."
msgstr ""

#: src/router/17_nested_routing.md:3
msgid "We just defined the following set of routes:"
msgstr ""

#: src/router/17_nested_routing.md:14
msgid ""
"There’s a certain amount of duplication here: `/users` and `/users/:id`. "
"This is fine for a small app, but you can probably already tell it won’t "
"scale well. Wouldn’t it be nice if we could nest these routes?"
msgstr ""

#: src/router/17_nested_routing.md:16
msgid "Well... you can!"
msgstr ""

#: src/router/17_nested_routing.md:22 src/router/17_nested_routing.md:57
#: src/router/17_nested_routing.md:72 src/router/17_nested_routing.md:98
#: src/router/17_nested_routing.md:111 src/router/17_nested_routing.md:182
#: src/router/17_nested_routing.md:244 src/router/18_params_and_queries.md:122
#: src/router/19_a.md:75
msgid "\":id\""
msgstr ""

#: src/router/17_nested_routing.md:28
msgid "But wait. We’ve just subtly changed what our application does."
msgstr ""

#: src/router/17_nested_routing.md:30
msgid ""
"The next section is one of the most important in this entire routing section "
"of the guide. Read it carefully, and feel free to ask questions if there’s "
"anything you don’t understand."
msgstr ""

#: src/router/17_nested_routing.md:32
msgid "Nested Routes as Layout"
msgstr ""

#: src/router/17_nested_routing.md:34
msgid "Nested routes are a form of layout, not a method of route definition."
msgstr ""

#: src/router/17_nested_routing.md:36
msgid ""
"Let me put that another way: The goal of defining nested routes is not "
"primarily to avoid repeating yourself when typing out the paths in your "
"route definitions. It is actually to tell the router to display multiple "
"`<Route/>`s on the page at the same time, side by side."
msgstr ""

#: src/router/17_nested_routing.md:38
msgid "Let’s look back at our practical example."
msgstr ""

#: src/router/17_nested_routing.md:47 src/router/17_nested_routing.md:62
msgid "This means:"
msgstr ""

#: src/router/17_nested_routing.md:49
msgid "If I go to `/users`, I get the `<Users/>` component."
msgstr ""

#: src/router/17_nested_routing.md:50
msgid ""
"If I go to `/users/3`, I get the `<UserProfile/>` component (with the "
"parameter `id` set to `3`; more on that later)"
msgstr ""

#: src/router/17_nested_routing.md:52
msgid "Let’s say I use nested routes instead:"
msgstr ""

#: src/router/17_nested_routing.md:64
msgid ""
"If I go to `/users/3`, the path matches two `<Route/>`s: `<Users/>` and "
"`<UserProfile/>`."
msgstr ""

#: src/router/17_nested_routing.md:65
msgid "If I go to `/users`, the path is not matched."
msgstr ""

#: src/router/17_nested_routing.md:67
msgid "I actually need to add a fallback route"
msgstr ""

#: src/router/17_nested_routing.md:78
msgid "Now:"
msgstr ""

#: src/router/17_nested_routing.md:80
msgid ""
"If I go to `/users/3`, the path matches `<Users/>` and `<UserProfile/>`."
msgstr ""

#: src/router/17_nested_routing.md:81
msgid "If I go to `/users`, the path matches `<Users/>` and `<NoUser/>`."
msgstr ""

#: src/router/17_nested_routing.md:83
msgid ""
"When I use nested routes, in other words, each **path** can match multiple "
"**routes**: each URL can render the views provided by multiple `<Route/>` "
"components, at the same time, on the same page."
msgstr ""

#: src/router/17_nested_routing.md:85
msgid ""
"This may be counter-intuitive, but it’s very powerful, for reasons you’ll "
"hopefully see in a few minutes."
msgstr ""

#: src/router/17_nested_routing.md:87
msgid "Why Nested Routing?"
msgstr ""

#: src/router/17_nested_routing.md:89
msgid "Why bother with this?"
msgstr ""

#: src/router/17_nested_routing.md:91
msgid ""
"Most web applications contain levels of navigation that correspond to "
"different parts of the layout. For example, in an email app you might have a "
"URL like `/contacts/greg`, which shows a list of contacts on the left of the "
"screen, and contact details for Greg on the right of the screen. The contact "
"list and the contact details should always appear on the screen at the same "
"time. If there’s no contact selected, maybe you want to show a little "
"instructional text."
msgstr ""

#: src/router/17_nested_routing.md:93
msgid "You can easily define this with nested routes"
msgstr ""

#: src/router/17_nested_routing.md:97 src/router/17_nested_routing.md:110
#: src/router/17_nested_routing.md:168 src/router/17_nested_routing.md:230
#: src/router/17_nested_routing.md:240 src/router/18_params_and_queries.md:108
#: src/router/18_params_and_queries.md:118 src/router/19_a.md:61
#: src/router/19_a.md:71
msgid "\"/contacts\""
msgstr ""

#: src/router/17_nested_routing.md:100 src/router/17_nested_routing.md:117
#: src/router/17_nested_routing.md:171
msgid "\"Select a contact to view more info.\""
msgstr ""

#: src/router/17_nested_routing.md:106
msgid ""
"You can go even deeper. Say you want to have tabs for each contact’s "
"address, email/phone, and your conversations with them. You can add "
"_another_ set of nested routes inside `:id`:"
msgstr ""

#: src/router/17_nested_routing.md:113 src/router/17_nested_routing.md:184
msgid "\"address\""
msgstr ""

#: src/router/17_nested_routing.md:114 src/router/17_nested_routing.md:185
msgid "\"messages\""
msgstr ""

#: src/router/17_nested_routing.md:123
msgid ""
"The main page of the [Remix website](https://remix.run/), a React framework "
"from the creators of React Router, has a great visual example if you scroll "
"down, with three levels of nested routing: Sales > Invoices > an invoice."
msgstr ""

#: src/router/17_nested_routing.md:125
msgid "`<Outlet/>`"
msgstr ""

#: src/router/17_nested_routing.md:127
msgid ""
"Parent routes do not automatically render their nested routes. After all, "
"they are just components; they don’t know exactly where they should render "
"their children, and “just stick it at the end of the parent component” is "
"not a great answer."
msgstr ""

#: src/router/17_nested_routing.md:129
msgid ""
"Instead, you tell a parent component where to render any nested components "
"with an `<Outlet/>` component. The `<Outlet/>` simply renders one of two "
"things:"
msgstr ""

#: src/router/17_nested_routing.md:131
msgid "if there is no nested route that has been matched, it shows nothing"
msgstr ""

#: src/router/17_nested_routing.md:132
msgid "if there is a nested route that has been matched, it shows its `view`"
msgstr ""

#: src/router/17_nested_routing.md:134
msgid ""
"That’s all! But it’s important to know and to remember, because it’s a "
"common source of “Why isn’t this working?” frustration. If you don’t provide "
"an `<Outlet/>`, the nested route won’t be displayed."
msgstr ""

#: src/router/17_nested_routing.md:143
msgid "// the contact list\n"
msgstr ""

#: src/router/17_nested_routing.md:148
msgid ""
"// the nested child, if any\n"
"      // don’t forget this!\n"
msgstr ""

#: src/router/17_nested_routing.md:156
msgid "Refactoring Route Definitions"
msgstr ""

#: src/router/17_nested_routing.md:158
msgid ""
"You don’t need to define all your routes in one place if you don’t want to. "
"You can refactor any `<Route/>` and its children out into a separate "
"component."
msgstr ""

#: src/router/17_nested_routing.md:160
msgid ""
"For example, you can refactor the example above to use two separate "
"components:"
msgstr ""

#: src/router/17_nested_routing.md:191
msgid ""
"This second component is a `#[component(transparent)]`, meaning it just "
"returns its data, not a view: in this case, it's a [`RouteDefinition`]"
"(https://docs.rs/leptos_router/latest/leptos_router/struct.RouteDefinition."
"html) struct, which is what the `<Route/>` returns. As long as it is marked "
"`#[component(transparent)]`, this sub-route can be defined wherever you "
"want, and inserted as a component into your tree of route definitions."
msgstr ""

#: src/router/17_nested_routing.md:193
msgid "Nested Routing and Performance"
msgstr ""

#: src/router/17_nested_routing.md:195
msgid "All of this is nice, conceptually, but again—what’s the big deal?"
msgstr ""

#: src/router/17_nested_routing.md:197
msgid "Performance."
msgstr ""

#: src/router/17_nested_routing.md:199
msgid ""
"In a fine-grained reactive library like Leptos, it’s always important to do "
"the least amount of rendering work you can. Because we’re working with real "
"DOM nodes and not diffing a virtual DOM, we want to “rerender” components as "
"infrequently as possible. Nested routing makes this extremely easy."
msgstr ""

#: src/router/17_nested_routing.md:201
msgid ""
"Imagine my contact list example. If I navigate from Greg to Alice to Bob and "
"back to Greg, the contact information needs to change on each navigation. "
"But the `<ContactList/>` should never be rerendered. Not only does this save "
"on rendering performance, it also maintains state in the UI. For example, if "
"I have a search bar at the top of `<ContactList/>`, navigating from Greg to "
"Alice to Bob won’t clear the search."
msgstr ""

#: src/router/17_nested_routing.md:203
msgid ""
"In fact, in this case, we don’t even need to rerender the `<Contact/>` "
"component when moving between contacts. The router will just reactively "
"update the `:id` parameter as we navigate, allowing us to make fine-grained "
"updates. As we navigate between contacts, we’ll update single text nodes to "
"change the contact’s name, address, and so on, without doing _any_ "
"additional rerendering."
msgstr ""

#: src/router/17_nested_routing.md:205
msgid ""
"This sandbox includes a couple features (like nested routing) discussed in "
"this section and the previous one, and a couple we’ll cover in the rest of "
"this chapter. The router is such an integrated system that it makes sense to "
"provide a single example, so don’t be surprised if there’s anything you "
"don’t understand."
msgstr ""

#: src/router/17_nested_routing.md:207 src/router/18_params_and_queries.md:85
#: src/router/19_a.md:38
msgid ""
"[Click to open CodeSandbox.](https://codesandbox.io/p/sandbox/16-"
"router-0-5-4xp4zz?file=%2Fsrc%2Fmain.rs%3A102%2C2)"
msgstr ""

#: src/router/17_nested_routing.md:222 src/router/18_params_and_queries.md:100
#: src/router/19_a.md:53
msgid "\"Contact App\""
msgstr ""

#: src/router/17_nested_routing.md:223 src/router/18_params_and_queries.md:101
#: src/router/19_a.md:54
msgid ""
"// this <nav> will show on every routes,\n"
"            // because it's outside the <Routes/>\n"
"            // note: we can just use normal <a> tags\n"
"            // and the router will use client-side navigation\n"
msgstr ""

#: src/router/17_nested_routing.md:228 src/router/18_params_and_queries.md:106
#: src/router/19_a.md:59
msgid "\"Navigation\""
msgstr ""

#: src/router/17_nested_routing.md:229 src/router/17_nested_routing.md:236
#: src/router/18_params_and_queries.md:107
#: src/router/18_params_and_queries.md:114 src/router/19_a.md:60
#: src/router/19_a.md:67
msgid "\"Home\""
msgstr ""

#: src/router/17_nested_routing.md:230 src/router/17_nested_routing.md:275
#: src/router/18_params_and_queries.md:108
#: src/router/18_params_and_queries.md:153 src/router/19_a.md:61
#: src/router/19_a.md:106
msgid "\"Contacts\""
msgstr ""

#: src/router/17_nested_routing.md:234 src/router/18_params_and_queries.md:112
#: src/router/19_a.md:65
msgid "// / just has an un-nested \"Home\"\n"
msgstr ""

#: src/router/17_nested_routing.md:238 src/router/18_params_and_queries.md:116
#: src/router/19_a.md:69
msgid "// /contacts has nested routes\n"
msgstr ""

#: src/router/17_nested_routing.md:243 src/router/17_nested_routing.md:256
#: src/router/18_params_and_queries.md:121
#: src/router/18_params_and_queries.md:134 src/router/19_a.md:74
#: src/router/19_a.md:87
msgid "// if no id specified, fall back\n"
msgstr ""

#: src/router/17_nested_routing.md:246 src/router/17_nested_routing.md:251
#: src/router/18_params_and_queries.md:124
#: src/router/18_params_and_queries.md:129 src/router/19_a.md:77
#: src/router/19_a.md:82
msgid "\"tab\""
msgstr ""

#: src/router/17_nested_routing.md:247 src/router/18_params_and_queries.md:125
#: src/router/19_a.md:78
msgid "\"(Contact Info)\""
msgstr ""

#: src/router/17_nested_routing.md:250 src/router/17_nested_routing.md:308
#: src/router/18_params_and_queries.md:128
#: src/router/18_params_and_queries.md:186 src/router/19_a.md:81
#: src/router/19_a.md:139
msgid "\"conversations\""
msgstr ""

#: src/router/17_nested_routing.md:252 src/router/18_params_and_queries.md:130
#: src/router/19_a.md:83
msgid "\"(Conversations)\""
msgstr ""

#: src/router/17_nested_routing.md:258 src/router/18_params_and_queries.md:136
#: src/router/19_a.md:89
msgid "\"select-user\""
msgstr ""

#: src/router/17_nested_routing.md:259 src/router/18_params_and_queries.md:137
#: src/router/19_a.md:90
msgid "\"Select a user to view contact info.\""
msgstr ""

#: src/router/17_nested_routing.md:272 src/router/18_params_and_queries.md:150
#: src/router/19_a.md:103
msgid "\"contact-list\""
msgstr ""

#: src/router/17_nested_routing.md:273 src/router/18_params_and_queries.md:151
#: src/router/19_a.md:104
msgid "// here's our contact list component itself\n"
msgstr ""

#: src/router/17_nested_routing.md:274 src/router/18_params_and_queries.md:152
#: src/router/19_a.md:105
msgid "\"contact-list-contacts\""
msgstr ""

#: src/router/17_nested_routing.md:276 src/router/17_nested_routing.md:297
#: src/router/18_params_and_queries.md:154
#: src/router/18_params_and_queries.md:175 src/router/19_a.md:107
#: src/router/19_a.md:128
msgid "\"alice\""
msgstr ""

#: src/router/17_nested_routing.md:277 src/router/17_nested_routing.md:298
#: src/router/18_params_and_queries.md:155
#: src/router/18_params_and_queries.md:176 src/router/19_a.md:108
#: src/router/19_a.md:129
msgid "\"bob\""
msgstr ""

#: src/router/17_nested_routing.md:278 src/router/17_nested_routing.md:299
#: src/router/18_params_and_queries.md:156
#: src/router/18_params_and_queries.md:177 src/router/19_a.md:109
#: src/router/19_a.md:130
msgid "\"steve\""
msgstr ""

#: src/router/17_nested_routing.md:278 src/router/17_nested_routing.md:299
#: src/router/18_params_and_queries.md:156
#: src/router/18_params_and_queries.md:177 src/router/19_a.md:109
#: src/router/19_a.md:130
msgid "\"Steve\""
msgstr ""

#: src/router/17_nested_routing.md:281 src/router/18_params_and_queries.md:159
#: src/router/19_a.md:112
msgid ""
"// <Outlet/> will show the nested child route\n"
"            // we can position this outlet wherever we want\n"
"            // within the layout\n"
msgstr ""

#: src/router/17_nested_routing.md:291 src/router/18_params_and_queries.md:169
#: src/router/19_a.md:122
msgid "// we can access the :id param reactively with `use_params_map`\n"
msgstr ""

#: src/router/17_nested_routing.md:295 src/router/18_params_and_queries.md:173
#: src/router/19_a.md:126
msgid "// imagine we're loading data from an API here\n"
msgstr ""

#: src/router/17_nested_routing.md:300 src/router/18_params_and_queries.md:178
#: src/router/19_a.md:131
msgid "\"User not found.\""
msgstr ""

#: src/router/17_nested_routing.md:304 src/router/18_params_and_queries.md:182
#: src/router/19_a.md:135
msgid "\"contact-info\""
msgstr ""

#: src/router/17_nested_routing.md:306 src/router/18_params_and_queries.md:184
#: src/router/19_a.md:137
msgid "\"tabs\""
msgstr ""

#: src/router/17_nested_routing.md:307 src/router/18_params_and_queries.md:185
#: src/router/19_a.md:138
msgid "\"Contact Info\""
msgstr ""

#: src/router/17_nested_routing.md:308 src/router/18_params_and_queries.md:186
#: src/router/19_a.md:139
msgid "\"Conversations\""
msgstr ""

#: src/router/17_nested_routing.md:311 src/router/18_params_and_queries.md:189
#: src/router/19_a.md:142
msgid ""
"// <Outlet/> here is the tabs that are nested\n"
"            // underneath the /contacts/:id route\n"
msgstr ""

#: src/router/18_params_and_queries.md:3
msgid ""
"Static paths are useful for distinguishing between different pages, but "
"almost every application wants to pass data through the URL at some point."
msgstr ""

#: src/router/18_params_and_queries.md:5
msgid "There are two ways you can do this:"
msgstr ""

#: src/router/18_params_and_queries.md:7
msgid "named route **params** like `id` in `/users/:id`"
msgstr ""

#: src/router/18_params_and_queries.md:8
msgid "named route **queries** like `q` in `/search?q=Foo`"
msgstr ""

#: src/router/18_params_and_queries.md:10
msgid ""
"Because of the way URLs are built, you can access the query from _any_ "
"`<Route/>` view. You can access route params from the `<Route/>` that "
"defines them or any of its nested children."
msgstr ""

#: src/router/18_params_and_queries.md:12
msgid "Accessing params and queries is pretty simple with a couple of hooks:"
msgstr ""

#: src/router/18_params_and_queries.md:14
msgid ""
"[`use_query`](https://docs.rs/leptos_router/latest/leptos_router/fn."
"use_query.html) or [`use_query_map`](https://docs.rs/leptos_router/latest/"
"leptos_router/fn.use_query_map.html)"
msgstr ""

#: src/router/18_params_and_queries.md:15
msgid ""
"[`use_params`](https://docs.rs/leptos_router/latest/leptos_router/fn."
"use_params.html) or [`use_params_map`](https://docs.rs/leptos_router/latest/"
"leptos_router/fn.use_params_map.html)"
msgstr ""

#: src/router/18_params_and_queries.md:17
msgid ""
"Each of these comes with a typed option (`use_query` and `use_params`) and "
"an untyped option (`use_query_map` and `use_params_map`)."
msgstr ""

#: src/router/18_params_and_queries.md:19
msgid ""
"The untyped versions hold a simple key-value map. To use the typed versions, "
"derive the [`Params`](https://docs.rs/leptos_router/0.2.3/leptos_router/"
"trait.Params.html) trait on a struct."
msgstr ""

#: src/router/18_params_and_queries.md:21
msgid ""
"`Params` is a very lightweight trait to convert a flat key-value map of "
"strings into a struct by applying `FromStr` to each field. Because of the "
"flat structure of route params and URL queries, it’s significantly less "
"flexible than something like `serde`; it also adds much less weight to your "
"binary."
msgstr ""

#: src/router/18_params_and_queries.md:38
msgid ""
"Note: The `Params` derive macro is located at `leptos::Params`, and the "
"`Params` trait is at `leptos_router::Params`. If you avoid using glob "
"imports like `use leptos::*;`, make sure you’re importing the right one for "
"the derive macro."
msgstr ""

#: src/router/18_params_and_queries.md:40
msgid "If you are not using the `nightly` feature, you will get the error"
msgstr ""

#: src/router/18_params_and_queries.md:46
msgid ""
"At the moment, supporting both `T: FromStr` and `Option<T>` for typed params "
"requires a nightly feature. You can fix this by simply changing the struct "
"to use `q: Option<String>` instead of `q: String`."
msgstr ""

#: src/router/18_params_and_queries.md:48
msgid ""
"Now we can use them in a component. Imagine a URL that has both params and a "
"query, like `/contacts/:id?q=Search`."
msgstr ""

#: src/router/18_params_and_queries.md:50
msgid ""
"The typed versions return `Memo<Result<T, _>>`. It’s a Memo so it reacts to "
"changes in the URL. It’s a `Result` because the params or query need to be "
"parsed from the URL, and may or may not be valid."
msgstr ""

#: src/router/18_params_and_queries.md:55
msgid "// id: || -> usize\n"
msgstr ""

#: src/router/18_params_and_queries.md:66
msgid ""
"The untyped versions return `Memo<ParamsMap>`. Again, it’s memo to react to "
"changes in the URL. [`ParamsMap`](https://docs.rs/leptos_router/0.2.3/"
"leptos_router/struct.ParamsMap.html) behaves a lot like any other map type, "
"with a `.get()` method that returns `Option<&String>`."
msgstr ""

#: src/router/18_params_and_queries.md:71
msgid "// id: || -> Option<String>\n"
msgstr ""

#: src/router/18_params_and_queries.md:78
msgid ""
"This can get a little messy: deriving a signal that wraps an `Option<_>` or "
"`Result<_>` can involve a couple steps. But it’s worth doing this for two "
"reasons:"
msgstr ""

#: src/router/18_params_and_queries.md:80
msgid ""
"It’s correct, i.e., it forces you to consider the cases, “What if the user "
"doesn’t pass a value for this query field? What if they pass an invalid "
"value?”"
msgstr ""

#: src/router/18_params_and_queries.md:81
msgid ""
"It’s performant. Specifically, when you navigate between different paths "
"that match the same `<Route/>` with only params or the query changing, you "
"can get fine-grained updates to different parts of your app without "
"rerendering. For example, navigating between different contacts in our "
"contact-list example does a targeted update to the name field (and "
"eventually contact info) without needing to replace or rerender the wrapping "
"`<Contact/>`. This is what fine-grained reactivity is for."
msgstr ""

#: src/router/18_params_and_queries.md:83
msgid ""
"This is the same example from the previous section. The router is such an "
"integrated system that it makes sense to provide a single example "
"highlighting multiple features, even if we haven’t explained them all yet."
msgstr ""

#: src/router/19_a.md:1
msgid "The `<A/>` Component"
msgstr ""

#: src/router/19_a.md:3
msgid ""
"Client-side navigation works perfectly fine with ordinary HTML `<a>` "
"elements. The router adds a listener that handles every click on a `<a>` "
"element and tries to handle it on the client side, i.e., without doing "
"another round trip to the server to request HTML. This is what enables the "
"snappy “single-page app” navigations you’re probably familiar with from most "
"modern web apps."
msgstr ""

#: src/router/19_a.md:5
msgid ""
"The router will bail out of handling an `<a>` click under a number of "
"situations"
msgstr ""

#: src/router/19_a.md:7
msgid "the click event has had `prevent_default()` called on it"
msgstr ""

#: src/router/19_a.md:8
msgid "the "
msgstr ""

#: src/router/19_a.md:8
msgid "Meta"
msgstr ""

#: src/router/19_a.md:8
msgid ", "
msgstr ""

#: src/router/19_a.md:8
msgid "Alt"
msgstr ""

#: src/router/19_a.md:8
msgid "Ctrl"
msgstr ""

#: src/router/19_a.md:8
msgid ", or "
msgstr ""

#: src/router/19_a.md:8
msgid "Shift"
msgstr ""

#: src/router/19_a.md:8
msgid " keys were held during click"
msgstr ""

#: src/router/19_a.md:9
msgid "the `<a>` has a `target` or `download` attribute, or `rel=\"external\"`"
msgstr ""

#: src/router/19_a.md:10
msgid "the link has a different origin from the current location"
msgstr ""

#: src/router/19_a.md:12
msgid ""
"In other words, the router will only try to do a client-side navigation when "
"it’s pretty sure it can handle it, and it will upgrade every `<a>` element "
"to get this special behavior."
msgstr ""

#: src/router/19_a.md:14
msgid ""
"This also means that if you need to opt out of client-side routing, you can "
"do so easily. For example, if you have a link to another page on the same "
"domain, but which isn’t part of your Leptos app, you can just use `<a rel="
"\"external\">` to tell the router it isn’t something it can handle."
msgstr ""

#: src/router/19_a.md:16
msgid ""
"The router also provides an [`<A>`](https://docs.rs/leptos_router/latest/"
"leptos_router/fn.A.html) component, which does two additional things:"
msgstr ""

#: src/router/19_a.md:18
msgid ""
"Correctly resolves relative nested routes. Relative routing with ordinary "
"`<a>` tags can be tricky. For example, if you have a route like `/post/:id`, "
"`<A href=\"1\">` will generate the correct relative route, but `<a href="
"\"1\">` likely will not (depending on where it appears in your view.) `<A/>` "
"resolves routes relative to the path of the nested route within which it "
"appears."
msgstr ""

#: src/router/19_a.md:19
msgid ""
"Sets the `aria-current` attribute to `page` if this link is the active link "
"(i.e., it’s a link to the page you’re on). This is helpful for accessibility "
"and for styling. For example, if you want to set the link a different color "
"if it’s a link to the page you’re currently on, you can match this attribute "
"with a CSS selector."
msgstr ""

#: src/router/19_a.md:21
msgid "Navigating Programmatically"
msgstr ""

#: src/router/19_a.md:23
msgid ""
"Your most-used methods of navigating between pages should be with `<a>` and "
"`<form>` elements or with the enhanced `<A/>` and `<Form/>` components. "
"Using links and forms to navigate is the best solution for accessibility and "
"graceful degradation."
msgstr ""

#: src/router/19_a.md:25
msgid ""
"On occasion, though, you’ll want to navigate programmatically, i.e., call a "
"function that can navigate to a new page. In that case, you should use the "
"[`use_navigate`](https://docs.rs/leptos_router/latest/leptos_router/fn."
"use_navigate.html) function."
msgstr ""

#: src/router/19_a.md:29
msgid "\"/somewhere\""
msgstr ""

#: src/router/19_a.md:32
msgid ""
"You should almost never do something like `<button on:click=move |_| "
"navigate(/* ... */)>`. Any `on:click` that navigates should be an `<a>`, for "
"reasons of accessibility."
msgstr ""

#: src/router/19_a.md:34
msgid ""
"The second argument here is a set of [`NavigateOptions`](https://docs.rs/"
"leptos_router/latest/leptos_router/struct.NavigateOptions.html), which "
"includes options to resolve the navigation relative to the current route as "
"the `<A/>` component does, replace it in the navigation stack, include some "
"navigation state, and maintain the current scroll state on navigation."
msgstr ""

#: src/router/19_a.md:36
msgid ""
"Once again, this is the same example. Check out the relative `<A/>` "
"components, and take a look at the CSS in `index.html` to see the ARIA-based "
"styling."
msgstr ""

#: src/router/20_form.md:1
msgid "The `<Form/>` Component"
msgstr ""

#: src/router/20_form.md:3
msgid ""
"Links and forms sometimes seem completely unrelated. But, in fact, they work "
"in very similar ways."
msgstr ""

#: src/router/20_form.md:5
msgid "In plain HTML, there are three ways to navigate to another page:"
msgstr ""

#: src/router/20_form.md:7
msgid ""
"An `<a>` element that links to another page: Navigates to the URL in its "
"`href` attribute with the `GET` HTTP method."
msgstr ""

#: src/router/20_form.md:8
msgid ""
"A `<form method=\"GET\">`: Navigates to the URL in its `action` attribute "
"with the `GET` HTTP method and the form data from its inputs encoded in the "
"URL query string."
msgstr ""

#: src/router/20_form.md:9
msgid ""
"A `<form method=\"POST\">`: Navigates to the URL in its `action` attribute "
"with the `POST` HTTP method and the form data from its inputs encoded in the "
"body of the request."
msgstr ""

#: src/router/20_form.md:11
msgid ""
"Since we have a client-side router, we can do client-side link navigations "
"without reloading the page, i.e., without a full round-trip to the server "
"and back. It makes sense that we can do client-side form navigations in the "
"same way."
msgstr ""

#: src/router/20_form.md:13
msgid ""
"The router provides a [`<Form>`](https://docs.rs/leptos_router/latest/"
"leptos_router/fn.Form.html) component, which works like the HTML `<form>` "
"element, but uses client-side navigations instead of full page reloads. "
"`<Form/>` works with both `GET` and `POST` requests. With `method=\"GET\"`, "
"it will navigate to the URL encoded in the form data. With `method=\"POST\"` "
"it will make a `POST` request and handle the server’s response."
msgstr ""

#: src/router/20_form.md:15
msgid ""
"`<Form/>` provides the basis for some components like `<ActionForm/>` and "
"`<MultiActionForm/>` that we’ll see in later chapters. But it also enables "
"some powerful patterns of its own."
msgstr ""

#: src/router/20_form.md:17
msgid ""
"For example, imagine that you want to create a search field that updates "
"search results in real time as the user searches, without a page reload, but "
"that also stores the search in the URL so a user can copy and paste it to "
"share results with someone else."
msgstr ""

#: src/router/20_form.md:19
msgid ""
"It turns out that the patterns we’ve learned so far make this easy to "
"implement."
msgstr ""

#: src/router/20_form.md:23
msgid "// some async function to fetch our search results\n"
msgstr ""

#: src/router/20_form.md:28
msgid "// reactive access to URL query strings\n"
msgstr ""

#: src/router/20_form.md:30
msgid "// search stored as ?q=\n"
msgstr ""

#: src/router/20_form.md:31 src/router/20_form.md:37 src/router/20_form.md:56
msgid "\"q\""
msgstr ""

#: src/router/20_form.md:32
msgid "// a resource driven by the search string\n"
msgstr ""

#: src/router/20_form.md:36 src/router/20_form.md:55 src/router/20_form.md:116
#: src/router/20_form.md:139
msgid "\"GET\""
msgstr ""

#: src/router/20_form.md:37 src/router/20_form.md:56
msgid "\"search\""
msgstr ""

#: src/router/20_form.md:41
msgid "/* render search results */"
msgstr ""

#: src/router/20_form.md:47
msgid ""
"Whenever you click `Submit`, the `<Form/>` will “navigate” to `?q={search}`. "
"But because this navigation is done on the client side, there’s no page "
"flicker or reload. The URL query string changes, which triggers `search` to "
"update. Because `search` is the source signal for the `search_results` "
"resource, this triggers `search_results` to reload its resource. The "
"`<Transition/>` continues displaying the current search results until the "
"new ones have loaded. When they are complete, it switches to displaying the "
"new result."
msgstr ""

#: src/router/20_form.md:49
msgid ""
"This is a great pattern. The data flow is extremely clear: all data flows "
"from the URL to the resource into the UI. The current state of the "
"application is stored in the URL, which means you can refresh the page or "
"text the link to a friend and it will show exactly what you’re expecting. "
"And once we introduce server rendering, this pattern will prove to be really "
"fault-tolerant, too: because it uses a `<form>` element and URLs under the "
"hood, it actually works really well without even loading your WASM on the "
"client."
msgstr ""

#: src/router/20_form.md:51
msgid "We can actually take it a step further and do something kind of clever:"
msgstr ""

#: src/router/20_form.md:57 src/router/20_form.md:146 src/router/20_form.md:152
#: src/router/20_form.md:155
msgid "\"this.form.requestSubmit()\""
msgstr ""

#: src/router/20_form.md:63
msgid ""
"You’ll notice that this version drops the `Submit` button. Instead, we add "
"an `oninput` attribute to the input. Note that this is _not_ `on:input`, "
"which would listen for the `input` event and run some Rust code. Without the "
"colon, `oninput` is the plain HTML attribute. So the string is actually a "
"JavaScript string. `this.form` gives us the form the input is attached to. "
"`requestSubmit()` fires the `submit` event on the `<form>`, which is caught "
"by `<Form/>` just as if we had clicked a `Submit` button. Now the form will "
"“navigate” on every keystroke or input to keep the URL (and therefore the "
"search) perfectly in sync with the user’s input as they type."
msgstr ""

#: src/router/20_form.md:65
msgid ""
"[Click to open CodeSandbox.](https://codesandbox.io/p/sandbox/20-"
"form-0-5-9g7v9p?file=%2Fsrc%2Fmain.rs%3A1%2C1)"
msgstr ""

#: src/router/20_form.md:80
msgid "\"<Form/>\""
msgstr ""

#: src/router/20_form.md:92
msgid "// reactive access to URL query\n"
msgstr ""

#: src/router/20_form.md:94 src/router/20_form.md:102 src/router/20_form.md:118
#: src/router/20_form.md:142
msgid "\"name\""
msgstr ""

#: src/router/20_form.md:96 src/router/20_form.md:110 src/router/20_form.md:120
#: src/router/20_form.md:154
msgid "\"select\""
msgstr ""

#: src/router/20_form.md:99
msgid "// read out the URL query strings\n"
msgstr ""

#: src/router/20_form.md:114
msgid "// <Form/> will navigate whenever submitted\n"
msgstr ""

#: src/router/20_form.md:115
msgid "\"Manual Submission\""
msgstr ""

#: src/router/20_form.md:117
msgid "// input names determine query string key\n"
msgstr ""

#: src/router/20_form.md:121
msgid "// `selected` will set which starts as selected\n"
msgstr ""

#: src/router/20_form.md:132 src/router/20_form.md:167
msgid ""
"// submitting should cause a client-side\n"
"            // navigation, not a full reload\n"
msgstr ""

#: src/router/20_form.md:136
msgid ""
"// This <Form/> uses some JavaScript to submit\n"
"        // on every input\n"
msgstr ""

#: src/router/20_form.md:138
msgid "\"Automatic Submission\""
msgstr ""

#: src/router/20_form.md:144
msgid ""
"// this oninput attribute will cause the\n"
"                // form to submit on every input to the field\n"
msgstr ""

#: src/interlude_styling.md:3
msgid ""
"Anyone creating a website or application soon runs into the question of "
"styling. For a small app, a single CSS file is probably plenty to style your "
"user interface. But as an application grows, many developers find that plain "
"CSS becomes increasingly hard to manage."
msgstr ""

#: src/interlude_styling.md:5
msgid ""
"Some frontend frameworks (like Angular, Vue, and Svelte) provide built-in "
"ways to scope your CSS to particular components, making it easier to manage "
"styles across a whole application without styles meant to modify one small "
"component having a global effect. Other frameworks (like React or Solid) "
"don’t provide built-in CSS scoping, but rely on libraries in the ecosystem "
"to do it for them. Leptos is in this latter camp: the framework itself has "
"no opinions about CSS at all, but provides a few tools and primitives that "
"allow others to build styling libraries."
msgstr ""

#: src/interlude_styling.md:7
msgid ""
"Here are a few different approaches to styling your Leptos app, other than "
"plain CSS."
msgstr ""

#: src/interlude_styling.md:9
msgid "TailwindCSS: Utility-first CSS"
msgstr ""

#: src/interlude_styling.md:11
msgid ""
"[TailwindCSS](https://tailwindcss.com/) is a popular utility-first CSS "
"library. It allows you to style your application by using inline utility "
"classes, with a custom CLI tool that scans your files for Tailwind class "
"names and bundles the necessary CSS."
msgstr ""

#: src/interlude_styling.md:13 src/interlude_styling.md:45
msgid "This allows you to write components like this:"
msgstr ""

#: src/interlude_styling.md:21
msgid "\"my-0 mx-auto max-w-3xl text-center\""
msgstr ""

#: src/interlude_styling.md:22
msgid "\"p-6 text-4xl\""
msgstr ""

#: src/interlude_styling.md:22
msgid "\"Welcome to Leptos with Tailwind\""
msgstr ""

#: src/interlude_styling.md:23
msgid "\"px-10 pb-10 text-left\""
msgstr ""

#: src/interlude_styling.md:23
msgid ""
"\"Tailwind will scan your Rust files for Tailwind class names and compile "
"them into a CSS file.\""
msgstr ""

#: src/interlude_styling.md:25
msgid "\"bg-sky-600 hover:bg-sky-700 px-5 py-3 text-white rounded-lg\""
msgstr ""

#: src/interlude_styling.md:29
msgid "\"Click me!\""
msgstr ""

#: src/interlude_styling.md:39
msgid ""
"It can be a little complicated to set up the Tailwind integration at first, "
"but you can check out our two examples of how to use Tailwind with a [client-"
"side-rendered `trunk` application](https://github.com/leptos-rs/leptos/tree/"
"main/examples/tailwind_csr) or with a [server-rendered `cargo-leptos` "
"application](https://github.com/leptos-rs/leptos/tree/main/examples/"
"tailwind_actix). `cargo-leptos` also has some [built-in Tailwind support]"
"(https://github.com/leptos-rs/cargo-leptos#site-parameters) that you can use "
"as an alternative to Tailwind’s CLI."
msgstr ""

#: src/interlude_styling.md:41
msgid "Stylers: Compile-time CSS Extraction"
msgstr ""

#: src/interlude_styling.md:43
msgid ""
"[Stylers](https://github.com/abishekatp/stylers) is a compile-time scoped "
"CSS library that lets you declare scoped CSS in the body of your component. "
"Stylers will extract this CSS at compile time into CSS files that you can "
"then import into your app, which means that it doesn’t add anything to the "
"WASM binary size of your application."
msgstr ""

#: src/interlude_styling.md:52
msgid "\"App\""
msgstr ""

#: src/interlude_styling.md:58
msgid "r#\"\\hello\"#"
msgstr ""

#: src/interlude_styling.md:59
msgid "\"1.3em/1.2\""
msgstr ""

#: src/interlude_styling.md:78
msgid ""
"\">\n"
"            <h1 id=\""
msgstr ""

#: src/interlude_styling.md:79
msgid "\">\""
msgstr ""

#: src/interlude_styling.md:79
msgid ""
"\"</h1>\n"
"            <h2>\""
msgstr ""

#: src/interlude_styling.md:80
msgid ""
"\"</h2>\n"
"            <h2>\""
msgstr ""

#: src/interlude_styling.md:81
msgid ""
"\"</h2>\n"
"            <h3>\""
msgstr ""

#: src/interlude_styling.md:82
msgid ""
"\"</h3>\n"
"        </div>\n"
"    }\n"
"}\n"
msgstr ""

#: src/interlude_styling.md:88
msgid "Stylance: Scoped CSS Written in CSS Files"
msgstr ""

#: src/interlude_styling.md:90
msgid ""
"Stylers lets you write CSS inline in your Rust code, extracts it at compile "
"time, and scopes it. [Stylance](https://github.com/basro/stylance-rs) allows "
"you to write your CSS in CSS files alongside your components, import those "
"files into your components, and scope the CSS classes to your components."
msgstr ""

#: src/interlude_styling.md:92
msgid ""
"This works well with the live-reloading features of `trunk` and `cargo-"
"leptos` because edited CSS files can be updated immediately in the browser."
msgstr ""

#: src/interlude_styling.md:95
msgid "\"app.module.scss\""
msgstr ""

#: src/interlude_styling.md:105
msgid "You can edit the CSS directly without causing a Rust recompile."
msgstr ""

#: src/interlude_styling.md:112
msgid "Styled: Runtime CSS Scoping"
msgstr ""

#: src/interlude_styling.md:114
msgid ""
"[Styled](https://github.com/eboody/styled) is a runtime scoped CSS library "
"that integrates well with Leptos. It lets you declare scoped CSS in the body "
"of your component function, and then applies those styles at runtime."
msgstr ""

#: src/interlude_styling.md:129
msgid "\"This text should be red with white text.\""
msgstr ""

#: src/interlude_styling.md:134
msgid "Contributions Welcome"
msgstr ""

#: src/interlude_styling.md:136
msgid ""
"Leptos has no opinions on how you style your website or app, but we’re very "
"happy to provide support to any tools you’re trying to create to make it "
"easier. If you’re working on a CSS or styling approach that you’d like to "
"add to this list, please let us know!"
msgstr ""

#: src/metadata.md:3
msgid ""
"So far, everything we’ve rendered has been inside the `<body>` of the HTML "
"document. And this makes sense. After all, everything you can see on a web "
"page lives inside the `<body>`."
msgstr ""

#: src/metadata.md:5
msgid ""
"However, there are plenty of occasions where you might want to update "
"something inside the `<head>` of the document using the same reactive "
"primitives and component patterns you use for your UI."
msgstr ""

#: src/metadata.md:7
msgid ""
"That’s where the [`leptos_meta`](https://docs.rs/leptos_meta/latest/"
"leptos_meta/) package comes in."
msgstr ""

#: src/metadata.md:9
msgid "Metadata Components"
msgstr ""

#: src/metadata.md:11
msgid ""
"`leptos_meta` provides special components that let you inject data from "
"inside components anywhere in your application into the `<head>`:"
msgstr ""

#: src/metadata.md:13
msgid ""
"[`<Title/>`](https://docs.rs/leptos_meta/latest/leptos_meta/fn.Title.html) "
"allows you to set the document’s title from any component. It also takes a "
"`formatter` function that can be used to apply the same format to the title "
"set by other pages. So, for example, if you put `<Title formatter=|text| "
"format!(\"{text} — My Awesome Site\")/>` in your `<App/>` component, and "
"then `<Title text=\"Page 1\"/>` and `<Title text=\"Page 2\"/>` on your "
"routes, you’ll get `Page 1 — My Awesome Site` and `Page 2 — My Awesome Site`."
msgstr ""

#: src/metadata.md:15
msgid ""
"[`<Link/>`](https://docs.rs/leptos_meta/latest/leptos_meta/fn.Link.html) "
"takes the standard attributes of the `<link>` element."
msgstr ""

#: src/metadata.md:17
msgid ""
"[`<Stylesheet/>`](https://docs.rs/leptos_meta/latest/leptos_meta/fn."
"Stylesheet.html) creates a `<link rel=\"stylesheet\">` with the `href` you "
"give."
msgstr ""

#: src/metadata.md:19
msgid ""
"[`<Style/>`](https://docs.rs/leptos_meta/latest/leptos_meta/fn.Style.html) "
"creates a `<style>` with the children you pass in (usually a string). You "
"can use this to import some custom CSS from another file at compile time "
"`<Style>{include_str!(\"my_route.css\")}</Style>`."
msgstr ""

#: src/metadata.md:21
msgid ""
"[`<Meta/>`](https://docs.rs/leptos_meta/latest/leptos_meta/fn.Meta.html) "
"lets you set `<meta>` tags with descriptions and other metadata."
msgstr ""

#: src/metadata.md:23
msgid "`<Script/>` and `<script>`"
msgstr ""

#: src/metadata.md:25
msgid ""
"`leptos_meta` also provides a [`<Script/>`](https://docs.rs/leptos_meta/"
"latest/leptos_meta/fn.Script.html) component, and it’s worth pausing here "
"for a second. All of the other components we’ve considered inject `<head>`\\-"
"only elements in the `<head>`. But a `<script>` can also be included in the "
"body."
msgstr ""

#: src/metadata.md:27
msgid ""
"There’s a very simple way to determine whether you should use a capital-S "
"`<Script/>` component or a lowercase-s `<script>` element: the `<Script/>` "
"component will be rendered in the `<head>`, and the `<script>` element will "
"be rendered wherever in the `<body>` of your user interface you put it in, "
"alongside other normal HTML elements. These cause JavaScript to load and run "
"at different times, so use whichever is appropriate to your needs."
msgstr ""

#: src/metadata.md:29
msgid "`<Body/>` and `<Html/>`"
msgstr ""

#: src/metadata.md:31
msgid ""
"There are even a couple elements designed to make semantic HTML and styling "
"easier. [`<Html/>`](https://docs.rs/leptos_meta/latest/leptos_meta/fn.Html."
"html) lets you set the `lang` and `dir` on your `<html>` tag from your "
"application code. `<Html/>` and [`<Body/>`](https://docs.rs/leptos_meta/"
"latest/leptos_meta/fn.Body.html) both have `class` props that let you set "
"their respective `class` attributes, which is sometimes needed by CSS "
"frameworks for styling."
msgstr ""

#: src/metadata.md:33
msgid ""
"`<Body/>` and `<Html/>` both also have `attributes` props which can be used "
"to set any number of additional attributes on them via the `attr:` syntax:"
msgstr ""

#: src/metadata.md:37
msgid "\"he\""
msgstr ""

#: src/metadata.md:38
msgid "\"rtl\""
msgstr ""

#: src/metadata.md:39
msgid "\"dark\""
msgstr ""

#: src/metadata.md:43
msgid "Metadata and Server Rendering"
msgstr ""

#: src/metadata.md:45
msgid ""
"Now, some of this is useful in any scenario, but some of it is especially "
"important for search-engine optimization (SEO). Making sure you have things "
"like appropriate `<title>` and `<meta>` tags is crucial. Modern search "
"engine crawlers do handle client-side rendering, i.e., apps that are shipped "
"as an empty `index.html` and rendered entirely in JS/WASM. But they prefer "
"to receive pages in which your app has been rendered to actual HTML, with "
"metadata in the `<head>`."
msgstr ""

#: src/metadata.md:47
msgid ""
"This is exactly what `leptos_meta` is for. And in fact, during server "
"rendering, this is exactly what it does: collect all the `<head>` content "
"you’ve declared by using its components throughout your application, and "
"then inject it into the actual `<head>`."
msgstr ""

#: src/metadata.md:49
msgid ""
"But I’m getting ahead of myself. We haven’t actually talked about server-"
"side rendering yet. As a matter of fact... Let’s do that next!"
msgstr ""

#: src/web_sys.md:1
msgid ""
"Integrating with JavaScript: `wasm-bindgen`, `web_sys` and `HtmlElement`"
msgstr ""

#: src/web_sys.md:3
msgid ""
"Leptos provides a variety of tools to allow you to build declarative web "
"applications without leaving the world  of the framework. Things like the "
"reactive system, `component` and `view` macros, and router allow you to "
"build  user interfaces without directly interacting with the Web APIs "
"provided by the browser. And they let you do it  all directly in Rust, which "
"is great—assuming you like Rust. (And if you’ve gotten this far in the book, "
"we assume  you like Rust.)"
msgstr ""

#: src/web_sys.md:9
msgid ""
"Ecosystem crates like the fantastic set of utilities provided by [`leptos-"
"use`](https://leptos-use.rs/) can take you  even further, by providing "
"Leptos-specific reactive wrappers around many Web APIs."
msgstr ""

#: src/web_sys.md:12
msgid ""
"Nevertheless, in many cases you will need to access JavaScript libraries or "
"Web APIs directly. This chapter can help."
msgstr ""

#: src/web_sys.md:14
msgid "Using JS Libraries with `wasm-bindgen`"
msgstr ""

#: src/web_sys.md:16
msgid ""
"Your Rust code can be compiled to a WebAssembly (WASM) module and loaded to "
"run in the browser. However, WASM does not  have direct access to browser "
"APIs. Instead, the Rust/WASM ecosystem depends on generating bindings from "
"your Rust code  to the JavaScript browser environment that hosts it. "
msgstr ""

#: src/web_sys.md:20
msgid ""
"The [`wasm-bindgen`](https://rustwasm.github.io/docs/wasm-bindgen/) crate is "
"at the center of that ecosystem. It provides  both an interface for marking "
"parts of Rust code with annotations telling it how to call JS, and a CLI "
"tool for generating  the necessary JS glue code. You’ve been using this "
"without knowing it all along: both `trunk` and `cargo-leptos` rely on  `wasm-"
"bindgen` under the hood."
msgstr ""

#: src/web_sys.md:25
msgid ""
"If there is a JavaScript library that you want to call from Rust, you should "
"refer to the `wasm-bindgen` docs on  [importing functions from JS](https://"
"rustwasm.github.io/docs/wasm-bindgen/examples/import-js.html). It is "
"relatively  easy to import individual functions, classes, or values from "
"JavaScript to use in your Rust app."
msgstr ""

#: src/web_sys.md:29
msgid ""
"It is not always easy to integrate JS libraries into your app directly. In "
"particular, any library that depends on a  particular JS framework like "
"React may be hard to integrated. Libraries that manipulate DOM state in some "
"way (for example,  rich text editors) should also be used with care: both "
"Leptos and the JS library will probably assume that they are  the ultimate "
"source of truth for the app’s state, so you should be careful to separate "
"their responsibilities."
msgstr ""

#: src/web_sys.md:34
msgid "Acccessing Web APIs with `web-sys`"
msgstr ""

#: src/web_sys.md:36
msgid ""
"If you just need to access some browser APIs without pulling in a separate "
"JS library, you can do so using the  [`web_sys`](https://docs.rs/web-sys/"
"latest/web_sys/) crate. This provides bindings for all of the Web APIs "
"provided by  the browser, with 1:1 mappings from browser types and functions "
"to Rust structs and methods."
msgstr ""

#: src/web_sys.md:40
msgid ""
"In general, if you’re asking “how do I _do X_ with Leptos?” where _do X_ is "
"accessing some Web API, looking up a vanilla JavaScript solution and "
"translating it to Rust using the [`web-sys` docs](https://docs.rs/web-sys/"
"latest/web_sys/) is a  good approach."
msgstr ""

#: src/web_sys.md:45
msgid ""
"After this section, you might find  [the `wasm-bindgen` guide chapter on "
"`web-sys`](https://rustwasm.github.io/docs/wasm-bindgen/web-sys/index.html)  "
"useful for additional reading."
msgstr ""

#: src/web_sys.md:49
msgid "Enabling features"
msgstr ""

#: src/web_sys.md:51
msgid ""
"`web_sys` is heavily feature-gated to keep compile times low. If you would "
"like to use one of its many APIs, you may  need to enable a feature to use "
"it."
msgstr ""

#: src/web_sys.md:54
msgid ""
"The features required to use an item are always listed in its documentation. "
"For example, to use [`Element::get_bounding_rect_client`](https://docs.rs/"
"web-sys/latest/web_sys/struct.Element.html#method.get_bounding_client_rect), "
"you need to enable the `DomRect` and `Element` features."
msgstr ""

#: src/web_sys.md:57
msgid ""
"Leptos already enables [a whole bunch](https://github.com/leptos-rs/leptos/"
"blob/main/leptos_dom/Cargo.toml#L41) of features - if the required feature "
"is already enabled here, you won't have to enable it in your own app. "
"Otherwise, add it to your `Cargo.toml` and you’re good to go!"
msgstr ""

#: src/web_sys.md:60
msgid ""
"```toml\n"
"[dependencies.web-sys]\n"
"version = \"0.3\"\n"
"features = [\"DomRect\"]\n"
"```"
msgstr ""

#: src/web_sys.md:66
msgid ""
"However, as the JavaScript standard evolves and APIs are being written, you "
"may want to use browser features that are technically not fully stable yet, "
"such as [WebGPU](https://docs.rs/web-sys/latest/web_sys/struct.Gpu.html). "
"`web_sys` will follow the (potentially frequently changing) standard, which "
"means that no stability guarantees are made."
msgstr ""

#: src/web_sys.md:69
msgid ""
"In order to use this, you need to add `RUSTFLAGS=--"
"cfg=web_sys_unstable_apis` as an environment variable. This can either be "
"done by adding it to every command, or add it to `.cargo/config.toml` in "
"your repository."
msgstr ""

#: src/web_sys.md:72
msgid "As part of a command:"
msgstr ""

#: src/web_sys.md:74
msgid "--cfg=web_sys_unstable_apis"
msgstr ""

#: src/web_sys.md:74
msgid "# ...\n"
msgstr ""

#: src/web_sys.md:77
msgid "In `.cargo/config.toml`:"
msgstr ""

#: src/web_sys.md:78
msgid ""
"```toml\n"
"[env]\n"
"RUSTFLAGS = \"--cfg=web_sys_unstable_apis\"\n"
"```"
msgstr ""

#: src/web_sys.md:83
msgid "Accessing raw `HtmlElement`s from your `view`"
msgstr ""

#: src/web_sys.md:85
msgid ""
"The declarative style of the framework means that you don’t need to directly "
"manipulate DOM nodes to build up your user interface.  However, in some "
"cases you want direct access to the underlying DOM element that represents "
"part of your view. The section of the book  on [“uncontrolled inputs”](/"
"view/05_forms.html?highlight=NodeRef#uncontrolled-inputs) showed how to do "
"this using the  [`NodeRef`](https://docs.rs/leptos/latest/leptos/struct."
"NodeRef.html) type."
msgstr ""

#: src/web_sys.md:90
msgid ""
"You may notice that [`NodeRef::get`](https://docs.rs/leptos/latest/leptos/"
"struct.NodeRef.html#method.get) returns an `Option<leptos::HtmlElement<T>>`. "
"This is _not_ the same type as a [`web_sys::HtmlElement`](https://docs.rs/"
"web-sys/latest/web_sys/struct.HtmlElement.html), although they  are related. "
"So what is this [`HtmlElement<T>`](https://docs.rs/leptos/latest/leptos/"
"struct.HtmlElement.html) type, and how do you use it?"
msgstr ""

#: src/web_sys.md:93 src/islands.md:368
msgid "Overview"
msgstr ""

#: src/web_sys.md:95
msgid ""
"`web_sys::HtmlElement` is the Rust equivalent of the browser’s "
"[`HTMLElement`](https://developer.mozilla.org/en-US/docs/Web/API/"
"HTMLElement)  interface, which is implemented for all HTML elements. It "
"provides access to a minimal set of functions and APIs that are guaranteed "
"to be  available for any HTML element. Each particular HTML element then has "
"its own element class, which implements additional functionality.  The goal "
"of `leptos::HtmlElement<T>` is to bridge the gap between elements in your "
"view and these more specific JavaScript types, so that you can access the "
"particular functionality of those elements."
msgstr ""

#: src/web_sys.md:101
msgid ""
"This is implement by using the Rust `Deref` trait to allow you to "
"dereference a `leptos::HtmlElement<T>` to the appropriately-typed JS object "
"for that particular element type `T`."
msgstr ""

#: src/web_sys.md:104
msgid "Definition"
msgstr ""

#: src/web_sys.md:106
msgid ""
"Understanding this relationship involves understanding some related traits."
msgstr ""

#: src/web_sys.md:108
msgid ""
"The following simply defines what types are allowed inside the `T` of "
"`leptos::HtmlElement<T>` and how it links to `web_sys`."
msgstr ""

#: src/web_sys.md:117
msgid ""
"// this is implemented for every single element in `leptos::{html, svg, "
"math}::*`\n"
msgstr ""

#: src/web_sys.md:120
msgid ""
"// same with this, derefs to the corresponding `web_sys::Html*Element`\n"
msgstr ""

#: src/web_sys.md:128
msgid "The following is from `web_sys`:"
msgstr ""

#: src/web_sys.md:151
msgid ""
"`web_sys` uses long deref chains to emulate the inheritance used in "
"JavaScript. If you can't find the method you're looking for on one type, "
"take a look further down the deref chain. The `leptos::html::*` types all "
"deref into `web_sys::Html*Element` or `web_sys::HtmlElement`. By calling "
"`element.method()`, Rust will automatically add more derefs as needed to "
"call the correct method!"
msgstr ""

#: src/web_sys.md:156
msgid ""
"However, some methods have the same name, such as [`leptos::HtmlElement::"
"style`](https://docs.rs/leptos/latest/leptos/struct.HtmlElement.html#method."
"style) and [`web_sys::HtmlElement::style`](https://docs.rs/web-sys/latest/"
"web_sys/struct.HtmlElement.html#method.style). In these cases, Rust will "
"pick the one that requires the least amount of derefs, which is `leptos::"
"HtmlElement::style` if you're getting an element straight from a `NodeRef`. "
"If you wish to use the `web_sys` method instead, you can manually deref with "
"`(*element).style()`."
msgstr ""

#: src/web_sys.md:160
msgid ""
"If you want to have even more control over which type you are calling a "
"method from, `AsRef<T>` is implemented for all types that are part of the "
"deref chain, so you can explicitly state which type you want."
msgstr ""

#: src/web_sys.md:162
msgid ""
"See also: [The `wasm-bindgen` Guide: Inheritance in `web-sys`](https://"
"rustwasm.github.io/wasm-bindgen/web-sys/inheritance.html)."
msgstr ""

#: src/web_sys.md:164
msgid "Clones"
msgstr ""

#: src/web_sys.md:166
msgid ""
"The `web_sys::HtmlElement` (and by extension the `leptos::HtmlElement` too) "
"actually only store references to the HTML element it affects. Therefore, "
"calling `.clone()` doesn't actually make a new HTML element, it simply gets "
"another reference to the same one. Calling methods that change the element "
"from any of its clones will affect the original element."
msgstr ""

#: src/web_sys.md:170
msgid ""
"Unfortunately, `web_sys::HtmlElement` does not implement `Copy`, so you may "
"need to add a bunch of clones especially when using it in closures. Don't "
"worry though, these clones are cheap!"
msgstr ""

#: src/web_sys.md:173
msgid "Casting"
msgstr ""

#: src/web_sys.md:175
msgid ""
"You can get less specific types through `Deref` or `AsRef`, so use those "
"when possible. However, if you need to cast to a more specific type (e.g. "
"from an `EventTarget` to a `HtmlInputElement`), you will need to use the "
"methods provided by `wasm_bindgen::JsCast` (re-exported through `web_sys::"
"wasm_bindgen::JsCast`). You'll probably only need the [`dyn_ref`](https://"
"docs.rs/wasm-bindgen/0.2.90/wasm_bindgen/trait.JsCast.html#method.dyn_ref) "
"method."
msgstr ""

#: src/web_sys.md:184
msgid "// or, just use the existing `leptos::event_target_*` functions\n"
msgstr ""

#: src/web_sys.md:188
msgid ""
"See the [`event_target_*` functions here](https://docs.rs/leptos/latest/"
"leptos/fn.event_target.html?search=event_target), if you're curious."
msgstr ""

#: src/web_sys.md:190
msgid "`leptos::HtmlElement`"
msgstr ""

#: src/web_sys.md:192
msgid ""
"The [`leptos::HtmlElement`](https://docs.rs/leptos/latest/leptos/struct."
"HtmlElement.html) adds some extra convenience methods to make it easier to "
"manipulate common attributes. These methods were built for the [builder "
"syntax](./view/builder.md), so it takes and returns `self`. You can just do "
"`_ = element.clone().<method>()` to ignore the element it returns - it'll "
"still affect the original element, even though it doesn't look like it (see "
"previous section on [Clones](#clones))!"
msgstr ""

#: src/web_sys.md:196
msgid ""
"Here are some of the common methods you may want to use, for example in "
"event listeners or `use:` directives."
msgstr ""

#: src/web_sys.md:197
msgid ""
"[`id`](https://docs.rs/leptos/latest/leptos/struct.HtmlElement.html#method."
"id): _overwrites_ the id on the element."
msgstr ""

#: src/web_sys.md:198
msgid ""
"[`classes`](https://docs.rs/leptos/latest/leptos/struct.HtmlElement."
"html#method.classes): _adds_ the classes to the element. You can specify "
"multiple classes with a space-separated string. You can also use [`class`]"
"(https://docs.rs/leptos/latest/leptos/struct.HtmlElement.html#method.class) "
"to conditionally add a _single_ class: do not add multiple with this method."
msgstr ""

#: src/web_sys.md:201
msgid ""
"[`attr`](https://docs.rs/leptos/latest/leptos/struct.HtmlElement.html#method."
"attr): sets a `key=value` attribute to the element."
msgstr ""

#: src/web_sys.md:202
msgid ""
"[`prop`](https://docs.rs/leptos/latest/leptos/struct.HtmlElement.html#method."
"prop): sets a _property_ on the element: see the distinction between "
"[properties and attributes here](./view/05_forms.md#why-do-you-need-"
"propvalue)."
msgstr ""

#: src/web_sys.md:203
msgid ""
"[`on`](https://docs.rs/leptos/latest/leptos/struct.HtmlElement.html#method."
"on): adds an event listener to the element. Specify the event type through "
"one of [`leptos::ev::*`](https://docs.rs/leptos/latest/leptos/ev/index.html) "
"(it's the ones in all lowercase)."
msgstr ""

#: src/web_sys.md:205
msgid ""
"[`child`](https://docs.rs/leptos/latest/leptos/struct.HtmlElement."
"html#method.child): adds an element as the last child of the element."
msgstr ""

#: src/web_sys.md:207
msgid ""
"Take a look at the rest of the [`leptos::HtmlElement`](https://docs.rs/"
"leptos/latest/leptos/struct.HtmlElement.html) methods too. If none of them "
"fit your requirements, also take a look at [`leptos-use`](https://leptos-use."
"rs/). Otherwise, you’ll have to use the `web_sys` APIs."
msgstr ""

#: src/csr_wrapping_up.md:1
msgid "Wrapping Up Part 1: Client-Side Rendering"
msgstr ""

#: src/csr_wrapping_up.md:3
msgid ""
"So far, everything we’ve written has been rendered almost entirely in the "
"browser. When we create an app using Trunk, it’s served using a local "
"development server. If you build it for production and deploy it, it’s "
"served by whatever server or CDN you’re using. In either case, what’s served "
"is an HTML page with"
msgstr ""

#: src/csr_wrapping_up.md:5
msgid ""
"the URL of your Leptos app, which has been compiled to WebAssembly (WASM)"
msgstr ""

#: src/csr_wrapping_up.md:6
msgid "the URL of the JavaScript used to initialize this WASM blob"
msgstr ""

#: src/csr_wrapping_up.md:7
msgid "an empty `<body>` element"
msgstr ""

#: src/csr_wrapping_up.md:9
msgid ""
"When the JS and WASM have loaded, Leptos will render your app into the "
"`<body>`. This means that nothing appears on the screen until JS/WASM have "
"loaded and run. This has some drawbacks:"
msgstr ""

#: src/csr_wrapping_up.md:11
msgid ""
"It increases load time, as your user’s screen is blank until additional "
"resources have been downloaded."
msgstr ""

#: src/csr_wrapping_up.md:12
msgid ""
"It’s bad for SEO, as load times are longer and the HTML you serve has no "
"meaningful content."
msgstr ""

#: src/csr_wrapping_up.md:13
msgid ""
"It’s broken for users for whom JS/WASM don’t load for some reason (e.g., "
"they’re on a train and just went into a tunnel before WASM finished loading; "
"they’re using an older device that doesn’t support WASM; they have "
"JavaScript or WASM turned off for some reason; etc.)"
msgstr ""

#: src/csr_wrapping_up.md:15
msgid ""
"These downsides apply across the web ecosystem, but especially to WASM apps."
msgstr ""

#: src/csr_wrapping_up.md:17
msgid ""
"However, depending the on the requirements of your project, you may be fine "
"with these limitations."
msgstr ""

#: src/csr_wrapping_up.md:19
msgid ""
"If you just want to deploy your Client-Side Rendered website, skip ahead to "
"the chapter on [\"Deployment\"](https://leptos-rs.github.io/leptos/"
"deployment/index.html) - there, you'll find directions on how best to deploy "
"your Leptos CSR site."
msgstr ""

#: src/csr_wrapping_up.md:22
msgid ""
"But what do you do if you want to return more than just an empty `<body>` "
"tag in your `index.html` page? Use “Server-Side Rendering”!"
msgstr ""

#: src/csr_wrapping_up.md:24
msgid ""
"Whole books could be (and probably have been) written about this topic, but "
"at its core, it’s really simple: rather than returning an empty `<body>` "
"tag, with SSR, you'll return an initial HTML page that reflects the actual "
"starting state of your app or site, so that while JS/WASM are loading, and "
"until they load, the user can access the plain HTML version."
msgstr ""

#: src/csr_wrapping_up.md:26
msgid ""
"Part 2 of this book, on Leptos SSR, will cover this topic in some detail!"
msgstr ""

#: src/ssr/index.md:3
msgid ""
"The second part of the book is all about how to turn your beautiful UIs into "
"full-stack Rust + Leptos powered websites and applications."
msgstr ""

#: src/ssr/index.md:5
msgid ""
"As you read in the last chapter, there are some limitations to using client-"
"side rendered Leptos apps - over the next few chapters, you'll see how we "
"can overcome those limitations and get the best performance and SEO out of "
"your Leptos apps."
msgstr ""

#: src/ssr/21_cargo_leptos.md:1
msgid "Introducing `cargo-leptos`"
msgstr ""

#: src/ssr/21_cargo_leptos.md:3
msgid ""
"So far, we’ve just been running code in the browser and using Trunk to "
"coordinate the build process and run a local development process. If we’re "
"going to add server-side rendering, we’ll need to run our application code "
"on the server as well. This means we’ll need to build two separate binaries, "
"one compiled to native code and running the server, the other compiled to "
"WebAssembly (WASM) and running in the user’s browser. Additionally, the "
"server needs to know how to serve this WASM version (and the JavaScript "
"required to initialize it) to the browser."
msgstr ""

#: src/ssr/21_cargo_leptos.md:5
msgid ""
"This is not an insurmountable task but it adds some complication. For "
"convenience and an easier developer experience, we built the [`cargo-leptos`]"
"(https://github.com/leptos-rs/cargo-leptos) build tool. `cargo-leptos` "
"basically exists to coordinate the build process for your app, handling "
"recompiling the server and client halves when you make changes, and adding "
"some built-in support for things like Tailwind, SASS, and testing."
msgstr ""

#: src/ssr/21_cargo_leptos.md:7
msgid "Getting started is pretty easy. Just run"
msgstr ""

#: src/ssr/21_cargo_leptos.md:13
msgid "And then to create a new project, you can run either"
msgstr ""

#: src/ssr/21_cargo_leptos.md:16
msgid "# for an Actix template\n"
msgstr ""

#: src/ssr/21_cargo_leptos.md:20
msgid "or"
msgstr ""

#: src/ssr/21_cargo_leptos.md:23
msgid "# for an Axum template\n"
msgstr ""

#: src/ssr/21_cargo_leptos.md:27
msgid "Now `cd` into the directory you’ve created and run"
msgstr ""

#: src/ssr/21_cargo_leptos.md:33
msgid ""
"**Note**: Remember that Leptos has a `nightly` feature, which each of these "
"starters use. If you're using the stable Rust compiler, that’s fine; just "
"remove the `nightly` feature from each of the Leptos dependencies in your "
"new `Cargo.toml` and you should be all set. "
msgstr ""

#: src/ssr/21_cargo_leptos.md:36
msgid ""
"Once your app has compiled you can open up your browser to [`http://"
"localhost:3000`](http://localhost:3000) to see it."
msgstr ""

#: src/ssr/21_cargo_leptos.md:38
msgid ""
"`cargo-leptos` has lots of additional features and built in tools. You can "
"learn more [in its `README`](https://github.com/leptos-rs/cargo-leptos/blob/"
"main/README.md)."
msgstr ""

#: src/ssr/21_cargo_leptos.md:40
msgid ""
"But what exactly is happening when you open our browser to `localhost:3000`? "
"Well, read on to find out."
msgstr ""

#: src/ssr/22_life_cycle.md:3
msgid ""
"Before we get into the weeds it might be helpful to have a higher-level "
"overview. What exactly happens between the moment you type in the URL of a "
"server-rendered Leptos app, and the moment you click a button and a counter "
"increases?"
msgstr ""

#: src/ssr/22_life_cycle.md:5
msgid ""
"I’m assuming some basic knowledge of how the Internet works here, and won’t "
"get into the weeds about HTTP or whatever. Instead, I’ll try to show how "
"different parts of the Leptos APIs map onto each part of the process."
msgstr ""

#: src/ssr/22_life_cycle.md:7
msgid ""
"This description also starts from the premise that your app is being "
"compiled for two separate targets:"
msgstr ""

#: src/ssr/22_life_cycle.md:9
msgid ""
"A server version, often running on Actix or Axum, compiled with the Leptos "
"`ssr` feature"
msgstr ""

#: src/ssr/22_life_cycle.md:10
msgid ""
"A browser version, compiled to WebAssembly (WASM) with the Leptos `hydrate` "
"feature"
msgstr ""

#: src/ssr/22_life_cycle.md:12
msgid ""
"The [`cargo-leptos`](https://github.com/leptos-rs/cargo-leptos) build tool "
"exists to coordinate the process of compiling your app for these two "
"different targets."
msgstr ""

#: src/ssr/22_life_cycle.md:14
msgid "On the Server"
msgstr ""

#: src/ssr/22_life_cycle.md:16
msgid ""
"Your browser makes a `GET` request for that URL to your server. At this "
"point, the browser knows almost nothing about the page that’s going to be "
"rendered. (The question “How does the browser know where to ask for the "
"page?” is an interesting one, but out of the scope of this tutorial!)"
msgstr ""

#: src/ssr/22_life_cycle.md:17
msgid ""
"The server receives that request, and checks whether it has a way to handle "
"a `GET` request at that path. This is what the `.leptos_routes()` methods in "
"[`leptos_axum`](https://docs.rs/leptos_axum/0.2.5/leptos_axum/trait."
"LeptosRoutes.html) and [`leptos_actix`](https://docs.rs/leptos_actix/0.2.5/"
"leptos_actix/trait.LeptosRoutes.html) are for. When the server starts up, "
"these methods walk over the routing structure you provide in `<Routes/>`, "
"generating a list of all possible routes your app can handle and telling the "
"server’s router “for each of these routes, if you get a request... hand it "
"off to Leptos.”"
msgstr ""

#: src/ssr/22_life_cycle.md:18
msgid ""
"The server sees that this route can be handled by Leptos. So it renders your "
"root component (often called something like `<App/>`), providing it with the "
"URL that’s being requested and some other data like the HTTP headers and "
"request metadata."
msgstr ""

#: src/ssr/22_life_cycle.md:19
msgid ""
"Your application runs once on the server, building up an HTML version of the "
"component tree that will be rendered at that route. (There’s more to be said "
"here about resources and `<Suspense/>` in the next chapter.)"
msgstr ""

#: src/ssr/22_life_cycle.md:20
msgid ""
"The server returns this HTML page, also injecting information on how to load "
"the version of your app that has been compiled to WASM so that it can run in "
"the browser."
msgstr ""

#: src/ssr/22_life_cycle.md:22
msgid ""
"The HTML page that’s returned is essentially your app, “dehydrated” or "
"“freeze-dried”: it is HTML without any of the reactivity or event listeners "
"you’ve added. The browser will “rehydrate” this HTML page by adding the "
"reactive system and attaching event listeners to that server-rendered HTML. "
"Hence the two feature flags that apply to the two halves of this process: "
"`ssr` on the server for “server-side rendering”, and `hydrate` in the "
"browser for that process of rehydration."
msgstr ""

#: src/ssr/22_life_cycle.md:24
msgid "In the Browser"
msgstr ""

#: src/ssr/22_life_cycle.md:26
msgid ""
"The browser receives this HTML page from the server. It immediately goes "
"back to the server to begin loading the JS and WASM necessary to run the "
"interactive, client side version of the app."
msgstr ""

#: src/ssr/22_life_cycle.md:27
msgid "In the meantime, it renders the HTML version."
msgstr ""

#: src/ssr/22_life_cycle.md:28
msgid ""
"When the WASM version has reloaded, it does the same route-matching process "
"that the server did. Because the `<Routes/>` component is identical on the "
"server and in the client, the browser version will read the URL and render "
"the same page that was already returned by the server."
msgstr ""

#: src/ssr/22_life_cycle.md:29
msgid ""
"During this initial “hydration” phase, the WASM version of your app doesn’t "
"re-create the DOM nodes that make up your application. Instead, it walks "
"over the existing HTML tree, “picking up” existing elements and adding the "
"necessary interactivity."
msgstr ""

#: src/ssr/22_life_cycle.md:31
msgid ""
"Note that there are some trade-offs here. Before this hydration process is "
"complete, the page will _appear_ interactive but won’t actually respond to "
"interactions. For example, if you have a counter button and click it before "
"WASM has loaded, the count will not increment, because the necessary event "
"listeners and reactivity have not been added yet. We’ll look at some ways to "
"build in “graceful degradation” in future chapters."
msgstr ""

#: src/ssr/22_life_cycle.md:33
msgid "Client-Side Navigation"
msgstr ""

#: src/ssr/22_life_cycle.md:35
msgid ""
"The next step is very important. Imagine that the user now clicks a link to "
"navigate to another page in your application."
msgstr ""

#: src/ssr/22_life_cycle.md:37
msgid ""
"The browser will _not_ make another round trip to the server, reloading the "
"full page as it would for navigating between plain HTML pages or an "
"application that uses server rendering (for example with PHP) but without a "
"client-side half."
msgstr ""

#: src/ssr/22_life_cycle.md:39
msgid ""
"Instead, the WASM version of your app will load the new page, right there in "
"the browser, without requesting another page from the server. Essentially, "
"your app upgrades itself from a server-loaded “multi-page app” into a "
"browser-rendered “single-page app.” This yields the best of both worlds: a "
"fast initial load time due to the server-rendered HTML, and fast secondary "
"navigations because of the client-side routing."
msgstr ""

#: src/ssr/22_life_cycle.md:41
msgid ""
"Some of what will be described in the following chapters—like the "
"interactions between server functions, resources, and `<Suspense/>`—may seem "
"overly complicated. You might find yourself asking, “If my page is being "
"rendered to HTML on the server, why can’t I just `.await` this on the "
"server? If I can just call library X in a server function, why can’t I call "
"it in my component?” The reason is pretty simple: to enable the upgrade from "
"server rendering to client rendering, everything in your application must be "
"able to run either on the server or in the browser."
msgstr ""

#: src/ssr/22_life_cycle.md:43
msgid ""
"This is not the only way to create a website or web framework, of course. "
"But it’s the most common way, and we happen to think it’s quite a good way, "
"to create the smoothest possible experience for your users."
msgstr ""

#: src/ssr/23_ssr_modes.md:3
msgid ""
"Server-rendering a page that uses only synchronous data is pretty simple: "
"You just walk down the component tree, rendering each element to an HTML "
"string. But this is a pretty big caveat: it doesn’t answer the question of "
"what we should do with pages that includes asynchronous data, i.e., the sort "
"of stuff that would be rendered under a `<Suspense/>` node on the client."
msgstr ""

#: src/ssr/23_ssr_modes.md:5
msgid ""
"When a page loads async data that it needs to render, what should we do? "
"Should we wait for all the async data to load, and then render everything at "
"once? (Let’s call this “async” rendering) Should we go all the way in the "
"opposite direction, just sending the HTML we have immediately down to the "
"client and letting the client load the resources and fill them in? (Let’s "
"call this “synchronous” rendering) Or is there some middle-ground solution "
"that somehow beats them both? (Hint: There is.)"
msgstr ""

#: src/ssr/23_ssr_modes.md:7
msgid ""
"If you’ve ever listened to streaming music or watched a video online, I’m "
"sure you realize that HTTP supports streaming, allowing a single connection "
"to send chunks of data one after another without waiting for the full "
"content to load. You may not realize that browsers are also really good at "
"rendering partial HTML pages. Taken together, this means that you can "
"actually enhance your users’ experience by **streaming HTML**: and this is "
"something that Leptos supports out of the box, with no configuration at all. "
"And there’s actually more than one way to stream HTML: you can stream the "
"chunks of HTML that make up your page in order, like frames of a video, or "
"you can stream them... well, out of order."
msgstr ""

#: src/ssr/23_ssr_modes.md:9
msgid "Let me say a little more about what I mean."
msgstr ""

#: src/ssr/23_ssr_modes.md:11
msgid ""
"Leptos supports all the major ways of rendering HTML that includes "
"asynchronous data:"
msgstr ""

#: src/ssr/23_ssr_modes.md:13
msgid "[Synchronous Rendering](#synchronous-rendering)"
msgstr ""

#: src/ssr/23_ssr_modes.md:14
msgid "[Async Rendering](#async-rendering)"
msgstr ""

#: src/ssr/23_ssr_modes.md:15
msgid "[In-Order streaming](#in-order-streaming)"
msgstr ""

#: src/ssr/23_ssr_modes.md:16
msgid ""
"[Out-of-Order Streaming](#out-of-order-streaming) (and a partially-blocked "
"variant)"
msgstr ""

#: src/ssr/23_ssr_modes.md:18
msgid "Synchronous Rendering"
msgstr ""

#: src/ssr/23_ssr_modes.md:20
msgid ""
"**Synchronous**: Serve an HTML shell that includes `fallback` for any "
"`<Suspense/>`. Load data on the client using `create_local_resource`, "
"replacing `fallback` once resources are loaded."
msgstr ""

#: src/ssr/23_ssr_modes.md:22
msgid ""
"_Pros_: App shell appears very quickly: great TTFB (time to first byte)."
msgstr ""

#: src/ssr/23_ssr_modes.md:23 src/ssr/23_ssr_modes.md:51
#: src/ssr/23_ssr_modes.md:75
msgid "_Cons_"
msgstr ""

#: src/ssr/23_ssr_modes.md:24
msgid ""
"Resources load relatively slowly; you need to wait for JS + WASM to load "
"before even making a request."
msgstr ""

#: src/ssr/23_ssr_modes.md:25
msgid ""
"No ability to include data from async resources in the `<title>` or other "
"`<meta>` tags, hurting SEO and things like social media link previews."
msgstr ""

#: src/ssr/23_ssr_modes.md:27
msgid ""
"If you’re using server-side rendering, the synchronous mode is almost never "
"what you actually want, from a performance perspective. This is because it "
"misses out on an important optimization. If you’re loading async resources "
"during server rendering, you can actually begin loading the data on the "
"server. Rather than waiting for the client to receive the HTML response, "
"then loading its JS + WASM, _then_ realize it needs the resources and begin "
"loading them, server rendering can actually begin loading the resources when "
"the client first makes the response. In this sense, during server rendering "
"an async resource is like a `Future` that begins loading on the server and "
"resolves on the client. As long as the resources are actually serializable, "
"this will always lead to a faster total load time."
msgstr ""

#: src/ssr/23_ssr_modes.md:29
msgid ""
"This is why [`create_resource`](https://docs.rs/leptos/latest/leptos/fn."
"create_resource.html) requires resources data to be serializable by default, "
"and why you need to explicitly use [`create_local_resource`](https://docs.rs/"
"leptos/latest/leptos/fn.create_local_resource.html) for any async data that "
"is not serializable and should therefore only be loaded in the browser "
"itself. Creating a local resource when you could create a serializable "
"resource is always a deoptimization."
msgstr ""

#: src/ssr/23_ssr_modes.md:31
msgid "Async Rendering"
msgstr ""

#: src/ssr/23_ssr_modes.md:37
msgid ""
"**`async`**: Load all resources on the server. Wait until all data are "
"loaded, and render HTML in one sweep."
msgstr ""

#: src/ssr/23_ssr_modes.md:39
msgid ""
"_Pros_: Better handling for meta tags (because you know async data even "
"before you render the `<head>`). Faster complete load than **synchronous** "
"because async resources begin loading on server."
msgstr ""

#: src/ssr/23_ssr_modes.md:40
msgid ""
"_Cons_: Slower load time/TTFB: you need to wait for all async resources to "
"load before displaying anything on the client. The page is totally blank "
"until everything is loaded."
msgstr ""

#: src/ssr/23_ssr_modes.md:42
msgid "In-Order Streaming"
msgstr ""

#: src/ssr/23_ssr_modes.md:48
msgid ""
"**In-order streaming**: Walk through the component tree, rendering HTML "
"until you hit a `<Suspense/>`. Send down all the HTML you’ve got so far as a "
"chunk in the stream, wait for all the resources accessed under the "
"`<Suspense/>` to load, then render it to HTML and keep walking until you hit "
"another `<Suspense/>` or the end of the page."
msgstr ""

#: src/ssr/23_ssr_modes.md:50
msgid ""
"_Pros_: Rather than a blank screen, shows at least _something_ before the "
"data are ready."
msgstr ""

#: src/ssr/23_ssr_modes.md:52
msgid ""
"Loads the shell more slowly than synchronous rendering (or out-of-order "
"streaming) because it needs to pause at every `<Suspense/>`."
msgstr ""

#: src/ssr/23_ssr_modes.md:53
msgid "Unable to show fallback states for `<Suspense/>`."
msgstr ""

#: src/ssr/23_ssr_modes.md:54
msgid ""
"Can’t begin hydration until the entire page has loaded, so earlier pieces of "
"the page will not be interactive until the suspended chunks have loaded."
msgstr ""

#: src/ssr/23_ssr_modes.md:56
msgid "Out-of-Order Streaming"
msgstr ""

#: src/ssr/23_ssr_modes.md:62
msgid ""
"**Out-of-order streaming**: Like synchronous rendering, serve an HTML shell "
"that includes `fallback` for any `<Suspense/>`. But load data on the "
"**server**, streaming it down to the client as it resolves, and streaming "
"down HTML for `<Suspense/>` nodes, which is swapped in to replace the "
"fallback."
msgstr ""

#: src/ssr/23_ssr_modes.md:64
msgid "_Pros_: Combines the best of **synchronous** and **`async`**."
msgstr ""

#: src/ssr/23_ssr_modes.md:65
msgid ""
"Fast initial response/TTFB because it immediately sends the whole "
"synchronous shell"
msgstr ""

#: src/ssr/23_ssr_modes.md:66
msgid "Fast total time because resources begin loading on the server."
msgstr ""

#: src/ssr/23_ssr_modes.md:67
msgid ""
"Able to show the fallback loading state and dynamically replace it, instead "
"of showing blank sections for un-loaded data."
msgstr ""

#: src/ssr/23_ssr_modes.md:68
msgid ""
"_Cons_: Requires JavaScript to be enabled for suspended fragments to appear "
"in correct order. (This small chunk of JS streamed down in a `<script>` tag "
"alongside the `<template>` tag that contains the rendered `<Suspense/>` "
"fragment, so it does not need to load any additional JS files.)"
msgstr ""

#: src/ssr/23_ssr_modes.md:70
msgid ""
"**Partially-blocked streaming**: “Partially-blocked” streaming is useful "
"when you have multiple separate `<Suspense/>` components on the page.  It is "
"triggered by setting `ssr=SsrMode::PartiallyBlocked` on a route, and "
"depending on blocking resources within the view.   If one of the `<Suspense/"
">` components reads from one or more “blocking resources” (see below), the "
"fallback will not be sent; rather, the server will wait until that "
"`<Suspense/>` has resolved and then replace the fallback with the resolved "
"fragment on the server, which means that it is included in the initial HTML "
"response and appears even if JavaScript is disabled or not supported. Other "
"`<Suspense/>` stream in out of order, similar to the `SsrMode::OutOfOrder` "
"default."
msgstr ""

#: src/ssr/23_ssr_modes.md:72
msgid ""
"This is useful when you have multiple `<Suspense/>` on the page, and one is "
"more important than the other: think of a blog post and comments, or product "
"information and reviews. It is _not_ useful if there’s only one `<Suspense/"
">`, or if every `<Suspense/>` reads from blocking resources. In those cases "
"it is a slower form of `async` rendering."
msgstr ""

#: src/ssr/23_ssr_modes.md:74
msgid ""
"_Pros_: Works if JavaScript is disabled or not supported on the user’s "
"device."
msgstr ""

#: src/ssr/23_ssr_modes.md:76
msgid "Slower initial response time than out-of-order."
msgstr ""

#: src/ssr/23_ssr_modes.md:77
msgid "Marginally overall response due to additional work on the server."
msgstr ""

#: src/ssr/23_ssr_modes.md:78
msgid "No fallback state shown."
msgstr ""

#: src/ssr/23_ssr_modes.md:80
msgid "Using SSR Modes"
msgstr ""

#: src/ssr/23_ssr_modes.md:82
msgid ""
"Because it offers the best blend of performance characteristics, Leptos "
"defaults to out-of-order streaming. But it’s really simple to opt into these "
"different modes. You do it by adding an `ssr` property onto one or more of "
"your `<Route/>` components, like in the [`ssr_modes` example](https://github."
"com/leptos-rs/leptos/blob/main/examples/ssr_modes/src/app.rs)."
msgstr ""

#: src/ssr/23_ssr_modes.md:86 src/ssr/23_ssr_modes.md:143
msgid ""
"// We’ll load the home page with out-of-order streaming and <Suspense/>\n"
msgstr ""

#: src/ssr/23_ssr_modes.md:89 src/ssr/23_ssr_modes.md:146
msgid ""
"// We'll load the posts with async rendering, so they can set\n"
"\t// the title and metadata *after* loading the data\n"
msgstr ""

#: src/ssr/23_ssr_modes.md:92 src/ssr/23_ssr_modes.md:149
msgid "\"/post/:id\""
msgstr ""

#: src/ssr/23_ssr_modes.md:99
msgid ""
"For a path that includes multiple nested routes, the most restrictive mode "
"will be used: i.e., if even a single nested route asks for `async` "
"rendering, the whole initial request will be rendered `async`. `async` is "
"the most restricted requirement, followed by in-order, and then out-of-"
"order. (This probably makes sense if you think about it for a few minutes.)"
msgstr ""

#: src/ssr/23_ssr_modes.md:101
msgid "Blocking Resources"
msgstr ""

#: src/ssr/23_ssr_modes.md:103
msgid ""
"Any Leptos versions later than `0.2.5` (i.e., git main and `0.3.x` or later) "
"introduce a new resource primitive with `create_blocking_resource`. A "
"blocking resource still loads asynchronously like any other `async`/`.await` "
"in Rust; it doesn’t block a server thread or anything. Instead, reading from "
"a blocking resource under a `<Suspense/>` blocks the HTML _stream_ from "
"returning anything, including its initial synchronous shell, until that "
"`<Suspense/>` has resolved."
msgstr ""

#: src/ssr/23_ssr_modes.md:105
msgid ""
"Now from a performance perspective, this is not ideal. None of the "
"synchronous shell for your page will load until that resource is ready. "
"However, rendering nothing means that you can do things like set the "
"`<title>` or `<meta>` tags in your `<head>` in actual HTML. This sounds a "
"lot like `async` rendering, but there’s one big difference: if you have "
"multiple `<Suspense/>` sections, you can block on _one_ of them but still "
"render a placeholder and then stream in the other."
msgstr ""

#: src/ssr/23_ssr_modes.md:107
msgid ""
"For example, think about a blog post. For SEO and for social sharing, I "
"definitely want my blog post’s title and metadata in the initial HTML "
"`<head>`. But I really don’t care whether comments have loaded yet or not; "
"I’d like to load those as lazily as possible."
msgstr ""

#: src/ssr/23_ssr_modes.md:109
msgid "With blocking resources, I can do something like this:"
msgstr ""

#: src/ssr/23_ssr_modes.md:114 src/ssr/23_ssr_modes.md:115
msgid "/* load blog post */"
msgstr ""

#: src/ssr/23_ssr_modes.md:122
msgid "\"description\""
msgstr ""

#: src/ssr/23_ssr_modes.md:124
msgid "/* render the post content */"
msgstr ""

#: src/ssr/23_ssr_modes.md:130
msgid "\"Loading comments...\""
msgstr ""

#: src/ssr/23_ssr_modes.md:131
msgid "/* render comment data here */"
msgstr ""

#: src/ssr/23_ssr_modes.md:137
msgid ""
"The first `<Suspense/>`, with the body of the blog post, will block my HTML "
"stream, because it reads from a blocking resource.  Meta tags and other head "
"elements awaiting the blocking resource will be rendered before the stream "
"is sent."
msgstr ""

#: src/ssr/23_ssr_modes.md:139
msgid ""
"Combined with the following route definition, which uses `SsrMode::"
"PartiallyBlocked`, the blocking resource will be fully rendered on the "
"server side, making it accessible to users who disable WebAssembly or "
"JavaScript."
msgstr ""

#: src/ssr/23_ssr_modes.md:156
msgid ""
"The second `<Suspense/>`, with the comments, will not block the stream. "
"Blocking resources gave me exactly the power and granularity I needed to "
"optimize my page for SEO and user experience."
msgstr ""

#: src/ssr/24_hydration_bugs.md:1
msgid "Hydration Bugs _(and how to avoid them)_"
msgstr ""

#: src/ssr/24_hydration_bugs.md:3
msgid "A Thought Experiment"
msgstr ""

#: src/ssr/24_hydration_bugs.md:5
msgid ""
"Let’s try an experiment to test your intuitions. Open up an app you’re "
"server-rendering with `cargo-leptos`. (If you’ve just been using `trunk` so "
"far to play with examples, go [clone a `cargo-leptos` template]"
"(./21_cargo_leptos.md) just for the sake of this exercise.)"
msgstr ""

#: src/ssr/24_hydration_bugs.md:7
msgid ""
"Put a log somewhere in your root component. (I usually call mine `<App/>`, "
"but anything will do.)"
msgstr ""

#: src/ssr/24_hydration_bugs.md:12
msgid "\"where do I run?\""
msgstr ""

#: src/ssr/24_hydration_bugs.md:13
msgid "// ... whatever\n"
msgstr ""

#: src/ssr/24_hydration_bugs.md:17
msgid "And let’s fire it up"
msgstr ""

#: src/ssr/24_hydration_bugs.md:23
msgid "Where do you expect `where do I run?` to log?"
msgstr ""

#: src/ssr/24_hydration_bugs.md:25
msgid "In the command line where you’re running the server?"
msgstr ""

#: src/ssr/24_hydration_bugs.md:26
msgid "In the browser console when you load the page?"
msgstr ""

#: src/ssr/24_hydration_bugs.md:27
msgid "Neither?"
msgstr ""

#: src/ssr/24_hydration_bugs.md:28
msgid "Both?"
msgstr ""

#: src/ssr/24_hydration_bugs.md:30
msgid "Try it out."
msgstr ""

#: src/ssr/24_hydration_bugs.md:32 src/ssr/24_hydration_bugs.md:34
#: src/ssr/24_hydration_bugs.md:36
msgid "..."
msgstr ""

#: src/ssr/24_hydration_bugs.md:38
msgid "Okay, consider the spoiler alerted."
msgstr ""

#: src/ssr/24_hydration_bugs.md:40
msgid ""
"You’ll notice of course that it logs in both places, assuming everything "
"goes according to plan. In fact on the server it logs twice—first during the "
"initial server startup, when Leptos renders your app once to extract the "
"route tree, then a second time when you make a request. Each time you reload "
"the page, `where do I run?` should log once on the server and once on the "
"client."
msgstr ""

#: src/ssr/24_hydration_bugs.md:42
msgid ""
"If you think about the description in the last couple sections, hopefully "
"this makes sense. Your application runs once on the server, where it builds "
"up a tree of HTML which is sent to the client. During this initial render, "
"`where do I run?` logs on the server."
msgstr ""

#: src/ssr/24_hydration_bugs.md:44
msgid ""
"Once the WASM binary has loaded in the browser, your application runs a "
"second time, walking over the same user interface tree and adding "
"interactivity."
msgstr ""

#: src/ssr/24_hydration_bugs.md:46
msgid ""
"Does that sound like a waste? It is, in a sense. But reducing that waste is "
"a genuinely hard problem. It’s what some JS frameworks like Qwik are "
"intended to solve, although it’s probably too early to tell whether it’s a "
"net performance gain as opposed to other approaches."
msgstr ""

#: src/ssr/24_hydration_bugs.md:48
msgid "The Potential for Bugs"
msgstr ""

#: src/ssr/24_hydration_bugs.md:50
msgid ""
"Okay, hopefully all of that made sense. But what does it have to do with the "
"title of this chapter, which is “Hydration bugs (and how to avoid them)”?"
msgstr ""

#: src/ssr/24_hydration_bugs.md:52
msgid ""
"Remember that the application needs to run on both the server and the "
"client. This generates a few different sets of potential issues you need to "
"know how to avoid."
msgstr ""

#: src/ssr/24_hydration_bugs.md:54
msgid "Mismatches between server and client code"
msgstr ""

#: src/ssr/24_hydration_bugs.md:56
msgid ""
"One way to create a bug is by creating a mismatch between the HTML that’s "
"sent down by the server and what’s rendered on the client. It’s actually "
"fairly hard to do this unintentionally, I think (at least judging by the bug "
"reports I get from people.) But imagine I do something like this"
msgstr ""

#: src/ssr/24_hydration_bugs.md:61
msgid "\"wasm32\""
msgstr ""

#: src/ssr/24_hydration_bugs.md:72
msgid ""
"In other words, if this is being compiled to WASM, it has three items; "
"otherwise it’s empty."
msgstr ""

#: src/ssr/24_hydration_bugs.md:74
msgid ""
"When I load the page in the browser, I see nothing. If I open the console I "
"see a bunch of warnings:"
msgstr ""

#: src/ssr/24_hydration_bugs.md:84
msgid ""
"The WASM version of your app, running in the browser, expects to find three "
"items; but the HTML has none."
msgstr ""

#: src/ssr/24_hydration_bugs.md:88
msgid ""
"It’s pretty rare that you do this intentionally, but it could happen from "
"somehow running different logic on the server and in the browser. If you’re "
"seeing warnings like this and you don’t think it’s your fault, it’s much "
"more likely that it’s a bug with `<Suspense/>` or something. Feel free to go "
"ahead and open an [issue](https://github.com/leptos-rs/leptos/issues) or "
"[discussion](https://github.com/leptos-rs/leptos/discussions) on GitHub for "
"help."
msgstr ""

#: src/ssr/24_hydration_bugs.md:90
msgid "Not all client code can run on the server"
msgstr ""

#: src/ssr/24_hydration_bugs.md:92
msgid ""
"Imagine you happily import a dependency like `gloo-net` that you’ve been "
"used to using to make requests in the browser, and use it in a "
"`create_resource` in a server-rendered app."
msgstr ""

#: src/ssr/24_hydration_bugs.md:94
msgid "You’ll probably instantly see the dreaded message"
msgstr ""

#: src/ssr/24_hydration_bugs.md:100
msgid "Uh-oh."
msgstr ""

#: src/ssr/24_hydration_bugs.md:102
msgid ""
"But of course this makes sense. We’ve just said that your app needs to run "
"on the client and the server."
msgstr ""

#: src/ssr/24_hydration_bugs.md:106
msgid "There are a few ways to avoid this:"
msgstr ""

#: src/ssr/24_hydration_bugs.md:108
msgid ""
"Only use libraries that can run on both the server and the client. "
"`reqwest`, for example, works for making HTTP requests in both settings."
msgstr ""

#: src/ssr/24_hydration_bugs.md:109
msgid ""
"Use different libraries on the server and the client, and gate them using "
"the `#[cfg]` macro. ([Click here for an example](https://github.com/leptos-"
"rs/leptos/blob/main/examples/hackernews/src/api.rs).)"
msgstr ""

#: src/ssr/24_hydration_bugs.md:110
msgid ""
"Wrap client-only code in `create_effect`. Because `create_effect` only runs "
"on the client, this can be an effective way to access browser APIs that are "
"not needed for initial rendering."
msgstr ""

#: src/ssr/24_hydration_bugs.md:112
msgid ""
"For example, say that I want to store something in the browser’s "
"`localStorage` whenever a signal changes."
msgstr ""

#: src/ssr/24_hydration_bugs.md:119 src/ssr/24_hydration_bugs.md:133
msgid "\"{storage:?}\""
msgstr ""

#: src/ssr/24_hydration_bugs.md:123
msgid ""
"This panics because I can’t access `LocalStorage` during server rendering."
msgstr ""

#: src/ssr/24_hydration_bugs.md:125
msgid "But if I wrap it in an effect..."
msgstr ""

#: src/ssr/24_hydration_bugs.md:138
msgid ""
"It’s fine! This will render appropriately on the server, ignoring the client-"
"only code, and then access the storage and log a message on the browser."
msgstr ""

#: src/ssr/24_hydration_bugs.md:140
msgid "Not all server code can run on the client"
msgstr ""

#: src/ssr/24_hydration_bugs.md:142
msgid ""
"WebAssembly running in the browser is a pretty limited environment. You "
"don’t have access to a file-system or to many of the other things the "
"standard library may be used to having. Not every crate can even be compiled "
"to WASM, let alone run in a WASM environment."
msgstr ""

#: src/ssr/24_hydration_bugs.md:144
msgid ""
"In particular, you’ll sometimes see errors about the crate `mio` or missing "
"things from `core`. This is generally a sign that you are trying to compile "
"something to WASM that can’t be compiled to WASM. If you’re adding server-"
"only dependencies, you’ll want to mark them `optional = true` in your `Cargo."
"toml` and then enable them in the `ssr` feature definition. (Check out one "
"of the template `Cargo.toml` files to see more details.)"
msgstr ""

#: src/ssr/24_hydration_bugs.md:146
msgid ""
"You can use `create_effect` to specify that something should only run on the "
"client, and not in the server. Is there a way to specify that something "
"should run only on the server, and not the client?"
msgstr ""

#: src/ssr/24_hydration_bugs.md:148
msgid ""
"In fact, there is. The next chapter will cover the topic of server functions "
"in some detail. (In the meantime, you can check out their docs [here]"
"(https://docs.rs/leptos_server/latest/leptos_server/index.html).)"
msgstr ""

#: src/server/index.md:3
msgid ""
"The previous section described the process of server-side rendering, using "
"the server to generate an HTML version of the page that will become "
"interactive in the browser. So far, everything has been “isomorphic”; in "
"other words, your app has had the “same (_iso_) shape (_morphe_)” on the "
"client and the server."
msgstr ""

#: src/server/index.md:5
msgid ""
"But a server can do a lot more than just render HTML! In fact, a server can "
"do a whole bunch of things your browser _can’t,_ like reading from and "
"writing to a SQL database."
msgstr ""

#: src/server/index.md:7
msgid ""
"If you’re used to building JavaScript frontend apps, you’re probably used to "
"calling out to some kind of REST API to do this sort of server work. If "
"you’re used to building sites with PHP or Python or Ruby (or Java or C# "
"or...), this server-side work is your bread and butter, and it’s the client-"
"side interactivity that tends to be an afterthought."
msgstr ""

#: src/server/index.md:9
msgid ""
"With Leptos, you can do both: not only in the same language, not only "
"sharing the same types, but even in the same files!"
msgstr ""

#: src/server/index.md:11
msgid ""
"This section will talk about how to build the uniquely-server-side parts of "
"your application."
msgstr ""

#: src/server/25_server_functions.md:3
msgid ""
"If you’re creating anything beyond a toy app, you’ll need to run code on the "
"server all the time: reading from or writing to a database that only runs on "
"the server, running expensive computations using libraries you don’t want to "
"ship down to the client, accessing APIs that need to be called from the "
"server rather than the client for CORS reasons or because you need a secret "
"API key that’s stored on the server and definitely shouldn’t be shipped down "
"to a user’s browser."
msgstr ""

#: src/server/25_server_functions.md:5
msgid ""
"Traditionally, this is done by separating your server and client code, and "
"by setting up something like a REST API or GraphQL API to allow your client "
"to fetch and mutate data on the server. This is fine, but it requires you to "
"write and maintain your code in multiple separate places (client-side code "
"for fetching, server-side functions to run), as well as creating a third "
"thing to manage, which is the API contract between the two."
msgstr ""

#: src/server/25_server_functions.md:7
msgid ""
"Leptos is one of a number of modern frameworks that introduce the concept of "
"**server functions**. Server functions have two key characteristics:"
msgstr ""

#: src/server/25_server_functions.md:9
msgid ""
"Server functions are **co-located** with your component code, so that you "
"can organize your work by feature, not by technology. For example, you might "
"have a “dark mode” feature that should persist a user’s dark/light mode "
"preference across sessions, and be applied during server rendering so "
"there’s no flicker. This requires a component that needs to be interactive "
"on the client, and some work to be done on the server (setting a cookie, "
"maybe even storing a user in a database.) Traditionally, this feature might "
"end up being split between two different locations in your code, one in your "
"“frontend” and one in your “backend.” With server functions, you’ll probably "
"just write them both in one `dark_mode.rs` and forget about it."
msgstr ""

#: src/server/25_server_functions.md:10
msgid ""
"Server functions are **isomorphic**, i.e., they can be called either from "
"the server or the browser. This is done by generating code differently for "
"the two platforms. On the server, a server function simply runs. In the "
"browser, the server function’s body is replaced with a stub that actually "
"makes a fetch request to the server, serializing the arguments into the "
"request and deserializing the return value from the response. But on either "
"end, the function can simply be called: you can create an `add_todo` "
"function that writes to your database, and simply call it from a click "
"handler on a button in the browser!"
msgstr ""

#: src/server/25_server_functions.md:12
msgid "Using Server Functions"
msgstr ""

#: src/server/25_server_functions.md:14
msgid ""
"Actually, I kind of like that example. What would it look like? It’s pretty "
"simple, actually."
msgstr ""

#: src/server/25_server_functions.md:17
msgid "// todo.rs\n"
msgstr ""

#: src/server/25_server_functions.md:19 src/server/25_server_functions.md:89
#: src/server/25_server_functions.md:90 src/server/25_server_functions.md:91
#: src/server/25_server_functions.md:92 src/server/25_server_functions.md:126
#: src/server/27_response.md:36 src/progressive_enhancement/action_form.md:15
msgid "\"/api\""
msgstr ""

#: src/server/25_server_functions.md:23
msgid "\"INSERT INTO todos (title, completed) VALUES ($1, false)\""
msgstr ""

#: src/server/25_server_functions.md:38 src/server/25_server_functions.md:57
msgid "\"So much to do!\""
msgstr ""

#: src/server/25_server_functions.md:47
msgid "You’ll notice a couple things here right away:"
msgstr ""

#: src/server/25_server_functions.md:49
msgid ""
"Server functions can use server-only dependencies, like `sqlx`, and can "
"access server-only resources, like our database."
msgstr ""

#: src/server/25_server_functions.md:50
msgid ""
"Server functions are `async`. Even if they only did synchronous work on the "
"server, the function signature would still need to be `async`, because "
"calling them from the browser _must_ be asynchronous."
msgstr ""

#: src/server/25_server_functions.md:51
msgid ""
"Server functions return `Result<T, ServerFnError>`. Again, even if they only "
"do infallible work on the server, this is true, because `ServerFnError`’s "
"variants include the various things that can be wrong during the process of "
"making a network request."
msgstr ""

#: src/server/25_server_functions.md:52
msgid ""
"Server functions can be called from the client. Take a look at our click "
"handler. This is code that will _only ever_ run on the client. But it can "
"call the function `add_todo` (using `spawn_local` to run the `Future`) as if "
"it were an ordinary async function:"
msgstr ""

#: src/server/25_server_functions.md:62
msgid ""
"Server functions are top-level functions defined with `fn`. Unlike event "
"listeners, derived signals, and most everything else in Leptos, they are not "
"closures! As `fn` calls, they have no access to the reactive state of your "
"app or anything else that is not passed in as an argument. And again, this "
"makes perfect sense: When you make a request to the server, the server "
"doesn’t have access to client state unless you send it explicitly. "
"(Otherwise we’d have to serialize the whole reactive system and send it "
"across the wire with every request, which—while it served classic ASP for a "
"while—is a really bad idea.)"
msgstr ""

#: src/server/25_server_functions.md:63
msgid ""
"Server function arguments and return values both need to be serializable "
"with `serde`. Again, hopefully this makes sense: while function arguments in "
"general don’t need to be serialized, calling a server function from the "
"browser means serializing the arguments and sending them over HTTP."
msgstr ""

#: src/server/25_server_functions.md:65
msgid ""
"There are a few things to note about the way you define a server function, "
"too."
msgstr ""

#: src/server/25_server_functions.md:67
msgid ""
"Server functions are created by using the [`#[server]` macro](https://docs."
"rs/leptos_server/latest/leptos_server/index.html#server) to annotate a top-"
"level function, which can be defined anywhere."
msgstr ""

#: src/server/25_server_functions.md:68
msgid ""
"We provide the macro a type name. The type name is used internally as a "
"container to hold, serialize, and deserialize the arguments."
msgstr ""

#: src/server/25_server_functions.md:69
msgid ""
"We provide the macro a path. This is a prefix for the path at which we’ll "
"mount a server function handler on our server. (See examples for [Actix]"
"(https://github.com/leptos-rs/leptos/blob/main/examples/todo_app_sqlite/src/"
"main.rs#L44) and [Axum](https://github.com/leptos-rs/leptos/"
"blob/598523cd9d0d775b017cb721e41ebae9349f01e2/examples/todo_app_sqlite_axum/"
"src/main.rs#L51).)"
msgstr ""

#: src/server/25_server_functions.md:70
msgid ""
"You’ll need to have `serde` as a dependency with the `derive` featured "
"enabled for the macro to work properly. You can easily add it to `Cargo."
"toml` with `cargo add serde --features=derive`."
msgstr ""

#: src/server/25_server_functions.md:72
msgid "Server Function URL Prefixes"
msgstr ""

#: src/server/25_server_functions.md:74
msgid ""
"You can optionally define a specific URL prefix to be used in the definition "
"of the server function. This is done by providing an optional 2nd argument "
"to the `#[server]` macro. By default the URL prefix will be `/api`, if not "
"specified. Here are some examples:"
msgstr ""

#: src/server/25_server_functions.md:80
msgid "// will use the default URL prefix of `/api`\n"
msgstr ""

#: src/server/25_server_functions.md:81
msgid "\"/foo\""
msgstr ""

#: src/server/25_server_functions.md:81
msgid "// will use the URL prefix of `/foo`\n"
msgstr ""

#: src/server/25_server_functions.md:84
msgid "Server Function Encodings"
msgstr ""

#: src/server/25_server_functions.md:86
msgid ""
"By default, the server function call is a `POST` request that serializes the "
"arguments as URL-encoded form data in the body of the request. (This means "
"that server functions can be called from HTML forms, which we’ll see in a "
"future chapter.) But there are a few other methods supported. Optionally, we "
"can provide another argument to the `#[server]` macro to specify an "
"alternate encoding:"
msgstr ""

#: src/server/25_server_functions.md:89 src/server/25_server_functions.md:126
msgid "\"Url\""
msgstr ""

#: src/server/25_server_functions.md:90
msgid "\"GetJson\""
msgstr ""

#: src/server/25_server_functions.md:91
msgid "\"Cbor\""
msgstr ""

#: src/server/25_server_functions.md:92
msgid "\"GetCbor\""
msgstr ""

#: src/server/25_server_functions.md:95
msgid ""
"The four options use different combinations of HTTP verbs and encoding "
"methods:"
msgstr ""

#: src/server/25_server_functions.md:97
msgid "Name"
msgstr ""

#: src/server/25_server_functions.md:97
msgid "Method"
msgstr ""

#: src/server/25_server_functions.md:97
msgid "Request"
msgstr ""

#: src/server/25_server_functions.md:97
msgid "Response"
msgstr ""

#: src/server/25_server_functions.md:99
msgid "**Url** (default)"
msgstr ""

#: src/server/25_server_functions.md:99 src/server/25_server_functions.md:101
msgid "POST"
msgstr ""

#: src/server/25_server_functions.md:99 src/server/25_server_functions.md:100
#: src/server/25_server_functions.md:102
msgid "URL encoded"
msgstr ""

#: src/server/25_server_functions.md:99 src/server/25_server_functions.md:100
msgid "JSON"
msgstr ""

#: src/server/25_server_functions.md:100
msgid "**GetJson**"
msgstr ""

#: src/server/25_server_functions.md:100 src/server/25_server_functions.md:102
msgid "GET"
msgstr ""

#: src/server/25_server_functions.md:101
msgid "**Cbor**"
msgstr ""

#: src/server/25_server_functions.md:101 src/server/25_server_functions.md:102
msgid "CBOR"
msgstr ""

#: src/server/25_server_functions.md:102
msgid "**GetCbor**"
msgstr ""

#: src/server/25_server_functions.md:104
msgid "In other words, you have two choices:"
msgstr ""

#: src/server/25_server_functions.md:106
msgid ""
"`GET` or `POST`? This has implications for things like browser or CDN "
"caching; while `POST` requests should not be cached, `GET` requests can be."
msgstr ""

#: src/server/25_server_functions.md:107
msgid ""
"Plain text (arguments sent with URL/form encoding, results sent as JSON) or "
"a binary format (CBOR, encoded as a base64 string)?"
msgstr ""

#: src/server/25_server_functions.md:109
msgid ""
"**But remember**: Leptos will handle all the details of this encoding and "
"decoding for you. When you use a server function, it looks just like calling "
"any other asynchronous function!"
msgstr ""

#: src/server/25_server_functions.md:111
msgid "**Why not `PUT` or `DELETE`? Why URL/form encoding, and not JSON?**"
msgstr ""

#: src/server/25_server_functions.md:113
msgid ""
"These are reasonable questions. Much of the web is built on REST API "
"patterns that encourage the use of semantic HTTP methods like `DELETE` to "
"delete an item from a database, and many devs are accustomed to sending data "
"to APIs in the JSON format."
msgstr ""

#: src/server/25_server_functions.md:115
msgid ""
"The reason we use `POST` or `GET` with URL-encoded data by default is the "
"`<form>` support. For better or for worse, HTML forms don’t support `PUT` or "
"`DELETE`, and they don’t support sending JSON. This means that if you use "
"anything but a `GET` or `POST` request with URL-encoded data, it can only "
"work once WASM has loaded. As we’ll see [in a later chapter](../"
"progressive_enhancement), this isn’t always a great idea."
msgstr ""

#: src/server/25_server_functions.md:117
msgid ""
"The CBOR encoding is suported for historical reasons; an earlier version of "
"server functions used a URL encoding that didn’t support nested objects like "
"structs or vectors as server function arguments, which CBOR did. But note "
"that the CBOR forms encounter the same issue as `PUT`, `DELETE`, or JSON: "
"they do not degrade gracefully if the WASM version of your app is not "
"available."
msgstr ""

#: src/server/25_server_functions.md:120
msgid "Server Functions Endpoint Paths"
msgstr ""

#: src/server/25_server_functions.md:122
msgid ""
"By default, a unique path will be generated. You can optionally define a "
"specific endpoint path to be used in the URL. This is done by providing an "
"optional 4th argument to the `#[server]` macro. Leptos will generate the "
"complete path by concatenating the URL prefix (2nd argument) and the "
"endpoint path (4th argument). For example,"
msgstr ""

#: src/server/25_server_functions.md:126
msgid "\"hello\""
msgstr ""

#: src/server/25_server_functions.md:128
msgid ""
"will generate a server function endpoint at `/api/hello` that accepts a POST "
"request."
msgstr ""

#: src/server/25_server_functions.md:130
msgid ""
"**Can I use the same server function endpoint path with multiple encodings?**"
msgstr ""

#: src/server/25_server_functions.md:132
msgid ""
"No. Different server functions must have unique paths. The `#[server]` macro "
"automatically generates unique paths, but you need to be careful if you "
"choose to specify the complete path manually, as the server looks up server "
"functions by their path."
msgstr ""

#: src/server/25_server_functions.md:134
msgid "An Important Note on Security"
msgstr ""

#: src/server/25_server_functions.md:136
msgid ""
"Server functions are a cool technology, but it’s very important to remember. "
"**Server functions are not magic; they’re syntax sugar for defining a public "
"API.** The _body_ of a server function is never made public; it’s just part "
"of your server binary. But the server function is a publicly accessible API "
"endpoint, and it’s return value is just a JSON or similar blob. You should "
"_never_ return something sensitive from a server function."
msgstr ""

#: src/server/25_server_functions.md:138
msgid "Integrating Server Functions with Leptos"
msgstr ""

#: src/server/25_server_functions.md:140
msgid ""
"So far, everything I’ve said is actually framework agnostic. (And in fact, "
"the Leptos server function crate has been integrated into Dioxus as well!) "
"Server functions are simply a way of defining a function-like RPC call that "
"leans on Web standards like HTTP requests and URL encoding."
msgstr ""

#: src/server/25_server_functions.md:142
msgid ""
"But in a way, they also provide the last missing primitive in our story so "
"far. Because a server function is just a plain Rust async function, it "
"integrates perfectly with the async Leptos primitives we discussed [earlier]"
"(https://leptos-rs.github.io/leptos/async/index.html). So you can easily "
"integrate your server functions with the rest of your applications:"
msgstr ""

#: src/server/25_server_functions.md:144
msgid ""
"Create **resources** that call the server function to load data from the "
"server"
msgstr ""

#: src/server/25_server_functions.md:145
msgid ""
"Read these resources under `<Suspense/>` or `<Transition/>` to enable "
"streaming SSR and fallback states while data loads."
msgstr ""

#: src/server/25_server_functions.md:146
msgid ""
"Create **actions** that call the server function to mutate data on the server"
msgstr ""

#: src/server/25_server_functions.md:148
msgid ""
"The final section of this book will make this a little more concrete by "
"introducing patterns that use progressively-enhanced HTML forms to run these "
"server actions."
msgstr ""

#: src/server/25_server_functions.md:150
msgid ""
"But in the next few chapters, we’ll actually take a look at some of the "
"details of what you might want to do with your server functions, including "
"the best ways to integrate with the powerful extractors provided by the "
"Actix and Axum server frameworks."
msgstr ""

#: src/server/26_extractors.md:3
msgid ""
"The server functions we looked at in the last chapter showed how to run code "
"on the server, and integrate it with the user interface you’re rendering in "
"the browser. But they didn’t show you much about how to actually use your "
"server to its full potential."
msgstr ""

#: src/server/26_extractors.md:5
msgid "Server Frameworks"
msgstr ""

#: src/server/26_extractors.md:7
msgid ""
"We call Leptos a “full-stack” framework, but “full-stack” is always a "
"misnomer (after all, it never means everything from the browser to your "
"power company.) For us, “full stack” means that your Leptos app can run in "
"the browser, and can run on the server, and can integrate the two, drawing "
"together the unique features available in each; as we’ve seen in the book so "
"far, a button click on the browser can drive a database read on the server, "
"both written in the same Rust module. But Leptos itself doesn’t provide the "
"server (or the database, or the operating system, or the firmware, or the "
"electrical cables...)"
msgstr ""

#: src/server/26_extractors.md:9
msgid ""
"Instead, Leptos provides integrations for the two most popular Rust web "
"server frameworks, Actix Web ([`leptos_actix`](https://docs.rs/leptos_actix/"
"latest/leptos_actix/)) and Axum ([`leptos_axum`](https://docs.rs/leptos_axum/"
"latest/leptos_axum/)). We’ve built integrations with each server’s router so "
"that you can simply plug your Leptos app into an existing server with `."
"leptos_routes()`, and easily handle server function calls."
msgstr ""

#: src/server/26_extractors.md:11
msgid ""
"If you haven’t seen our [Actix](https://github.com/leptos-rs/start) and "
"[Axum](https://github.com/leptos-rs/start-axum) templates, now’s a good time "
"to check them out."
msgstr ""

#: src/server/26_extractors.md:13
msgid "Using Extractors"
msgstr ""

#: src/server/26_extractors.md:15
msgid ""
"Both Actix and Axum handlers are built on the same powerful idea of "
"**extractors**. Extractors “extract” typed data from an HTTP request, "
"allowing you to access server-specific data easily."
msgstr ""

#: src/server/26_extractors.md:17
msgid ""
"Leptos provides `extract` helper functions to let you use these extractors "
"directly in your server functions, with a convenient syntax very similar to "
"handlers for each framework."
msgstr ""

#: src/server/26_extractors.md:19
msgid "Actix Extractors"
msgstr ""

#: src/server/26_extractors.md:21
msgid ""
"The [`extract` function in `leptos_actix`](https://docs.rs/leptos_actix/"
"latest/leptos_actix/fn.extract.html) takes a handler function as its "
"argument. The handler follows similar rules to an Actix handler: it is an "
"async function that receives arguments that will be extracted from the "
"request and returns some value. The handler function receives that extracted "
"data as its arguments, and can do further `async` work on them inside the "
"body of the `async move` block. It returns whatever value you return back "
"out into the server function."
msgstr ""

#: src/server/26_extractors.md:38
msgid "\"search = {search:?}\\nconnection = {connection:?}\""
msgstr ""

#: src/server/26_extractors.md:42
msgid "Axum Extractors"
msgstr ""

#: src/server/26_extractors.md:44
msgid ""
"The syntax for the [`leptos_axum::extract`](https://docs.rs/leptos_axum/"
"latest/leptos_axum/fn.extract.html) function is very similar. "
msgstr ""

#: src/server/26_extractors.md:61
msgid "\"{method:?} and {query:?}\""
msgstr ""

#: src/server/26_extractors.md:65
msgid ""
"These are relatively simple examples accessing basic data from the server. "
"But you can use extractors to access things like headers, cookies, database "
"connection pools, and more, using the exact same `extract()` pattern."
msgstr ""

#: src/server/26_extractors.md:67
msgid ""
"The Axum `extract` function only supports extractors for which the state is "
"`()`. If you need an extractor that uses `State`, you should use "
"[`extract_with_state`](https://docs.rs/leptos_axum/latest/leptos_axum/fn."
"extract_with_state.html). This requires you to provide the state. You can do "
"this by extending the existing `LeptosOptions` state using the Axum "
"`FromRef` pattern, which providing the state as context during render and "
"server functions with custom handlers."
msgstr ""

#: src/server/26_extractors.md:71
msgid ""
"/// Derive FromRef to allow multiple items in state, using Axum’s\n"
"/// SubStates pattern.\n"
msgstr ""

#: src/server/26_extractors.md:81
msgid ""
"[Click here for an example of providing context in custom handlers](https://"
"github.com/leptos-rs/leptos/blob/19ea6fae6aec2a493d79cc86612622d219e6eebb/"
"examples/session_auth_axum/src/main.rs#L24-L44)."
msgstr ""

#: src/server/26_extractors.md:83
msgid "A Note about Data-Loading Patterns"
msgstr ""

#: src/server/26_extractors.md:85
msgid ""
"Because Actix and (especially) Axum are built on the idea of a single round-"
"trip HTTP request and response, you typically run extractors near the “top” "
"of your application (i.e., before you start rendering) and use the extracted "
"data to determine how that should be rendered. Before you render a "
"`<button>`, you load all the data your app could need. And any given route "
"handler needs to know all the data that will need to be extracted by that "
"route."
msgstr ""

#: src/server/26_extractors.md:87
msgid ""
"But Leptos integrates both the client and the server, and it’s important to "
"be able to refresh small pieces of your UI with new data from the server "
"without forcing a full reload of all the data. So Leptos likes to push data "
"loading “down” in your application, as far towards the leaves of your user "
"interface as possible. When you click a `<button>`, it can refresh just the "
"data it needs. This is exactly what server functions are for: they give you "
"granular access to data to be loaded and reloaded."
msgstr ""

#: src/server/26_extractors.md:89
msgid ""
"The `extract()` functions let you combine both models by using extractors in "
"your server functions. You get access to the full power of route extractors, "
"while decentralizing knowledge of what needs to be extracted down to your "
"individual components. This makes it easier to refactor and reorganize "
"routes: you don’t need to specify all the data a route needs up front."
msgstr ""

#: src/server/27_response.md:3
msgid ""
"Extractors provide an easy way to access request data inside server "
"functions. Leptos also provides a way to modify the HTTP response, using the "
"`ResponseOptions` type (see docs for [Actix](https://docs.rs/leptos_actix/"
"latest/leptos_actix/struct.ResponseOptions.html) or [Axum](https://docs.rs/"
"leptos_axum/latest/leptos_axum/struct.ResponseOptions.html)) types and the "
"`redirect` helper function (see docs for [Actix](https://docs.rs/"
"leptos_actix/latest/leptos_actix/fn.redirect.html) or [Axum](https://docs.rs/"
"leptos_axum/latest/leptos_axum/fn.redirect.html))."
msgstr ""

#: src/server/27_response.md:5
msgid "`ResponseOptions`"
msgstr ""

#: src/server/27_response.md:7
msgid ""
"`ResponseOptions` is provided via context during the initial server "
"rendering response and during any subsequent server function call. It allows "
"you to easily set the status code for the HTTP response, or to add headers "
"to the HTTP response, e.g., to set cookies."
msgstr ""

#: src/server/27_response.md:15
msgid "// pull ResponseOptions from context\n"
msgstr ""

#: src/server/27_response.md:18
msgid "// set the HTTP status code\n"
msgstr ""

#: src/server/27_response.md:21
msgid "// set a cookie in the HTTP response\n"
msgstr ""

#: src/server/27_response.md:22
msgid "\"biscuits\""
msgstr ""

#: src/server/27_response.md:22
msgid "\"yes\""
msgstr ""

#: src/server/27_response.md:29
msgid "`redirect`"
msgstr ""

#: src/server/27_response.md:31
msgid ""
"One common modification to an HTTP response is to redirect to another page. "
"The Actix and Axum integrations provide a `redirect` function to make this "
"easy to do. `redirect` simply sets an HTTP status code of `302 Found` and "
"sets the `Location` header."
msgstr ""

#: src/server/27_response.md:33
msgid ""
"Here’s a simplified example from our [`session_auth_axum` example](https://"
"github.com/leptos-rs/leptos/blob/a5f73b441c079f9138102b3a7d8d4828f045448c/"
"examples/session_auth_axum/src/auth.rs#L154-L181)."
msgstr ""

#: src/server/27_response.md:42
msgid "// pull the DB pool and auth provider from context\n"
msgstr ""

#: src/server/27_response.md:46
msgid "// check whether the user exists\n"
msgstr ""

#: src/server/27_response.md:50
msgid "\"User does not exist.\""
msgstr ""

#: src/server/27_response.md:53
msgid "// check whether the user has provided the correct password\n"
msgstr ""

#: src/server/27_response.md:55
msgid "// if the password is correct...\n"
msgstr ""

#: src/server/27_response.md:57
msgid "// log the user in\n"
msgstr ""

#: src/server/27_response.md:61
msgid "// and redirect to the home page\n"
msgstr ""

#: src/server/27_response.md:65
msgid "// if not, return an error\n"
msgstr ""

#: src/server/27_response.md:67
msgid "\"Password does not match.\""
msgstr ""

#: src/server/27_response.md:73
msgid ""
"This server function can then be used from your application. This `redirect` "
"works well with the progressively-enhanced `<ActionForm/>` component: "
"without JS/WASM, the server response will redirect because of the status "
"code and header. With JS/WASM, the `<ActionForm/>` will detect the redirect "
"in the server function response, and use client-side navigation to redirect "
"to the new page."
msgstr ""

#: src/progressive_enhancement/index.md:1
msgid "Progressive Enhancement (and Graceful Degradation)"
msgstr ""

#: src/progressive_enhancement/index.md:3
msgid ""
"I’ve been driving around Boston for about fifteen years. If you don’t know "
"Boston, let me tell you: Massachusetts has some of the most aggressive "
"drivers(and pedestrians!) in the world. I’ve learned to practice what’s "
"sometimes called “defensive driving”: assuming that someone’s about to "
"swerve in front of you at an intersection when you have the right of way, "
"preparing for a pedestrian to cross into the street at any moment, and "
"driving accordingly."
msgstr ""

#: src/progressive_enhancement/index.md:5
msgid ""
"“Progressive enhancement” is the “defensive driving” of web design. Or "
"really, that’s “graceful degradation,” although they’re two sides of the "
"same coin, or the same process, from two different directions."
msgstr ""

#: src/progressive_enhancement/index.md:7
msgid ""
"**Progressive enhancement**, in this context, means beginning with a simple "
"HTML site or application that works for any user who arrives at your page, "
"and gradually enhancing it with layers of additional features: CSS for "
"styling, JavaScript for interactivity, WebAssembly for Rust-powered "
"interactivity; using particular Web APIs for a richer experience if they’re "
"available and as needed."
msgstr ""

#: src/progressive_enhancement/index.md:9
msgid ""
"**Graceful degradation** means handling failure gracefully when parts of "
"that stack of enhancement _aren’t_ available. Here are some sources of "
"failure your users might encounter in your app:"
msgstr ""

#: src/progressive_enhancement/index.md:10
msgid ""
"Their browser doesn’t support WebAssembly because it needs to be updated."
msgstr ""

#: src/progressive_enhancement/index.md:11
msgid ""
"Their browser can’t support WebAssembly because browser updates are limited "
"to newer OS versions, which can’t be installed on the device. (Looking at "
"you, Apple.)"
msgstr ""

#: src/progressive_enhancement/index.md:12
msgid "They have WASM turned off for security or privacy reasons."
msgstr ""

#: src/progressive_enhancement/index.md:13
msgid "They have JavaScript turned off for security or privacy reasons."
msgstr ""

#: src/progressive_enhancement/index.md:14
msgid ""
"JavaScript isn’t supported on their device (for example, some accessibility "
"devices only support HTML browsing)"
msgstr ""

#: src/progressive_enhancement/index.md:15
msgid ""
"The JavaScript (or WASM) never arrived at their device because they walked "
"outside and lost WiFi."
msgstr ""

#: src/progressive_enhancement/index.md:16
msgid ""
"They stepped onto a subway car after loading the initial page and subsequent "
"navigations can’t load data."
msgstr ""

#: src/progressive_enhancement/index.md:17
msgid "... and so on."
msgstr ""

#: src/progressive_enhancement/index.md:19
msgid ""
"How much of your app still works if one of these holds true? Two of them? "
"Three? "
msgstr ""

#: src/progressive_enhancement/index.md:21
msgid ""
"If the answer is something like “95%... okay, then 90%... okay, then 75%,” "
"that’s graceful degradation. If the answer is “my app shows a blank screen "
"unless everything works correctly,” that’s... rapid unscheduled disassembly."
msgstr ""

#: src/progressive_enhancement/index.md:23
msgid ""
"**Graceful degradation is especially important for WASM apps,** because WASM "
"is the newest and least-likely-to-be-supported of the four languages that "
"run in the browser (HTML, CSS, JS, WASM)."
msgstr ""

#: src/progressive_enhancement/index.md:25
msgid "Luckily, we’ve got some tools to help."
msgstr ""

#: src/progressive_enhancement/index.md:27
msgid "Defensive Design"
msgstr ""

#: src/progressive_enhancement/index.md:29
msgid ""
"There are a few practices that can help your apps degrade more gracefully:"
msgstr ""

#: src/progressive_enhancement/index.md:30
msgid ""
"**Server-side rendering.** Without SSR, your app simply doesn’t work without "
"both JS and WASM loading. In some cases this may be appropriate (think "
"internal apps gated behind a login) but in others it’s simply broken."
msgstr ""

#: src/progressive_enhancement/index.md:31
msgid ""
"**Native HTML elements.** Use HTML elements that do the things that you "
"want, without additional code: `<a>` for navigation (including to hashes "
"within the page), `<details>` for an accordion, `<form>` to persist "
"information in the URL, etc."
msgstr ""

#: src/progressive_enhancement/index.md:32
msgid ""
"**URL-driven state.** The more of your global state is stored in the URL (as "
"a route param or part of the query string), the more of the page can be "
"generated during server rendering and updated by an `<a>` or a `<form>`, "
"which means that not only navigations but state changes can work without JS/"
"WASM."
msgstr ""

#: src/progressive_enhancement/index.md:33
msgid ""
"**[`SsrMode::PartiallyBlocked` or `SsrMode::InOrder`](https://docs.rs/"
"leptos_router/latest/leptos_router/enum.SsrMode.html).** Out-of-order "
"streaming requires a small amount of inline JS, but can fail if 1) the "
"connection is broken halfway through the response or 2) the client’s device "
"doesn’t support JS. Async streaming will give a complete HTML page, but only "
"after all resources load. In-order streaming begins showing pieces of the "
"page sooner, in top-down order. “Partially-blocked” SSR builds on out-of-"
"order streaming by replacing `<Suspense/>` fragments that read from blocking "
"resources on the server. This adds marginally to the initial response time "
"(because of the `O(n)` string replacement work), in exchange for a more "
"complete initial HTML response. This can be a good choice for situations in "
"which there’s a clear distinction between “more important” and “less "
"important” content, e.g., blog post vs. comments, or product info vs. "
"reviews. If you choose to block on all the content, you’ve essentially "
"recreated async rendering."
msgstr ""

#: src/progressive_enhancement/index.md:34
msgid ""
"**Leaning on `<form>`s.** There’s been a bit of a `<form>` renaissance "
"recently, and it’s no surprise. The ability of a `<form>` to manage "
"complicated `POST` or `GET` requests in an easily-enhanced way makes it a "
"powerful tool for graceful degradation. The example in [the `<Form/>` "
"chapter](../router/20_form.md), for example, would work fine with no JS/"
"WASM: because it uses a `<form method=\"GET\">` to persist state in the URL, "
"it works with pure HTML by making normal HTTP requests and then "
"progressively enhances to use client-side navigations instead."
msgstr ""

#: src/progressive_enhancement/index.md:36
msgid ""
"There’s one final feature of the framework that we haven’t seen yet, and "
"which builds on this characteristic of forms to build powerful applications: "
"the `<ActionForm/>`."
msgstr ""

#: src/progressive_enhancement/action_form.md:1
msgid "`<ActionForm/>`"
msgstr ""

#: src/progressive_enhancement/action_form.md:3
msgid ""
"[`<ActionForm/>`](https://docs.rs/leptos_router/latest/leptos_router/fn."
"ActionForm.html) is a specialized `<Form/>` that takes a server action, and "
"automatically dispatches it on form submission. This allows you to call a "
"server function directly from a `<form>`, even without JS/WASM."
msgstr ""

#: src/progressive_enhancement/action_form.md:5
msgid "The process is simple:"
msgstr ""

#: src/progressive_enhancement/action_form.md:7
msgid ""
"Define a server function using the [`#[server]` macro](https://docs.rs/"
"leptos/latest/leptos/attr.server.html) (see [Server Functions](../"
"server/25_server_functions.md).)"
msgstr ""

#: src/progressive_enhancement/action_form.md:8
msgid ""
"Create an action using [`create_server_action`](https://docs.rs/leptos/"
"latest/leptos/fn.create_server_action.html), specifying the type of the "
"server function you’ve defined."
msgstr ""

#: src/progressive_enhancement/action_form.md:9
msgid ""
"Create an `<ActionForm/>`, providing the server action in the `action` prop."
msgstr ""

#: src/progressive_enhancement/action_form.md:10
msgid ""
"Pass the named arguments to the server function as form fields with the same "
"names."
msgstr ""

#: src/progressive_enhancement/action_form.md:12
msgid ""
"**Note:** `<ActionForm/>` only works with the default URL-encoded `POST` "
"encoding for server functions, to ensure graceful degradation/correct "
"behavior as an HTML form."
msgstr ""

#: src/progressive_enhancement/action_form.md:23
msgid "// holds the latest *returned* value from the server\n"
msgstr ""

#: src/progressive_enhancement/action_form.md:25
msgid "// check if the server has returned an error\n"
msgstr ""

#: src/progressive_enhancement/action_form.md:31
msgid "\"Add a Todo\""
msgstr ""

#: src/progressive_enhancement/action_form.md:32
msgid "// `title` matches the `title` argument to `add_todo`\n"
msgstr ""

#: src/progressive_enhancement/action_form.md:33
msgid "\"title\""
msgstr ""

#: src/progressive_enhancement/action_form.md:35
msgid "\"Add\""
msgstr ""

#: src/progressive_enhancement/action_form.md:41
msgid ""
"It’s really that easy. With JS/WASM, your form will submit without a page "
"reload, storing its most recent submission in the `.input()` signal of the "
"action, its pending status in `.pending()`, and so on. (See the [`Action`]"
"(https://docs.rs/leptos/latest/leptos/struct.Action.html) docs for a "
"refresher, if you need.) Without JS/WASM, your form will submit with a page "
"reload. If you call a `redirect` function (from `leptos_axum` or "
"`leptos_actix`) it will redirect to the correct page. By default, it will "
"redirect back to the page you’re currently on. The power of HTML, HTTP, and "
"isomorphic rendering mean that your `<ActionForm/>` simply works, even with "
"no JS/WASM."
msgstr ""

#: src/progressive_enhancement/action_form.md:43
msgid "Client-Side Validation"
msgstr ""

#: src/progressive_enhancement/action_form.md:45
msgid ""
"Because the `<ActionForm/>` is just a `<form>`, it fires a `submit` event. "
"You can use either HTML validation, or your own client-side validation logic "
"in an `on:submit`. Just call `ev.prevent_default()` to prevent submission."
msgstr ""

#: src/progressive_enhancement/action_form.md:47
msgid ""
"The [`FromFormData`](https://docs.rs/leptos_router/latest/leptos_router/"
"trait.FromFormData.html) trait can be helpful here, for attempting to parse "
"your server function’s data type from the submitted form."
msgstr ""

#: src/progressive_enhancement/action_form.md:52
msgid "// silly example of validation: if the todo is \"nope!\", nope it\n"
msgstr ""

#: src/progressive_enhancement/action_form.md:53
msgid "\"nope!\""
msgstr ""

#: src/progressive_enhancement/action_form.md:54
msgid "// ev.prevent_default() will prevent form submission\n"
msgstr ""

#: src/progressive_enhancement/action_form.md:60
msgid "Complex Inputs"
msgstr ""

#: src/progressive_enhancement/action_form.md:62
msgid ""
"Server function arguments that are structs with nested serializable fields "
"should make use of indexing notation of `serde_qs`."
msgstr ""

#: src/progressive_enhancement/action_form.md:80
msgid "\"hefty_arg[first_name]\""
msgstr ""

#: src/progressive_enhancement/action_form.md:80
#: src/progressive_enhancement/action_form.md:95
msgid "\"leptos\""
msgstr ""

#: src/progressive_enhancement/action_form.md:83
msgid "\"hefty_arg[last_name]\""
msgstr ""

#: src/progressive_enhancement/action_form.md:84
#: src/progressive_enhancement/action_form.md:96
msgid "\"closures-everywhere\""
msgstr ""

#: src/deployment/index.md:3
msgid ""
"There are as many ways to deploy a web application as there are developers, "
"let alone applications. But there are a couple useful tips to keep in mind "
"when deploying an app."
msgstr ""

#: src/deployment/index.md:5
msgid "General Advice"
msgstr ""

#: src/deployment/index.md:7
msgid ""
"Remember: Always deploy Rust apps built in `--release` mode, not debug mode. "
"This has a huge effect on both performance and binary size."
msgstr ""

#: src/deployment/index.md:8
msgid ""
"Test locally in release mode as well. The framework applies certain "
"optimizations in release mode that it does not apply in debug mode, so it’s "
"possible for bugs to surface at this point. (If your app behaves differently "
"or you do encounter a bug, it’s likely a framework-level bug and you should "
"open a GitHub issue with a reproduction.)"
msgstr ""

#: src/deployment/index.md:9
msgid ""
"See the chapter on \"Optimizing WASM Binary Size\" for additional tips and "
"tricks to further improve the time-to-interactive metric for your WASM app "
"on first load."
msgstr ""

#: src/deployment/index.md:11
msgid ""
"We asked users to submit their deployment setups to help with this chapter. "
"I’ll quote from them below, but you can read the full thread [here](https://"
"github.com/leptos-rs/leptos/issues/1152)."
msgstr ""

#: src/deployment/csr.md:1
msgid "Deploying a Client-Side-Rendered App"
msgstr ""

#: src/deployment/csr.md:3
msgid ""
"If you’ve been building an app that only uses client-side rendering, working "
"with Trunk as a dev server and build tool, the process is quite easy."
msgstr ""

#: src/deployment/csr.md:9
msgid ""
"`trunk build` will create a number of build artifacts in a `dist/` "
"directory. Publishing `dist` somewhere online should be all you need to "
"deploy your app. This should work very similarly to deploying any JavaScript "
"application."
msgstr ""

#: src/deployment/csr.md:11
msgid ""
"We've created several example repositories which show how to set up and "
"deploy a Leptos CSR app to various hosting services."
msgstr ""

#: src/deployment/csr.md:13
msgid ""
"_Note: Leptos does not endorse the use of any particular hosting service - "
"feel free to use any service that supports static site deploys._"
msgstr ""

#: src/deployment/csr.md:15
msgid "Examples:"
msgstr ""

#: src/deployment/csr.md:16
msgid "[Github Pages](#github-pages)"
msgstr ""

#: src/deployment/csr.md:17
msgid "[Vercel](#vercel)"
msgstr ""

#: src/deployment/csr.md:18
msgid "[Spin (serverless WebAssembly)](#spin---serverless-webassembly)"
msgstr ""

#: src/deployment/csr.md:21
msgid "Github Pages"
msgstr ""

#: src/deployment/csr.md:23
msgid ""
"Deploying a Leptos CSR app to Github pages is a simple affair. First, go to "
"your Github repo's settings and click on \"Pages\" in the left side menu. In "
"the \"Build and deployment\" section of the page, change the \"source\" to "
"\"Github Actions\". Then copy the following into a file such as `.github/"
"workflows/gh-pages-deploy.yml`"
msgstr ""

#: src/deployment/csr.md:25
msgid ""
"```admonish example collapsible=true\n"
"\n"
"\tname: Release to Github Pages\n"
"\n"
"\ton:\n"
"\tpush:\n"
"\t\tbranches: [main]\n"
"\tworkflow_dispatch:\n"
"\n"
"\tpermissions:\n"
"\tcontents: write # for committing to gh-pages branch.\n"
"\tpages: write\n"
"\tid-token: write\n"
"\n"
"\t# Allow only one concurrent deployment, skipping runs queued between the "
"run in-progress and latest queued.\n"
"\t# However, do NOT cancel in-progress runs as we want to allow these "
"production deployments to complete.\n"
"\tconcurrency:\n"
"\tgroup: \"pages\"\n"
"\tcancel-in-progress: false\n"
"\n"
"\tjobs:\n"
"\tGithub-Pages-Release:\n"
"\n"
"\t\ttimeout-minutes: 10\n"
"\n"
"\t\tenvironment:\n"
"\t\tname: github-pages\n"
"\t\turl: ${{ steps.deployment.outputs.page_url }}\n"
"\n"
"\t\truns-on: ubuntu-latest\n"
"\n"
"\t\tsteps:\n"
"\t\t- uses: actions/checkout@v4 # repo checkout\n"
"\n"
"\t\t# Install Rust Nightly Toolchain, with Clippy & Rustfmt\n"
"\t\t- name: Install nightly Rust\n"
"\t\t\tuses: dtolnay/rust-toolchain@nightly\n"
"\t\t\twith:\n"
"\t\t\tcomponents: clippy, rustfmt\n"
"\n"
"\t\t- name: Add WASM target\n"
"\t\t\trun: rustup target add wasm32-unknown-unknown\n"
"\n"
"\t\t- name: lint\n"
"\t\t\trun: cargo clippy & cargo fmt\n"
"\n"
"\n"
"\t\t# If using tailwind...\n"
"\t\t# - name: Download and install tailwindcss binary\n"
"\t\t#   run: npm install -D tailwindcss && npx tailwindcss -i <INPUT/PATH."
"css> -o <OUTPUT/PATH.css>  # run tailwind\n"
"\n"
"\n"
"\t\t- name: Download and install Trunk binary\n"
"\t\t\trun: wget -qO- https://github.com/trunk-rs/trunk/releases/download/"
"v0.18.2/trunk-x86_64-unknown-linux-gnu.tar.gz | tar -xzf-\n"
"\n"
"\t\t- name: Build with Trunk\n"
"\t\t\t# \"${GITHUB_REPOSITORY#*/}\" evaluates into the name of the "
"repository\n"
"\t\t\t# using --public-url something will allow trunk to modify all the href "
"paths like from favicon.ico to repo_name/favicon.ico .\n"
"\t\t\t# this is necessary for github pages where the site is deployed to "
"username.github.io/repo_name and all files must be requested\n"
"\t\t\t# relatively as favicon.ico. if we skip public-url option, the href "
"paths will instead request username.github.io/favicon.ico which\n"
"\t\t\t# will obviously return error 404 not found.\n"
"\t\t\trun: ./trunk build --release --public-url \"${GITHUB_REPOSITORY#*/}\"\n"
"\n"
"\n"
"\t\t# Deploy to gh-pages branch\n"
"\t\t# - name: Deploy 🚀\n"
"\t\t#   uses: JamesIves/github-pages-deploy-action@v4\n"
"\t\t#   with:\n"
"\t\t#     folder: dist\n"
"\n"
"\n"
"\t\t# Deploy with Github Static Pages\n"
"\n"
"\t\t- name: Setup Pages\n"
"\t\t\tuses: actions/configure-pages@v4\n"
"\t\t\twith:\n"
"\t\t\tenablement: true\n"
"\t\t\t# token:\n"
"\n"
"\t\t- name: Upload artifact\n"
"\t\t\tuses: actions/upload-pages-artifact@v2\n"
"\t\t\twith:\n"
"\t\t\t# Upload dist dir\n"
"\t\t\tpath: './dist'\n"
"\n"
"\t\t- name: Deploy to GitHub Pages 🚀\n"
"\t\t\tid: deployment\n"
"\t\t\tuses: actions/deploy-pages@v3\n"
"\n"
"```"
msgstr ""

#: src/deployment/csr.md:116
msgid ""
"For more on deploying to Github Pages [see the example repo here](https://"
"github.com/diversable/deploy_leptos_csr_to_gh_pages)"
msgstr ""

#: src/deployment/csr.md:118
msgid "Vercel"
msgstr ""

#: src/deployment/csr.md:120
msgid "Step 1: Set Up Vercel"
msgstr ""

#: src/deployment/csr.md:122
msgid "In the Vercel Web UI..."
msgstr ""

#: src/deployment/csr.md:123
msgid "Create a new project"
msgstr ""

#: src/deployment/csr.md:124
msgid "Ensure"
msgstr ""

#: src/deployment/csr.md:125
msgid "The \"Build Command\" is left empty with Override on"
msgstr ""

#: src/deployment/csr.md:126
msgid ""
"The \"Output Directory\" is changed to dist (which is the default output "
"directory for Trunk builds) and the Override is on"
msgstr ""

#: src/deployment/csr.md:132
msgid "Step 2: Add Vercel Credentials for GitHub Actions"
msgstr ""

#: src/deployment/csr.md:134
msgid ""
"Note: Both the preview and deploy actions will need your Vercel credentials "
"setup in GitHub secrets"
msgstr ""

#: src/deployment/csr.md:136
msgid ""
"Retrieve your [Vercel Access Token](https://vercel.com/guides/how-do-i-use-a-"
"vercel-api-access-token) by going to \"Account Settings\" > \"Tokens\" and "
"creating a new token - save the token to use in sub-step 5, below."
msgstr ""

#: src/deployment/csr.md:138
msgid ""
"Install the [Vercel CLI](https://vercel.com/cli) using the `npm i -g vercel` "
"command, then run `vercel login` to login to your acccount."
msgstr ""

#: src/deployment/csr.md:140
msgid ""
"Inside your folder, run `vercel link` to create a new Vercel project; in the "
"CLI, you will be asked to 'Link to an existing project?' - answer yes, then "
"enter the name you created in step 1. A new `.vercel` folder will be created "
"for you."
msgstr ""

#: src/deployment/csr.md:142
msgid ""
"Inside the generated `.vercel` folder, open the the `project.json` file and "
"save the \"projectId\" and \"orgId\" for the next step."
msgstr ""

#: src/deployment/csr.md:144
msgid ""
"Inside GitHub, go the repo's \"Settings\" > \"Secrets and Variables\" > "
"\"Actions\" and add the following as [Repository secrets](https://docs."
"github.com/en/actions/security-guides/encrypted-secrets):"
msgstr ""

#: src/deployment/csr.md:145
msgid ""
"save your Vercel Access Token (from sub-step 1) as the `VERCEL_TOKEN` secret"
msgstr ""

#: src/deployment/csr.md:146
msgid ""
"from the `.vercel/project.json` add \"projectID\" as `VERCEL_PROJECT_ID`"
msgstr ""

#: src/deployment/csr.md:147
msgid "from the `.vercel/project.json` add \"orgId\" as `VERCEL_ORG_ID`"
msgstr ""

#: src/deployment/csr.md:149
msgid ""
"For full instructions see [\"How can I use Github Actions with Vercel\"]"
"(https://vercel.com/guides/how-can-i-use-github-actions-with-vercel)"
msgstr ""

#: src/deployment/csr.md:151
msgid "Step 3: Add Github Action Scripts"
msgstr ""

#: src/deployment/csr.md:153
msgid ""
"Finally, you're ready to simply copy and paste the two files - one for "
"deployment, one for PR previews - from below or from [the example repo's `."
"github/workflows/` folder](https://github.com/diversable/vercel-leptos-CSR-"
"deployment/tree/main/.github/workflows) into your own github workflows "
"folder - then, on your next commit or PR deploys will occur automatically."
msgstr ""

#: src/deployment/csr.md:156
msgid "Production deployment script: `vercel_deploy.yml`"
msgstr ""

#: src/deployment/csr.md:158
msgid ""
"```admonish example collapsible=true\n"
"\n"
"\tname: Release to Vercel\n"
"\n"
"\ton:\n"
"\tpush:\n"
"\t\tbranches:\n"
"\t\t- main\n"
"\tenv:\n"
"\tCARGO_TERM_COLOR: always\n"
"\tVERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}\n"
"\tVERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}\n"
"\n"
"\tjobs:\n"
"\tVercel-Production-Deployment:\n"
"\t\truns-on: ubuntu-latest\n"
"\t\tenvironment: production\n"
"\t\tsteps:\n"
"\t\t- name: git-checkout\n"
"\t\t\tuses: actions/checkout@v3\n"
"\n"
"\t\t- uses: dtolnay/rust-toolchain@nightly\n"
"\t\t\twith:\n"
"\t\t\tcomponents: clippy, rustfmt\n"
"\t\t- uses: Swatinem/rust-cache@v2\n"
"\t\t- name: Setup Rust\n"
"\t\t\trun: |\n"
"\t\t\trustup target add wasm32-unknown-unknown\n"
"\t\t\tcargo clippy\n"
"\t\t\tcargo fmt --check\n"
"\n"
"\t\t- name: Download and install Trunk binary\n"
"\t\t\trun: wget -qO- https://github.com/trunk-rs/trunk/releases/download/"
"v0.18.2/trunk-x86_64-unknown-linux-gnu.tar.gz | tar -xzf-\n"
"\n"
"\n"
"\t\t- name: Build with Trunk\n"
"\t\t\trun: ./trunk build --release\n"
"\n"
"\t\t- name: Install Vercel CLI\n"
"\t\t\trun: npm install --global vercel@latest\n"
"\n"
"\t\t- name: Pull Vercel Environment Information\n"
"\t\t\trun: vercel pull --yes --environment=production --token=${{ secrets."
"VERCEL_TOKEN }}\n"
"\n"
"\t\t- name: Deploy to Vercel & Display URL\n"
"\t\t\tid: deployment\n"
"\t\t\tworking-directory: ./dist\n"
"\t\t\trun: |\n"
"\t\t\tvercel deploy --prod --token=${{ secrets.VERCEL_TOKEN }} >> "
"$GITHUB_STEP_SUMMARY\n"
"\t\t\techo $GITHUB_STEP_SUMMARY\n"
"\n"
"```"
msgstr ""

#: src/deployment/csr.md:211
msgid "Preview deployments script: `vercel_preview.yml`"
msgstr ""

#: src/deployment/csr.md:213
msgid ""
"```admonish example collapsible=true\n"
"\n"
"\t# For more info re: vercel action see:\n"
"\t# https://github.com/amondnet/vercel-action\n"
"\n"
"\tname: Leptos CSR Vercel Preview\n"
"\n"
"\ton:\n"
"\tpull_request:\n"
"\t\tbranches: [ \"main\" ]\n"
"\n"
"\tworkflow_dispatch:\n"
"\n"
"\tenv:\n"
"\tCARGO_TERM_COLOR: always\n"
"\tVERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}\n"
"\tVERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}\n"
"\n"
"\tjobs:\n"
"\tfmt:\n"
"\t\tname: Rustfmt\n"
"\t\truns-on: ubuntu-latest\n"
"\t\tsteps:\n"
"\t\t- uses: actions/checkout@v4\n"
"\t\t- uses: dtolnay/rust-toolchain@nightly\n"
"\t\t\twith:\n"
"\t\t\tcomponents: rustfmt\n"
"\t\t- name: Enforce formatting\n"
"\t\t\trun: cargo fmt --check\n"
"\n"
"\tclippy:\n"
"\t\tname: Clippy\n"
"\t\truns-on: ubuntu-latest\n"
"\t\tsteps:\n"
"\t\t- uses: actions/checkout@v4\n"
"\t\t- uses: dtolnay/rust-toolchain@nightly\n"
"\t\t\twith:\n"
"\t\t\tcomponents: clippy\n"
"\t\t- uses: Swatinem/rust-cache@v2\n"
"\t\t- name: Linting\n"
"\t\t\trun: cargo clippy -- -D warnings\n"
"\n"
"\ttest:\n"
"\t\tname: Test\n"
"\t\truns-on: ubuntu-latest\n"
"\t\tneeds: [fmt, clippy]\n"
"\t\tsteps:\n"
"\t\t- uses: actions/checkout@v4\n"
"\t\t- uses: dtolnay/rust-toolchain@nightly\n"
"\t\t- uses: Swatinem/rust-cache@v2\n"
"\t\t- name: Run tests\n"
"\t\t\trun: cargo test\n"
"\n"
"\tbuild-and-preview-deploy:\n"
"\t\truns-on: ubuntu-latest\n"
"\t\tname: Build and Preview\n"
"\n"
"\t\tneeds: [test, clippy, fmt]\n"
"\n"
"\t\tpermissions:\n"
"\t\tpull-requests: write\n"
"\n"
"\t\tenvironment:\n"
"\t\tname: preview\n"
"\t\turl: ${{ steps.preview.outputs.preview-url }}\n"
"\n"
"\t\tsteps:\n"
"\t\t- name: git-checkout\n"
"\t\t\tuses: actions/checkout@v4\n"
"\n"
"\t\t- uses: dtolnay/rust-toolchain@nightly\n"
"\t\t- uses: Swatinem/rust-cache@v2\n"
"\t\t- name: Build\n"
"\t\t\trun: rustup target add wasm32-unknown-unknown\n"
"\n"
"\t\t- name: Download and install Trunk binary\n"
"\t\t\trun: wget -qO- https://github.com/trunk-rs/trunk/releases/download/"
"v0.18.2/trunk-x86_64-unknown-linux-gnu.tar.gz | tar -xzf-\n"
"\n"
"\n"
"\t\t- name: Build with Trunk\n"
"\t\t\trun: ./trunk build --release\n"
"\n"
"\t\t- name: Preview Deploy\n"
"\t\t\tid: preview\n"
"\t\t\tuses: amondnet/vercel-action@v25.1.1\n"
"\t\t\twith:\n"
"\t\t\tvercel-token: ${{ secrets.VERCEL_TOKEN }}\n"
"\t\t\tgithub-token: ${{ secrets.GITHUB_TOKEN }}\n"
"\t\t\tvercel-org-id: ${{ secrets.VERCEL_ORG_ID }}\n"
"\t\t\tvercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}\n"
"\t\t\tgithub-comment: true\n"
"\t\t\tworking-directory: ./dist\n"
"\n"
"\t\t- name: Display Deployed URL\n"
"\t\t\trun: |\n"
"\t\t\techo \"Deployed app URL: ${{ steps.preview.outputs.preview-url }}\" >> "
"$GITHUB_STEP_SUMMARY\n"
"\n"
"\n"
"```"
msgstr ""

#: src/deployment/csr.md:314
msgid ""
"See [the example repo here](https://github.com/diversable/vercel-leptos-CSR-"
"deployment) for more."
msgstr ""

#: src/deployment/csr.md:318
msgid "Spin - Serverless WebAssembly"
msgstr ""

#: src/deployment/csr.md:320
msgid ""
"Another option is using a serverless platform such as Spin. Although [Spin]"
"(https://github.com/fermyon/spin) is open source and you can run it on your "
"own infrastructure (eg. inside Kubernetes), the easiest way to get started "
"with Spin in production is to use the Fermyon Cloud."
msgstr ""

#: src/deployment/csr.md:322
msgid ""
"Start by installing the [Spin CLI using the instructions, here](https://"
"developer.fermyon.com/spin/v2/install), and creating a Github repo for your "
"Leptos CSR project, if you haven't done so already."
msgstr ""

#: src/deployment/csr.md:324
msgid ""
"Open \"Fermyon Cloud\" > \"User Settings\". If you’re not logged in, choose "
"the Login With GitHub button."
msgstr ""

#: src/deployment/csr.md:326
msgid ""
"In the “Personal Access Tokens”, choose “Add a Token”. Enter the name "
"“gh_actions” and click “Create Token”."
msgstr ""

#: src/deployment/csr.md:328
msgid ""
"Fermyon Cloud displays the token; click the copy button to copy it to your "
"clipboard."
msgstr ""

#: src/deployment/csr.md:330
msgid ""
"Go into your Github repo and open \"Settings\" > \"Secrets and Variables\" > "
"\"Actions\" and add the Fermyon cloud token to \"Repository secrets\" using "
"the variable name \"FERMYON_CLOUD_TOKEN\""
msgstr ""

#: src/deployment/csr.md:332
msgid ""
"Copy and paste the following Github Actions scripts (below) into your `."
"github/workflows/<SCRIPT_NAME>.yml` files"
msgstr ""

#: src/deployment/csr.md:334
msgid ""
"With the 'preview' and 'deploy' scripts active, Github Actions will now "
"generate previews on pull requests & deploy automatically on updates to your "
"'main' branch."
msgstr ""

#: src/deployment/csr.md:337
msgid "Production deployment script: `spin_deploy.yml`"
msgstr ""

#: src/deployment/csr.md:338
msgid ""
"```admonish example collapsible=true\n"
"\n"
"\t# For setup instructions needed for Fermyon Cloud, see:\n"
"\t# https://developer.fermyon.com/cloud/github-actions\n"
"\n"
"\t# For reference, see:\n"
"\t# https://developer.fermyon.com/cloud/changelog/gh-actions-spin-deploy\n"
"\n"
"\t# For the Fermyon gh actions themselves, see:\n"
"\t# https://github.com/fermyon/actions\n"
"\n"
"\tname: Release to Spin Cloud\n"
"\n"
"\ton:\n"
"\tpush:\n"
"\t\tbranches: [main]\n"
"\tworkflow_dispatch:\n"
"\n"
"\tpermissions:\n"
"\tcontents: read\n"
"\tid-token: write\n"
"\n"
"\t# Allow only one concurrent deployment, skipping runs queued between the "
"run in-progress and latest queued.\n"
"\t# However, do NOT cancel in-progress runs as we want to allow these "
"production deployments to complete.\n"
"\tconcurrency:\n"
"\tgroup: \"spin\"\n"
"\tcancel-in-progress: false\n"
"\n"
"\tjobs:\n"
"\tSpin-Release:\n"
"\n"
"\t\ttimeout-minutes: 10\n"
"\n"
"\t\tenvironment:\n"
"\t\tname: production\n"
"\t\turl: ${{ steps.deployment.outputs.app-url }}\n"
"\n"
"\t\truns-on: ubuntu-latest\n"
"\n"
"\t\tsteps:\n"
"\t\t- uses: actions/checkout@v4 # repo checkout\n"
"\n"
"\t\t# Install Rust Nightly Toolchain, with Clippy & Rustfmt\n"
"\t\t- name: Install nightly Rust\n"
"\t\t\tuses: dtolnay/rust-toolchain@nightly\n"
"\t\t\twith:\n"
"\t\t\tcomponents: clippy, rustfmt\n"
"\n"
"\t\t- name: Add WASM & WASI targets\n"
"\t\t\trun: rustup target add wasm32-unknown-unknown && rustup target add "
"wasm32-wasi\n"
"\n"
"\t\t- name: lint\n"
"\t\t\trun: cargo clippy & cargo fmt\n"
"\n"
"\n"
"\t\t# If using tailwind...\n"
"\t\t# - name: Download and install tailwindcss binary\n"
"\t\t#   run: npm install -D tailwindcss && npx tailwindcss -i <INPUT/PATH."
"css> -o <OUTPUT/PATH.css>  # run tailwind\n"
"\n"
"\n"
"\t\t- name: Download and install Trunk binary\n"
"\t\t\trun: wget -qO- https://github.com/trunk-rs/trunk/releases/download/"
"v0.18.2/trunk-x86_64-unknown-linux-gnu.tar.gz | tar -xzf-\n"
"\n"
"\n"
"\t\t- name: Build with Trunk\n"
"\t\t\trun: ./trunk build --release\n"
"\n"
"\n"
"\t\t# Install Spin CLI & Deploy\n"
"\n"
"\t\t- name: Setup Spin\n"
"\t\t\tuses: fermyon/actions/spin/setup@v1\n"
"\t\t\t# with:\n"
"\t\t\t# plugins:\n"
"\n"
"\n"
"\t\t- name: Build and deploy\n"
"\t\t\tid: deployment\n"
"\t\t\tuses: fermyon/actions/spin/deploy@v1\n"
"\t\t\twith:\n"
"\t\t\tfermyon_token: ${{ secrets.FERMYON_CLOUD_TOKEN }}\n"
"\t\t\t# key_values: |-\n"
"\t\t\t\t# abc=xyz\n"
"\t\t\t\t# foo=bar\n"
"\t\t\t# variables: |-\n"
"\t\t\t\t# password=${{ secrets.SECURE_PASSWORD }}\n"
"\t\t\t\t# apikey=${{ secrets.API_KEY }}\n"
"\n"
"\t\t# Create an explicit message to display the URL of the deployed app, as "
"well as in the job graph\n"
"\t\t- name: Deployed URL\n"
"\t\t\trun: |\n"
"\t\t\techo \"Deployed app URL: ${{ steps.deployment.outputs.app-url }}\" >> "
"$GITHUB_STEP_SUMMARY\n"
"\n"
"```"
msgstr ""

#: src/deployment/csr.md:433
msgid "Preview deployment script: `spin_preview.yml`"
msgstr ""

#: src/deployment/csr.md:435
msgid ""
"```admonish example collapsible=true\n"
"\n"
"\t# For setup instructions needed for Fermyon Cloud, see:\n"
"\t# https://developer.fermyon.com/cloud/github-actions\n"
"\n"
"\n"
"\t# For the Fermyon gh actions themselves, see:\n"
"\t# https://github.com/fermyon/actions\n"
"\n"
"\t# Specifically:\n"
"\t# https://github.com/fermyon/actions?tab=readme-ov-file#deploy-preview-of-"
"spin-app-to-fermyon-cloud---fermyonactionsspinpreviewv1\n"
"\n"
"\tname: Preview on Spin Cloud\n"
"\n"
"\ton:\n"
"\tpull_request:\n"
"\t\tbranches: [\"main\", \"v*\"]\n"
"\t\ttypes: ['opened', 'synchronize', 'reopened', 'closed']\n"
"\tworkflow_dispatch:\n"
"\n"
"\tpermissions:\n"
"\tcontents: read\n"
"\tpull-requests: write\n"
"\n"
"\t# Allow only one concurrent deployment, skipping runs queued between the "
"run in-progress and latest queued.\n"
"\t# However, do NOT cancel in-progress runs as we want to allow these "
"production deployments to complete.\n"
"\tconcurrency:\n"
"\tgroup: \"spin\"\n"
"\tcancel-in-progress: false\n"
"\n"
"\tjobs:\n"
"\tSpin-Preview:\n"
"\n"
"\t\ttimeout-minutes: 10\n"
"\n"
"\t\tenvironment:\n"
"\t\tname: preview\n"
"\t\turl: ${{ steps.preview.outputs.app-url }}\n"
"\n"
"\t\truns-on: ubuntu-latest\n"
"\n"
"\t\tsteps:\n"
"\t\t- uses: actions/checkout@v4 # repo checkout\n"
"\n"
"\t\t# Install Rust Nightly Toolchain, with Clippy & Rustfmt\n"
"\t\t- name: Install nightly Rust\n"
"\t\t\tuses: dtolnay/rust-toolchain@nightly\n"
"\t\t\twith:\n"
"\t\t\tcomponents: clippy, rustfmt\n"
"\n"
"\t\t- name: Add WASM & WASI targets\n"
"\t\t\trun: rustup target add wasm32-unknown-unknown && rustup target add "
"wasm32-wasi\n"
"\n"
"\t\t- name: lint\n"
"\t\t\trun: cargo clippy & cargo fmt\n"
"\n"
"\n"
"\t\t# If using tailwind...\n"
"\t\t# - name: Download and install tailwindcss binary\n"
"\t\t#   run: npm install -D tailwindcss && npx tailwindcss -i <INPUT/PATH."
"css> -o <OUTPUT/PATH.css>  # run tailwind\n"
"\n"
"\n"
"\t\t- name: Download and install Trunk binary\n"
"\t\t\trun: wget -qO- https://github.com/trunk-rs/trunk/releases/download/"
"v0.18.2/trunk-x86_64-unknown-linux-gnu.tar.gz | tar -xzf-\n"
"\n"
"\n"
"\t\t- name: Build with Trunk\n"
"\t\t\trun: ./trunk build --release\n"
"\n"
"\n"
"\t\t# Install Spin CLI & Deploy\n"
"\n"
"\t\t- name: Setup Spin\n"
"\t\t\tuses: fermyon/actions/spin/setup@v1\n"
"\t\t\t# with:\n"
"\t\t\t# plugins:\n"
"\n"
"\n"
"\t\t- name: Build and preview\n"
"\t\t\tid: preview\n"
"\t\t\tuses: fermyon/actions/spin/preview@v1\n"
"\t\t\twith:\n"
"\t\t\tfermyon_token: ${{ secrets.FERMYON_CLOUD_TOKEN }}\n"
"\t\t\tgithub_token: ${{ secrets.GITHUB_TOKEN }}\n"
"\t\t\tundeploy: ${{ github.event.pull_request && github.event.action == "
"'closed' }}\n"
"\t\t\t# key_values: |-\n"
"\t\t\t\t# abc=xyz\n"
"\t\t\t\t# foo=bar\n"
"\t\t\t# variables: |-\n"
"\t\t\t\t# password=${{ secrets.SECURE_PASSWORD }}\n"
"\t\t\t\t# apikey=${{ secrets.API_KEY }}\n"
"\n"
"\n"
"\t\t- name: Display Deployed URL\n"
"\t\t\trun: |\n"
"\t\t\techo \"Deployed app URL: ${{ steps.preview.outputs.app-url }}\" >> "
"$GITHUB_STEP_SUMMARY\n"
"\n"
"```"
msgstr ""

#: src/deployment/csr.md:534
msgid ""
"See [the example repo here](https://github.com/diversable/leptos-spin-CSR)."
msgstr ""

#: src/deployment/ssr.md:1
msgid "Deploying a Full-Stack SSR App"
msgstr ""

#: src/deployment/ssr.md:3
msgid ""
"It's possible to deploy Leptos fullstack, SSR apps to any number of server "
"or container hosting services. The most simple way to get a Leptos SSR app "
"into production might be to use a VPS service and either run Leptos natively "
"in a VM ([see here for more details](https://github.com/leptos-rs/start-axum?"
"tab=readme-ov-file#executing-a-server-on-a-remote-machine-without-the-"
"toolchain)). Alternatively, you could containerize your Leptos app and run "
"it in [Podman](https://podman.io/) or [Docker](https://www.docker.com/) on "
"any colocated or cloud server."
msgstr ""

#: src/deployment/ssr.md:5
msgid ""
"There are a multitude of different deployment setups and hosting services, "
"and in general, Leptos itself is agnostic to the deployment setup you use. "
"With this diversity of deployment targets in mind, on this page we will go "
"over:"
msgstr ""

#: src/deployment/ssr.md:6
msgid ""
"[creating a `Containerfile` (or `Dockerfile`) for use with Leptos SSR apps]"
"(#creating-a-containerfile)"
msgstr ""

#: src/deployment/ssr.md:7
msgid ""
"Using a `Dockerfile` to [deploy to a cloud service](#cloud-deployments) - "
"[for example, Fly.io](#deploy-to-flyio)"
msgstr ""

#: src/deployment/ssr.md:8
msgid ""
"Deploying Leptos to [serverless runtimes](#deploy-to-serverless-runtimes) - "
"for example, [AWS Lambda](#aws-lambda) and [JS-hosted WASM runtimes like "
"Deno & Cloudflare](#deno--cloudflare-workers)"
msgstr ""

#: src/deployment/ssr.md:9
msgid ""
"[Platforms that have not yet gained Leptos SSR support](#currently-"
"unsupported-platforms)"
msgstr ""

#: src/deployment/ssr.md:11
msgid ""
"_Note: Leptos does not endorse the use of any particular method of "
"deployment or hosting service._"
msgstr ""

#: src/deployment/ssr.md:13
msgid "Creating a Containerfile"
msgstr ""

#: src/deployment/ssr.md:15
msgid ""
"The most popular way for people to deploy full-stack apps built with `cargo-"
"leptos` is to use a cloud hosting service that supports deployment via a "
"Podman or Docker build. Here’s a sample `Containerfile` / `Dockerfile`, "
"which is based on the one we use to deploy the Leptos website."
msgstr ""

#: src/deployment/ssr.md:18
msgid "Debian"
msgstr ""

#: src/deployment/ssr.md:19
msgid ""
"```dockerfile\n"
"# Get started with a build env with Rust nightly\n"
"FROM rustlang/rust:nightly-bullseye as builder\n"
"\n"
"# If you’re using stable, use this instead\n"
"# FROM rust:1.74-bullseye as builder\n"
"\n"
"# Install cargo-binstall, which makes it easier to install other\n"
"# cargo extensions like cargo-leptos\n"
"RUN wget https://github.com/cargo-bins/cargo-binstall/releases/latest/"
"download/cargo-binstall-x86_64-unknown-linux-musl.tgz\n"
"RUN tar -xvf cargo-binstall-x86_64-unknown-linux-musl.tgz\n"
"RUN cp cargo-binstall /usr/local/cargo/bin\n"
"\n"
"# Install cargo-leptos\n"
"RUN cargo binstall cargo-leptos -y\n"
"\n"
"# Add the WASM target\n"
"RUN rustup target add wasm32-unknown-unknown\n"
"\n"
"# Make an /app dir, which everything will eventually live in\n"
"RUN mkdir -p /app\n"
"WORKDIR /app\n"
"COPY . .\n"
"\n"
"# Build the app\n"
"RUN cargo leptos build --release -vv\n"
"\n"
"FROM rustlang/rust:nightly-bullseye as runner\n"
"\n"
"# -- NB: update binary name from \"leptos_start\" to match your app name in "
"Cargo.toml --\n"
"# Copy the server binary to the /app directory\n"
"COPY --from=builder /app/target/release/leptos_start /app/\n"
"\n"
"# /target/site contains our JS/WASM/CSS, etc.\n"
"COPY --from=builder /app/target/site /app/site\n"
"# Copy Cargo.toml if it’s needed at runtime\n"
"COPY --from=builder /app/Cargo.toml /app/\n"
"WORKDIR /app\n"
"\n"
"# Set any required env variables and\n"
"ENV RUST_LOG=\"info\"\n"
"ENV LEPTOS_SITE_ADDR=\"0.0.0.0:8080\"\n"
"ENV LEPTOS_SITE_ROOT=\"site\"\n"
"EXPOSE 8080\n"
"\n"
"# -- NB: update binary name from \"leptos_start\" to match your app name in "
"Cargo.toml --\n"
"# Run the server\n"
"CMD [\"/app/leptos_start\"]\n"
"```"
msgstr ""

#: src/deployment/ssr.md:68
msgid "Alpine"
msgstr ""

#: src/deployment/ssr.md:69
msgid ""
"```dockerfile\n"
"# Get started with a build env with Rust nightly\n"
"FROM rustlang/rust:nightly-alpine as builder\n"
"\n"
"RUN apk update && \\\n"
"    apk add --no-cache bash curl npm libc-dev binaryen\n"
"\n"
"RUN npm install -g sass\n"
"\n"
"RUN curl --proto '=https' --tlsv1.2 -LsSf https://github.com/leptos-rs/cargo-"
"leptos/releases/latest/download/cargo-leptos-installer.sh | sh\n"
"\n"
"# Add the WASM target\n"
"RUN rustup target add wasm32-unknown-unknown\n"
"\n"
"WORKDIR /work\n"
"COPY . .\n"
"\n"
"RUN cargo leptos build --release -vv\n"
"\n"
"FROM rustlang/rust:nightly-alpine as runner\n"
"\n"
"WORKDIR /app\n"
"\n"
"COPY --from=builder /work/target/release/leptos_start /app/\n"
"COPY --from=builder /work/target/site /app/site\n"
"COPY --from=builder /work/Cargo.toml /app/\n"
"\n"
"EXPOSE $PORT\n"
"ENV LEPTOS_SITE_ROOT=./site\n"
"\n"
"CMD [\"/app/leptos_start\"]\n"
"```"
msgstr ""

#: src/deployment/ssr.md:101
msgid ""
"Read more: [`gnu` and `musl` build files for Leptos apps](https://github.com/"
"leptos-rs/leptos/issues/1152#issuecomment-1634916088)."
msgstr ""

#: src/deployment/ssr.md:104
msgid "Cloud Deployments"
msgstr ""

#: src/deployment/ssr.md:106
msgid "Deploy to Fly.io"
msgstr ""

#: src/deployment/ssr.md:108
msgid ""
"One option for deploying your Leptos SSR app is to use a service like [Fly."
"io](https://fly.io/), which takes a Dockerfile definition of your Leptos app "
"and runs it in a quick-starting micro-VM; Fly also offers a variety of "
"storage options and managed DBs to use with your projects. The following "
"example will show how to deploy a simple Leptos starter app, just to get you "
"up and going; [see here for more about working with storage options on Fly."
"io](https://fly.io/docs/database-storage-guides/) if and when required."
msgstr ""

#: src/deployment/ssr.md:110
msgid ""
"First, create a `Dockerfile` in the root of your application and fill it in "
"with the suggested contents (above); make sure to update the binary names in "
"the Dockerfile example to the name of your own application, and make other "
"adjustments as necessary."
msgstr ""

#: src/deployment/ssr.md:113
msgid ""
"Also, ensure you have the `flyctl` CLI tool installed, and have an account "
"set up at [Fly.io](https://fly.io/). To install `flyctl` on MacOS, Linux, or "
"Windows WSL, run:"
msgstr ""

#: src/deployment/ssr.md:119
msgid ""
"If you have issues, or for installing to other platforms [see the full "
"instructions here](https://fly.io/docs/hands-on/install-flyctl/)"
msgstr ""

#: src/deployment/ssr.md:121
msgid "Then login to Fly.io"
msgstr ""

#: src/deployment/ssr.md:127
msgid "and manually launch your app using the command"
msgstr ""

#: src/deployment/ssr.md:133
msgid ""
"The `flyctl` CLI tool will walk you through the process of deploying your "
"app to Fly.io."
msgstr ""

#: src/deployment/ssr.md:135
msgid ""
"```admonish note\n"
"By default, Fly.io will auto-stop machines that don't have traffic coming to "
"them after a certain period of time. Although Fly.io's lightweight VM's "
"start up quickly, if you want to minimize the latency of your Leptos app and "
"ensure it's always swift to respond, go into the generated `fly.toml` file "
"and change the `min_machines_running` to 1 from the default of 0.\n"
"\n"
"[See this page in the Fly.io docs for more details](https://fly.io/docs/apps/"
"autostart-stop/).\n"
"```"
msgstr ""

#: src/deployment/ssr.md:141
msgid ""
"If you would prefer to use Github Actions to manage your deployments, you "
"will need to create a new access token via the [Fly.io](https://fly.io/) web "
"UI."
msgstr ""

#: src/deployment/ssr.md:143
msgid ""
"Go to \"Account\" > \"Access Tokens\" and create a token named something "
"like \"github_actions\", then add the token to your Github repo's secrets by "
"going into your project's Github repo, then clicking \"Settings\" > "
"\"Secrets and Variables\" > \"Actions\" and creating a \"New repository "
"secret\" with the name \"FLY_API_TOKEN\"."
msgstr ""

#: src/deployment/ssr.md:146
msgid ""
"To generate a `fly.toml` config file for deployment to Fly.io, you must "
"first run the following from within the project source directory"
msgstr ""

#: src/deployment/ssr.md:152
msgid ""
"to create a new Fly app and register it with the service. Git commit your "
"new `fly.toml` file."
msgstr ""

#: src/deployment/ssr.md:154
msgid ""
"To set up the Github Actions deployment workflow, copy the following into a "
"`.github/workflows/fly_deploy.yml` file:"
msgstr ""

#: src/deployment/ssr.md:157
msgid ""
"```admonish example collapsible=true\n"
"\n"
"\t# For more details, see: https://fly.io/docs/app-guides/continuous-"
"deployment-with-github-actions/\n"
"\n"
"\tname: Deploy to Fly.io\n"
"\ton:\n"
"\tpush:\n"
"\t\tbranches:\n"
"\t\t- main\n"
"\tjobs:\n"
"\tdeploy:\n"
"\t\tname: Deploy app\n"
"\t\truns-on: ubuntu-latest\n"
"\t\tsteps:\n"
"\t\t- uses: actions/checkout@v4\n"
"\t\t- uses: superfly/flyctl-actions/setup-flyctl@master\n"
"\t\t- name: Deploy to fly\n"
"\t\t\tid: deployment\n"
"\t\t\trun: |\n"
"\t\t\t  flyctl deploy --remote-only | tail -n 1 >> $GITHUB_STEP_SUMMARY\n"
"\t\t\tenv:\n"
"\t\t\t  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}\n"
"\n"
"```"
msgstr ""

#: src/deployment/ssr.md:182
msgid ""
"On the next commit to your Github `main` branch, your project will "
"automatically deploy to Fly.io."
msgstr ""

#: src/deployment/ssr.md:184
msgid ""
"See [the example repo here](https://github.com/diversable/fly-io-leptos-ssr-"
"test-deploy)."
msgstr ""

#: src/deployment/ssr.md:186
msgid "Railway"
msgstr ""

#: src/deployment/ssr.md:188
msgid ""
"Another provider for cloud deployments is [Railway](https://railway.app/). "
"Railway integrates with GitHub to automatically deploy your code."
msgstr ""

#: src/deployment/ssr.md:191
msgid ""
"There is an opinionated community template that gets you started quickly:"
msgstr ""

#: src/deployment/ssr.md:193
msgid ""
"[![Deploy on Railway](https://railway.app/button.svg)](https://railway.app/"
"template/pduaM5?referralCode=fZ-SY1)"
msgstr ""

#: src/deployment/ssr.md:195
msgid ""
"The template has renovate setup to keep dependencies up to date and supports "
"GitHub Actions to test your code before a deploy happens."
msgstr ""

#: src/deployment/ssr.md:197
msgid ""
"Railway has a free tier that does not require a credit card, and with how "
"little resources Leptos needs that free tier should last a long time."
msgstr ""

#: src/deployment/ssr.md:199
msgid ""
"See [the example repo here](https://github.com/marvin-bitterlich/leptos-"
"railway)."
msgstr ""

#: src/deployment/ssr.md:201
msgid "Deploy to Serverless Runtimes"
msgstr ""

#: src/deployment/ssr.md:203
msgid ""
"Leptos supports deploying to FaaS (Function as a Service) or 'serverless' "
"runtimes such as AWS Lambda as well as [WinterCG](https://wintercg.org/)\\-"
"compatible JS runtimes such as [Deno](https://deno.com/deploy) and "
"Cloudflare. Just be aware that serverless environments do place some "
"restrictions on the functionality available to your SSR app when compared "
"with VM or container type deployments (see notes, below)."
msgstr ""

#: src/deployment/ssr.md:205
msgid "AWS Lambda"
msgstr ""

#: src/deployment/ssr.md:207
msgid ""
"With a little help from the [Cargo Lambda](https://www.cargo-lambda.info/) "
"tool, Leptos SSR apps can be deployed to AWS Lambda. A starter template repo "
"using Axum as the server is available at [leptos-rs/start-aws](https://"
"github.com/leptos-rs/start-aws); the instructions there can be adapted for "
"you to use a Leptos+Actix-web server as well. The starter repo includes a "
"Github Actions script for CI/CD, as well as instructions for setting up your "
"Lambda functions and getting the necessary credentials for cloud deployment."
msgstr ""

#: src/deployment/ssr.md:209
msgid ""
"However, please keep in mind that some native server functionality does not "
"work with FaaS services like Lambda because the environment is not "
"necessarily consistent from one request to the next. In particular, the "
"['start-aws' docs](https://github.com/leptos-rs/start-aws#state) state that "
"\"since AWS Lambda is a serverless platform, you'll need to be more careful "
"about how you manage long-lived state. Writing to disk or using a state "
"extractor will not work reliably across requests. Instead, you'll need a "
"database or other microservices that you can query from the Lambda function."
"\""
msgstr ""

#: src/deployment/ssr.md:211
msgid ""
"The other factor to bear in mind is the 'cold-start' time for functions as a "
"service - depending on your use case and the FaaS platform you use, this may "
"or may not meet your latency requirements; you may need to keep one function "
"running at all times to optimize the speed of your requests."
msgstr ""

#: src/deployment/ssr.md:215
msgid "Deno & Cloudflare Workers"
msgstr ""

#: src/deployment/ssr.md:217
msgid ""
"Currently, Leptos-Axum supports running in Javascript-hosted WebAssembly "
"runtimes such as Deno, Cloudflare Workers, etc. This option requires some "
"changes to the setup of your source code (for example, in `Cargo.toml` you "
"must define your app using `crate-type = [\"cdylib\"]` and the \"wasm\" "
"feature must be enabled for `leptos_axum`). [The Leptos HackerNews JS-fetch "
"example](https://github.com/leptos-rs/leptos/tree/main/examples/"
"hackernews_js_fetch) demonstrates the required modifications and shows how "
"to run an app in the Deno runtime. Additionally, the [`leptos_axum` crate "
"docs](https://docs.rs/leptos_axum/latest/leptos_axum/#js-fetch-integration) "
"are a helpful reference when setting up your own `Cargo.toml` file for JS-"
"hosted WASM runtimes."
msgstr ""

#: src/deployment/ssr.md:219
msgid ""
"While the initial setup for JS-hosted WASM runtimes is not onerous, the more "
"important restriction to keep in mind is that since your app will be "
"compiled to WebAssembly (`wasm32-unknown-unknown`) on the server as well as "
"the client, you must ensure that the crates you use in your app are all WASM-"
"compatible; this may or may not be a deal-breaker depending on your app's "
"requirements, as not all crates in the Rust ecosystem have WASM support."
msgstr ""

#: src/deployment/ssr.md:221
msgid ""
"If you're willing to live with the limitations of WASM server-side, the best "
"place to get started right now is by checking out the [example of running "
"Leptos with Deno](https://github.com/leptos-rs/leptos/tree/main/examples/"
"hackernews_js_fetch) in the official Leptos Github repo."
msgstr ""

#: src/deployment/ssr.md:224
msgid "Platforms Working on Leptos Support"
msgstr ""

#: src/deployment/ssr.md:226
msgid "Deploy to Spin Serverless WASI (with Leptos SSR)"
msgstr ""

#: src/deployment/ssr.md:228
msgid ""
"WebAssembly on the server has been gaining steam lately, and the developers "
"of the open source serverless WebAssembly framework Spin are working on "
"natively supporting Leptos. While the Leptos-Spin SSR integration is still "
"in its early stages, there is a working example you may wish to try out."
msgstr ""

#: src/deployment/ssr.md:230
msgid ""
"The full set of instructions to get Leptos SSR & Spin working together are "
"available as [a post on the Fermyon blog](https://www.fermyon.com/blog/"
"leptos-spin-get-started), or if you want to skip the article and just start "
"playing around with a working starter repo, [see here](https://github.com/"
"diversable/leptos-spin-ssr-test)."
msgstr ""

#: src/deployment/ssr.md:235
msgid "Deploy to Shuttle.rs"
msgstr ""

#: src/deployment/ssr.md:237
msgid ""
"Several Leptos users have asked about the possibility of using the Rust-"
"friendly [Shuttle.rs](https://www.shuttle.rs/) service to deploy Leptos "
"apps. Unfortunately, Leptos is not officially supported by the Shuttle.rs "
"service at the moment."
msgstr ""

#: src/deployment/ssr.md:239
msgid ""
"However, the folks at Shuttle.rs are committed to getting Leptos support in "
"the future; if you would like to keep up-to-date on the status of that work, "
"keep an eye on [this Github issue](https://github.com/shuttle-hq/shuttle/"
"issues/1002#issuecomment-1853661643)."
msgstr ""

#: src/deployment/ssr.md:241
msgid ""
"Additionally, some effort has been made to get Shuttle working with Leptos, "
"but to date, deploys to the Shuttle cloud are still not working as expected. "
"That work is available here, if you would like to investigate for yourself "
"or contribute fixes: [Leptos Axum Starter Template for Shuttle.rs](https://"
"github.com/Rust-WASI-WASM/shuttle-leptos-axum)."
msgstr ""

#: src/deployment/binary_size.md:3
msgid ""
"One of the primary downsides of deploying a Rust/WebAssembly frontend app is "
"that splitting a WASM file into smaller chunks to be dynamically loaded is "
"significantly more difficult than splitting a JavaScript bundle. There have "
"been experiments like [`wasm-split`](https://emscripten.org/docs/optimizing/"
"Module-Splitting.html) in the Emscripten ecosystem but at present there’s no "
"way to split and dynamically load a Rust/`wasm-bindgen` binary. This means "
"that the whole WASM binary needs to be loaded before your app becomes "
"interactive. Because the WASM format is designed for streaming compilation, "
"WASM files are much faster to compile per kilobyte than JavaScript files. "
"(For a deeper look, you can [read this great article from the Mozilla team]"
"(https://hacks.mozilla.org/2018/01/making-webassembly-even-faster-firefoxs-"
"new-streaming-and-tiering-compiler/) on streaming WASM compilation.)"
msgstr ""

#: src/deployment/binary_size.md:5
msgid ""
"Still, it’s important to ship the smallest WASM binary to users that you "
"can, as it will reduce their network usage and make your app interactive as "
"quickly as possible."
msgstr ""

#: src/deployment/binary_size.md:7
msgid "So what are some practical steps?"
msgstr ""

#: src/deployment/binary_size.md:9
msgid "Things to Do"
msgstr ""

#: src/deployment/binary_size.md:11
msgid ""
"Make sure you’re looking at a release build. (Debug builds are much, much "
"larger.)"
msgstr ""

#: src/deployment/binary_size.md:12
msgid "Add a release profile for WASM that optimizes for size, not speed."
msgstr ""

#: src/deployment/binary_size.md:14
msgid ""
"For a `cargo-leptos` project, for example, you can add this to your `Cargo."
"toml`:"
msgstr ""

#: src/deployment/binary_size.md:16
msgid ""
"```toml\n"
"[profile.wasm-release]\n"
"inherits = \"release\"\n"
"opt-level = 'z'\n"
"lto = true\n"
"codegen-units = 1\n"
"\n"
"# ....\n"
"\n"
"[package.metadata.leptos]\n"
"# ....\n"
"lib-profile-release = \"wasm-release\"\n"
"```"
msgstr ""

#: src/deployment/binary_size.md:30
msgid ""
"This will hyper-optimize the WASM for your release build for size, while "
"keeping your server build optimized for speed. (For a pure client-rendered "
"app without server considerations, just use the `[profile.wasm-release]` "
"block as your `[profile.release]`.)"
msgstr ""

#: src/deployment/binary_size.md:32
msgid ""
"Always serve compressed WASM in production. WASM tends to compress very "
"well, typically shrinking to less than 50% its uncompressed size, and it’s "
"trivial to enable compression for static files being served from Actix or "
"Axum."
msgstr ""

#: src/deployment/binary_size.md:34
msgid ""
"If you’re using nightly Rust, you can rebuild the standard library with this "
"same profile rather than the prebuilt standard library that’s distributed "
"with the `wasm32-unknown-unknown` target."
msgstr ""

#: src/deployment/binary_size.md:36
msgid "To do this, create a file in your project at `.cargo/config.toml`"
msgstr ""

#: src/deployment/binary_size.md:38
msgid ""
"```toml\n"
"[unstable]\n"
"build-std = [\"std\", \"panic_abort\", \"core\", \"alloc\"]\n"
"build-std-features = [\"panic_immediate_abort\"]\n"
"```"
msgstr ""

#: src/deployment/binary_size.md:44
msgid ""
"Note that if you're using this with SSR too, the same Cargo profile will be "
"applied. You'll need to explicitly specify your target:"
msgstr ""

#: src/deployment/binary_size.md:45
msgid ""
"```toml\n"
"[build]\n"
"target = \"x86_64-unknown-linux-gnu\" # or whatever\n"
"```"
msgstr ""

#: src/deployment/binary_size.md:50
msgid ""
"Also note that in some cases, the cfg feature `has_std` will not be set, "
"which may cause build errors with some dependencies which check for "
"`has_std`. You may fix any build errors due to this by adding:"
msgstr ""

#: src/deployment/binary_size.md:51
msgid ""
"```toml\n"
"[build]\n"
"rustflags = [\"--cfg=has_std\"]\n"
"```"
msgstr ""

#: src/deployment/binary_size.md:56
msgid ""
"And you'll need to add `panic = \"abort\"` to `[profile.release]` in `Cargo."
"toml`. Note that this applies the same `build-std` and panic settings to "
"your server binary, which may not be desirable. Some further exploration is "
"probably needed here."
msgstr ""

#: src/deployment/binary_size.md:58
msgid ""
"One of the sources of binary size in WASM binaries can be `serde` "
"serialization/deserialization code. Leptos uses `serde` by default to "
"serialize and deserialize resources created with `create_resource`. You "
"might try experimenting with the `miniserde` and `serde-lite` features, "
"which allow you to use those crates for serialization and deserialization "
"instead; each only implements a subset of `serde`’s functionality, but "
"typically optimizes for size over speed."
msgstr ""

#: src/deployment/binary_size.md:60
msgid "Things to Avoid"
msgstr ""

#: src/deployment/binary_size.md:62
msgid ""
"There are certain crates that tend to inflate binary sizes. For example, the "
"`regex` crate with its default features adds about 500kb to a WASM binary "
"(largely because it has to pull in Unicode table data!). In a size-conscious "
"setting, you might consider avoiding regexes in general, or even dropping "
"down and calling browser APIs to use the built-in regex engine instead. "
"(This is what `leptos_router` does on the few occasions it needs a regular "
"expression.)"
msgstr ""

#: src/deployment/binary_size.md:64
msgid ""
"In general, Rust’s commitment to runtime performance is sometimes at odds "
"with a commitment to a small binary. For example, Rust monomorphizes generic "
"functions, meaning it creates a distinct copy of the function for each "
"generic type it’s called with. This is significantly faster than dynamic "
"dispatch, but increases binary size. Leptos tries to balance runtime "
"performance with binary size considerations pretty carefully; but you might "
"find that writing code that uses many generics tends to increase binary "
"size. For example, if you have a generic component with a lot of code in its "
"body and call it with four different types, remember that the compiler could "
"include four copies of that same code. Refactoring to use a concrete inner "
"function or helper can often maintain performance and ergonomics while "
"reducing binary size."
msgstr ""

#: src/deployment/binary_size.md:66
msgid "A Final Thought"
msgstr ""

#: src/deployment/binary_size.md:68
msgid ""
"Remember that in a server-rendered app, JS bundle size/WASM binary size "
"affects only _one_ thing: time to interactivity on the first load. This is "
"very important to a good user experience: nobody wants to click a button "
"three times and have it do nothing because the interactive code is still "
"loading — but it's not the only important measure."
msgstr ""

#: src/deployment/binary_size.md:70
msgid ""
"It’s especially worth remembering that streaming in a single WASM binary "
"means all subsequent navigations are nearly instantaneous, depending only on "
"any additional data loading. Precisely because your WASM binary is _not_ "
"bundle split, navigating to a new route does not require loading additional "
"JS/WASM, as it does in nearly every JavaScript framework. Is this copium? "
"Maybe. Or maybe it’s just an honest trade-off between the two approaches!"
msgstr ""

#: src/deployment/binary_size.md:72
msgid ""
"Always take the opportunity to optimize the low-hanging fruit in your "
"application. And always test your app under real circumstances with real "
"user network speeds and devices before making any heroic efforts."
msgstr ""

#: src/islands.md:3
msgid ""
"Leptos 0.5 introduces the new `experimental-islands` feature. This guide "
"will walk through the islands feature and core concepts, while implementing "
"a demo app using the islands architecture."
msgstr ""

#: src/islands.md:5
msgid "The Islands Architecture"
msgstr ""

#: src/islands.md:7
msgid ""
"The dominant JavaScript frontend frameworks (React, Vue, Svelte, Solid, "
"Angular) all originated as frameworks for building client-rendered single-"
"page apps (SPAs). The initial page load is rendered to HTML, then hydrated, "
"and subsequent navigations are handled directly in the client. (Hence "
"“single page”: everything happens from a single page load from the server, "
"even if there is client-side routing later.) Each of these frameworks later "
"added server-side rendering to improve initial load times, SEO, and user "
"experience."
msgstr ""

#: src/islands.md:9
msgid ""
"This means that by default, the entire app is interactive. It also means "
"that the entire app has to be shipped to the client as JavaScript in order "
"to be hydrated. Leptos has followed this same pattern."
msgstr ""

#: src/islands.md:11
msgid ""
"You can read more in the chapters on [server-side rendering](./"
"ssr/22_life_cycle.md)."
msgstr ""

#: src/islands.md:13
msgid ""
"But it’s also possible to work in the opposite direction. Rather than taking "
"an entirely-interactive app, rendering it to HTML on the server, and then "
"hydrating it in the browser, you can begin with a plain HTML page and add "
"small areas of interactivity. This is the traditional format for any website "
"or app before the 2010s: your browser makes a series of requests to the "
"server and returns the HTML for each new page in response. After the rise of "
"“single-page apps” (SPA), this approach has sometimes become known as a "
"“multi-page app” (MPA) by comparison."
msgstr ""

#: src/islands.md:15
msgid ""
"The phrase “islands architecture” has emerged recently to describe the "
"approach of beginning with a “sea” of server-rendered HTML pages, and adding "
"“islands” of interactivity throughout the page."
msgstr ""

#: src/islands.md:17
msgid "Additional Reading"
msgstr ""

#: src/islands.md:19
msgid ""
"The rest of this guide will look at how to use islands with Leptos. For more "
"background on the approach in general, check out some of the articles below:"
msgstr ""

#: src/islands.md:21
msgid ""
"Jason Miller, [“Islands Architecture”](https://jasonformat.com/islands-"
"architecture/), Jason Miller"
msgstr ""

#: src/islands.md:22
msgid ""
"Ryan Carniato, [“Islands & Server Components & Resumability, Oh My!”]"
"(https://dev.to/this-is-learning/islands-server-components-resumability-oh-"
"my-319d)"
msgstr ""

#: src/islands.md:23
msgid ""
"[“Islands Architectures”](https://www.patterns.dev/posts/islands-"
"architecture) on patterns.dev"
msgstr ""

#: src/islands.md:24
msgid "[Astro Islands](https://docs.astro.build/en/concepts/islands/)"
msgstr ""

#: src/islands.md:26
msgid "Activating Islands Mode"
msgstr ""

#: src/islands.md:28
msgid "Let’s start with a fresh `cargo-leptos` app:"
msgstr ""

#: src/islands.md:34
msgid ""
"I’m using Actix because I like it. Feel free to use Axum; there should be "
"approximately no server-specific differences in this guide."
msgstr ""

#: src/islands.md:36
msgid "I’m just going to run"
msgstr ""

#: src/islands.md:42
msgid "in the background while I fire up my editor and keep writing."
msgstr ""

#: src/islands.md:44
msgid ""
"The first thing I’ll do is to add the `experimental-islands` feature in my "
"`Cargo.toml`. I need to add this to both `leptos` and `leptos_actix`:"
msgstr ""

#: src/islands.md:46
msgid ""
"```toml\n"
"leptos = { version = \"0.5\", features = [\"nightly\", \"experimental-islands"
"\"] }\n"
"leptos_actix = { version = \"0.5\", optional = true, features = [\n"
"  \"experimental-islands\",\n"
"] }\n"
"```"
msgstr ""

#: src/islands.md:53
msgid ""
"Next I’m going to modify the `hydrate` function exported from `src/lib.rs`. "
"I’m going to remove the line that calls `leptos::mount_to_body(App)` and "
"replace it with"
msgstr ""

#: src/islands.md:59
msgid ""
"Each “island” we create will actually act as its own entrypoint, so our "
"`hydrate()` function just says “okay, hydration’s done now.”"
msgstr ""

#: src/islands.md:61
msgid ""
"Okay, now fire up your `cargo leptos watch` and go to [`http://"
"localhost:3000`](http://localhost:3000) (or wherever)."
msgstr ""

#: src/islands.md:63
msgid "Click the button, and..."
msgstr ""

#: src/islands.md:65
msgid "Nothing happens!"
msgstr ""

#: src/islands.md:67
msgid "Perfect."
msgstr ""

#: src/islands.md:69
msgid "Using Islands"
msgstr ""

#: src/islands.md:71
msgid ""
"Nothing happens because we’ve just totally inverted the mental model of our "
"app. Rather than being interactive by default and hydrating everything, the "
"app is now plain HTML by default, and we need to opt into interactivity."
msgstr ""

#: src/islands.md:73
msgid ""
"This has a big effect on WASM binary sizes: if I compile in release mode, "
"this app is a measly 24kb of WASM (uncompressed), compared to 355kb in non-"
"islands mode. (355kb is quite large for a “Hello, world!” It’s really just "
"all the code related to client-side routing, which isn’t being used in the "
"demo.)"
msgstr ""

#: src/islands.md:75
msgid ""
"When we click the button, nothing happens, because our whole page is static."
msgstr ""

#: src/islands.md:77
msgid "So how do we make something happen?"
msgstr ""

#: src/islands.md:79
msgid "Let’s turn the `HomePage` component into an island!"
msgstr ""

#: src/islands.md:81
msgid "Here was the non-interactive version:"
msgstr ""

#: src/islands.md:86 src/islands.md:102 src/islands.md:146
msgid "// Creates a reactive value to update the button\n"
msgstr ""

#: src/islands.md:91 src/islands.md:107 src/islands.md:139 src/islands.md:224
#: src/islands.md:298 src/islands.md:437
msgid "\"Welcome to Leptos!\""
msgstr ""

#: src/islands.md:92 src/islands.md:108 src/islands.md:151
msgid "\"Click Me: \""
msgstr ""

#: src/islands.md:97
msgid "Here’s the interactive version:"
msgstr ""

#: src/islands.md:113
msgid "Now when I click the button, it works!"
msgstr ""

#: src/islands.md:115
msgid ""
"The `#[island]` macro works exactly like the `#[component]` macro, except "
"that in islands mode, it designates this as an interactive island. If we "
"check the binary size again, this is 166kb uncompressed in release mode; "
"much larger than the 24kb totally static version, but much smaller than the "
"355kb fully-hydrated version."
msgstr ""

#: src/islands.md:117
msgid ""
"If you open up the source for the page now, you’ll see that your `HomePage` "
"island has been rendered as a special `<leptos-island>` HTML element which "
"specifies which component should be used to hydrate it:"
msgstr ""

#: src/islands.md:120
msgid "\"HomePage\""
msgstr ""

#: src/islands.md:120 src/islands.md:236
msgid "\"0-0-0\""
msgstr ""

#: src/islands.md:121
msgid "\"0-0-2\""
msgstr ""

#: src/islands.md:122
msgid "\"0-0-3\""
msgstr ""

#: src/islands.md:124
msgid "<!-- <DynChild> -->"
msgstr ""

#: src/islands.md:124
msgid "<!-- </DynChild> -->"
msgstr ""

#: src/islands.md:129
msgid ""
"The typical Leptos hydration keys and markers are only present inside the "
"island, only the island is hydrated."
msgstr ""

#: src/islands.md:131
msgid "Using Islands Effectively"
msgstr ""

#: src/islands.md:133
msgid ""
"Remember that _only_ code within an `#[island]` needs to be compiled to WASM "
"and shipped to the browser. This means that islands should be as small and "
"specific as possible. My `HomePage`, for example, would be better broken "
"apart into a regular component and an island:"
msgstr ""

#: src/islands.md:156
msgid ""
"Now the `<h1>` doesn’t need to be included in the client bundle, or "
"hydrated. This seems like a silly distinction now; but note that you can now "
"add as much inert HTML content as you want to the `HomePage` itself, and the "
"WASM binary size will remain exactly the same."
msgstr ""

#: src/islands.md:158
msgid ""
"In regular hydration mode, your WASM binary size grows as a function of the "
"size/complexity of your app. In islands mode, your WASM binary grows as a "
"function of the amount of interactivity in your app. You can add as much non-"
"interactive content as you want, outside islands, and it will not increase "
"that binary size."
msgstr ""

#: src/islands.md:160
msgid "Unlocking Superpowers"
msgstr ""

#: src/islands.md:162
msgid ""
"So, this 50% reduction in WASM binary size is nice. But really, what’s the "
"point?"
msgstr ""

#: src/islands.md:164
msgid "The point comes when you combine two key facts:"
msgstr ""

#: src/islands.md:166
msgid "Code inside `#[component]` functions now _only_ runs on the server."
msgstr ""

#: src/islands.md:167
msgid ""
"Children and props can be passed from the server to islands, without being "
"included in the WASM binary."
msgstr ""

#: src/islands.md:169
msgid ""
"This means you can run server-only code directly in the body of a component, "
"and pass it directly into the children. Certain tasks that take a complex "
"blend of server functions and Suspense in fully-hydrated apps can be done "
"inline in islands."
msgstr ""

#: src/islands.md:171
msgid "We’re going to rely on a third fact in the rest of this demo:"
msgstr ""

#: src/islands.md:173
msgid "Context can be passed between otherwise-independent islands."
msgstr ""

#: src/islands.md:175
msgid ""
"So, instead of our counter demo, let’s make something a little more fun: a "
"tabbed interface that reads data from files on the server."
msgstr ""

#: src/islands.md:177
msgid "Passing Server Children to Islands"
msgstr ""

#: src/islands.md:179
msgid ""
"One of the most powerful things about islands is that you can pass server-"
"rendered children into an island, without the island needing to know "
"anything about them. Islands hydrate their own content, but not children "
"that are passed to them."
msgstr ""

#: src/islands.md:181
msgid ""
"As Dan Abramov of React put it (in the very similar context of RSCs), "
"islands aren’t really islands: they’re donuts. You can pass server-only "
"content directly into the “donut hole,” as it were, allowing you to create "
"tiny atolls of interactivity, surrounded on _both_ sides by the sea of inert "
"server HTML."
msgstr ""

#: src/islands.md:183
msgid ""
"In the demo code included below, I added some styles to show all server "
"content as a light-blue “sea,” and all islands as light-green “land.” "
"Hopefully that will help picture what I’m talking about!"
msgstr ""

#: src/islands.md:185
msgid ""
"To continue with the demo: I’m going to create a `Tabs` component. Switching "
"between tabs will require some interactivity, so of course this will be an "
"island. Let’s start simple for now:"
msgstr ""

#: src/islands.md:195
msgid "\"display: flex; width: 100%; justify-content: space-between;\""
msgstr ""

#: src/islands.md:202
msgid "Oops. This gives me an error"
msgstr ""

#: src/islands.md:212
msgid ""
"Easy fix: let’s `cargo add serde --features=derive`. The `#[island]` macro "
"wants to pull in `serde` here because it needs to serialize and deserialize "
"the `labels` prop."
msgstr ""

#: src/islands.md:214
msgid "Now let’s update the `HomePage` to use `Tabs`."
msgstr ""

#: src/islands.md:219
msgid "// these are the files we’re going to read\n"
msgstr ""

#: src/islands.md:220 src/islands.md:279 src/islands.md:416
msgid "\"a.txt\""
msgstr ""

#: src/islands.md:220 src/islands.md:279 src/islands.md:416
msgid "\"b.txt\""
msgstr ""

#: src/islands.md:220 src/islands.md:279 src/islands.md:416
msgid "\"c.txt\""
msgstr ""

#: src/islands.md:221
msgid "// the tab labels will just be the file names\n"
msgstr ""

#: src/islands.md:225 src/islands.md:299 src/islands.md:438
msgid "\"Click any of the tabs below to read a recipe.\""
msgstr ""

#: src/islands.md:231
msgid ""
"If you take a look in the DOM inspector, you’ll see the island is now "
"something like"
msgstr ""

#: src/islands.md:235
msgid "\"Tabs\""
msgstr ""

#: src/islands.md:237
msgid "'{\"labels\":[\"a.txt\",\"b.txt\",\"c.txt\"]}'"
msgstr ""

#: src/islands.md:241
msgid ""
"Our `labels` prop is getting serialized to JSON and stored in an HTML "
"attribute so it can be used to hydrate the island."
msgstr ""

#: src/islands.md:243
msgid ""
"Now let’s add some tabs. For the moment, a `Tab` island will be really "
"simple:"
msgstr ""

#: src/islands.md:254
msgid "Each tab, for now will just be a `<div>` wrapping its children."
msgstr ""

#: src/islands.md:256
msgid ""
"Our `Tabs` component will also get some children: for now, let’s just show "
"them all."
msgstr ""

#: src/islands.md:266
msgid "\"display: flex; width: 100%; justify-content: space-around;\""
msgstr ""

#: src/islands.md:274
msgid ""
"Okay, now let’s go back into the `HomePage`. We’re going to create the list "
"of tabs to put into our tab box."
msgstr ""

#: src/islands.md:307
msgid "Uh... What?"
msgstr ""

#: src/islands.md:309
msgid ""
"If you’re used to using Leptos, you know that you just can’t do this. All "
"code in the body of components has to run on the server (to be rendered to "
"HTML) and in the browser (to hydrate), so you can’t just call `std::fs`; it "
"will panic, because there’s no access to the local filesystem (and certainly "
"not to the server filesystem!) in the browser. This would be a security "
"nightmare!"
msgstr ""

#: src/islands.md:311
msgid ""
"Except... wait. We’re in islands mode. This `HomePage` component _really "
"does_ only run on the server. So we can, in fact, just use ordinary server "
"code like this."
msgstr ""

#: src/islands.md:313
msgid ""
"**Is this a dumb example?** Yes! Synchronously reading from three different "
"local files in a `.map()` is not a good choice in real life. The point here "
"is just to demonstrate that this is, definitely, server-only content."
msgstr ""

#: src/islands.md:315
msgid ""
"Go ahead and create three files in the root of the project called `a.txt`, "
"`b.txt`, and `c.txt`, and fill them in with whatever content you’d like."
msgstr ""

#: src/islands.md:317
msgid ""
"Refresh the page and you should see the content in the browser. Edit the "
"files and refresh again; it will be updated."
msgstr ""

#: src/islands.md:319
msgid ""
"You can pass server-only content from a `#[component]` into the children of "
"an `#[island]`, without the island needing to know anything about how to "
"access that data or render that content."
msgstr ""

#: src/islands.md:321
msgid ""
"**This is really important.** Passing server `children` to islands means "
"that you can keep islands small. Ideally, you don’t want to slap and "
"`#[island]` around a whole chunk of your page. You want to break that chunk "
"out into an interactive piece, which can be an `#[island]`, and a bunch of "
"additional server content that can be passed to that island as `children`, "
"so that the non-interactive subsections of an interactive part of the page "
"can be kept out of the WASM binary."
msgstr ""

#: src/islands.md:323
msgid "Passing Context Between Islands"
msgstr ""

#: src/islands.md:325
msgid ""
"These aren’t really “tabs” yet: they just show every tab, all the time. So "
"let’s add some simple logic to our `Tabs` and `Tab` components."
msgstr ""

#: src/islands.md:327
msgid ""
"We’ll modify `Tabs` to create a simple `selected` signal. We provide the "
"read half via context, and set the value of the signal whenever someone "
"clicks one of our buttons."
msgstr ""

#: src/islands.md:347
msgid ""
"And let’s modify the `Tab` island to use that context to show or hide itself:"
msgstr ""

#: src/islands.md:355 src/islands.md:480
msgid "\"block\""
msgstr ""

#: src/islands.md:357 src/islands.md:482
msgid "\"none\""
msgstr ""

#: src/islands.md:362
msgid ""
"Now the tabs behave exactly as I’d expect. `Tabs` passes the signal via "
"context to each `Tab`, which uses it to determine whether it should be open "
"or not."
msgstr ""

#: src/islands.md:364
msgid ""
"That’s why in `HomePage`, I made `let tabs = move ||` a function, and called "
"it like `{tabs()}`: creating the tabs lazily this way meant that the `Tabs` "
"island would already have provided the `selected` context by the time each "
"`Tab` went looking for it."
msgstr ""

#: src/islands.md:366
msgid ""
"Our complete tabs demo is about 220kb uncompressed: not the smallest demo in "
"the world, but still about a third smaller than the counter button! Just for "
"kicks, I built the same demo without islands mode, using `#[server]` "
"functions and `Suspense`. and it was 429kb. So again, this was about a 50% "
"savings in binary size. And this app includes quite minimal server-only "
"content: remember that as we add additional server-only components and "
"pages, this 220 will not grow."
msgstr ""

#: src/islands.md:370
msgid ""
"This demo may seem pretty basic. It is. But there are a number of immediate "
"takeaways:"
msgstr ""

#: src/islands.md:372
msgid ""
"**50% WASM binary size reduction**, which means measurable improvements in "
"time to interactivity and initial load times for clients."
msgstr ""

#: src/islands.md:373
msgid ""
"**Reduced HTML page size.** This one is less obvious, but it’s true and "
"important: HTML generated from `#[component]`s doesn’t need all the "
"hydration IDs and other boilerplate added."
msgstr ""

#: src/islands.md:374
msgid ""
"**Reduced data serialization costs.** Creating a resource and reading it on "
"the client means you need to serialize the data, so it can be used for "
"hydration. If you’ve also read that data to create HTML in a `Suspense`, you "
"end up with “double data,” i.e., the same exact data is both rendered to "
"HTML and serialized as JSON, increasing the size of responses, and therefore "
"slowing them down."
msgstr ""

#: src/islands.md:375
msgid ""
"**Easily use server-only APIs** inside a `#[component]` as if it were a "
"normal, native Rust function running on the server—which, in islands mode, "
"it is!"
msgstr ""

#: src/islands.md:376
msgid ""
"**Reduced `#[server]`/`create_resource`/`Suspense` boilerplate** for loading "
"server data."
msgstr ""

#: src/islands.md:378
msgid "Future Exploration"
msgstr ""

#: src/islands.md:380
msgid ""
"The `experimental-islands` feature included in 0.5 reflects work at the "
"cutting edge of what frontend web frameworks are exploring right now. As it "
"stands, our islands approach is very similar to Astro (before its recent "
"View Transitions support): it allows you to build a traditional server-"
"rendered, multi-page app and pretty seamlessly integrate islands of "
"interactivity."
msgstr ""

#: src/islands.md:382
msgid ""
"There are some small improvements that will be easy to add. For example, we "
"can do something very much like Astro's View Transitions approach:"
msgstr ""

#: src/islands.md:384
msgid ""
"add client-side routing for islands apps by fetching subsequent navigations "
"from the server and replacing the HTML document with the new one"
msgstr ""

#: src/islands.md:385
msgid ""
"add animated transitions between the old and new document using the View "
"Transitions API"
msgstr ""

#: src/islands.md:386
msgid ""
"support explicit persistent islands, i.e., islands that you can mark with "
"unique IDs (something like `persist:searchbar` on the component in the "
"view), which can be copied over from the old to the new document without "
"losing their current state"
msgstr ""

#: src/islands.md:388
msgid ""
"There are other, larger architectural changes that I’m [not sold on yet]"
"(https://github.com/leptos-rs/leptos/issues/1830)."
msgstr ""

#: src/islands.md:390
msgid "Additional Information"
msgstr ""

#: src/islands.md:392
msgid ""
"Check out the [islands PR](https://github.com/leptos-rs/leptos/pull/1660), "
"[roadmap](https://github.com/leptos-rs/leptos/issues/1830), and [Hackernews "
"demo](https://github.com/leptos-rs/leptos/tree/main/examples/"
"hackernews_islands_axum) for additional discussion."
msgstr ""

#: src/islands.md:394
msgid "Demo Code"
msgstr ""

#: src/islands.md:404 src/islands.md:426
msgid "\"background-color: lightblue; padding: 10px\""
msgstr ""

#: src/islands.md:412
msgid "/// Renders the home page of your application.\n"
msgstr ""

#: src/islands.md:463
msgid ""
"\"display: flex; width: 100%; justify-content: space-around;\\\n"
"            background-color: lightgreen; padding: 10px;\""
msgstr ""

#: src/islands.md:477
msgid "\"lightgreen\""
msgstr ""

#: src/islands.md:478
msgid "\"10px\""
msgstr ""

#: src/appendix_reactive_graph.md:1
msgid "Appendix: How does the Reactive System Work?"
msgstr ""

#: src/appendix_reactive_graph.md:3
msgid ""
"You don’t need to know very much about how the reactive system actually "
"works in order to use the library successfully. But it’s always useful to "
"understand what’s going on behind the scenes once you start working with the "
"framework at an advanced level."
msgstr ""

#: src/appendix_reactive_graph.md:5
msgid "The reactive primitives you use are divided into three sets:"
msgstr ""

#: src/appendix_reactive_graph.md:7
msgid ""
"**Signals** (`ReadSignal`/`WriteSignal`, `RwSignal`, `Resource`, `Trigger`) "
"Values you can actively change to trigger reactive updates."
msgstr ""

#: src/appendix_reactive_graph.md:8
msgid ""
"**Computations** (`Memo`s) Values that depend on signals (or other "
"computations) and derive a new reactive value through some pure computation."
msgstr ""

#: src/appendix_reactive_graph.md:9
msgid ""
"**Effects** Observers that listen to changes in some signals or computations "
"and run a function, causing some side effect."
msgstr ""

#: src/appendix_reactive_graph.md:11
msgid ""
"Derived signals are a kind of non-primitve computation: as plain closures, "
"they simply allow you to refactor some repeated signal-based computation "
"into a reusable function that can be called in multiple places, but they are "
"not represented in the reactive system itself."
msgstr ""

#: src/appendix_reactive_graph.md:13
msgid ""
"All the other primitives actually exist in the reactive system as nodes in a "
"reactive graph."
msgstr ""

#: src/appendix_reactive_graph.md:15
msgid ""
"Most of the work of the reactive system consists of propagating changes from "
"signals to effects, possibly through some intervening memos."
msgstr ""

#: src/appendix_reactive_graph.md:17
msgid ""
"The assumption of the reactive system is that effects (like rendering to the "
"DOM or making a network request) are orders of magnitude more expensive than "
"things like updating a Rust data structure inside your app."
msgstr ""

#: src/appendix_reactive_graph.md:19
msgid ""
"So the **primary goal** of the reactive system is to **run effects as "
"infrequently as possible**."
msgstr ""

#: src/appendix_reactive_graph.md:21
msgid "Leptos does this through the construction of a reactive graph."
msgstr ""

#: src/appendix_reactive_graph.md:23
msgid ""
"Leptos’s current reactive system is based heavily on the [Reactively]"
"(https://github.com/modderme123/reactively) library for JavaScript. You can "
"read Milo’s article “[Super-Charging Fine-Grained Reactivity](https://dev.to/"
"modderme123/super-charging-fine-grained-reactive-performance-47ph)” for an "
"excellent account of its algorithm, as well as fine-grained reactivity in "
"general—including some beautiful diagrams!"
msgstr ""

#: src/appendix_reactive_graph.md:25
msgid "The Reactive Graph"
msgstr ""

#: src/appendix_reactive_graph.md:27
msgid "Signals, memos, and effects all share three characteristics:"
msgstr ""

#: src/appendix_reactive_graph.md:29
msgid ""
"**Value** They have a current value: either the signal’s value, or (for "
"memos and effects) the value returned by the previous run, if any."
msgstr ""

#: src/appendix_reactive_graph.md:30
msgid ""
"**Sources** Any other reactive primitives they depend on. (For signals, this "
"is an empty set.)"
msgstr ""

#: src/appendix_reactive_graph.md:31
msgid ""
"**Subscribers** Any other reactive primitives that depend on them. (For "
"effects, this is an empty set.)"
msgstr ""

#: src/appendix_reactive_graph.md:33
msgid ""
"In reality then, signals, memos, and effects are just conventional names for "
"one generic concept of a “node” in a reactive graph. Signals are always "
"“root nodes,” with no sources/parents. Effects are always “leaf nodes,” with "
"no subscribers. Memos typically have both sources and subscribers."
msgstr ""

#: src/appendix_reactive_graph.md:35
msgid "Simple Dependencies"
msgstr ""

#: src/appendix_reactive_graph.md:37
msgid "So imagine the following code:"
msgstr ""

#: src/appendix_reactive_graph.md:40 src/appendix_reactive_graph.md:69
#: src/appendix_reactive_graph.md:133
msgid "// A\n"
msgstr ""

#: src/appendix_reactive_graph.md:42 src/appendix_reactive_graph.md:71
#: src/appendix_reactive_graph.md:135
msgid "// B\n"
msgstr ""

#: src/appendix_reactive_graph.md:45 src/appendix_reactive_graph.md:74
#: src/appendix_reactive_graph.md:138
msgid "// C\n"
msgstr ""

#: src/appendix_reactive_graph.md:48
msgid "\"{}\""
msgstr ""

#: src/appendix_reactive_graph.md:54
msgid ""
"You can easily imagine the reactive graph here: `name` is the only signal/"
"origin node, the `create_effect` is the only effect/terminal node, and "
"there’s one intervening memo."
msgstr ""

#: src/appendix_reactive_graph.md:64
msgid "Splitting Branches"
msgstr ""

#: src/appendix_reactive_graph.md:66
msgid "Let’s make it a little more complex."
msgstr ""

#: src/appendix_reactive_graph.md:77 src/appendix_reactive_graph.md:141
msgid "// D\n"
msgstr ""

#: src/appendix_reactive_graph.md:80
msgid "\"len = {}\""
msgstr ""

#: src/appendix_reactive_graph.md:82
msgid "// E\n"
msgstr ""

#: src/appendix_reactive_graph.md:85
msgid "\"name = {}\""
msgstr ""

#: src/appendix_reactive_graph.md:89
msgid ""
"This is also pretty straightforward: a signal source signal (`name`/`A`) "
"divides into two parallel tracks: `name_upper`/`B` and `name_len`/`C`, each "
"of which has an effect that depends on it."
msgstr ""

#: src/appendix_reactive_graph.md:99
msgid "Now let’s update the signal."
msgstr ""

#: src/appendix_reactive_graph.md:105
msgid "We immediately log"
msgstr ""

#: src/appendix_reactive_graph.md:112
msgid "Let’s do it again."
msgstr ""

#: src/appendix_reactive_graph.md:115
msgid "\"Tim\""
msgstr ""

#: src/appendix_reactive_graph.md:118
msgid "The log should shows"
msgstr ""

#: src/appendix_reactive_graph.md:124
msgid "`len = 3` does not log again."
msgstr ""

#: src/appendix_reactive_graph.md:126
msgid ""
"Remember: the goal of the reactive system is to run effects as infrequently "
"as possible. Changing `name` from `\"Bob\"` to `\"Tim\"` will cause each of "
"the memos to re-run. But they will only notify their subscribers if their "
"value has actually changed. `\"BOB\"` and `\"TIM\"` are different, so that "
"effect runs again. But both names have the length `3`, so they do not run "
"again."
msgstr ""

#: src/appendix_reactive_graph.md:128
msgid "Reuniting Branches"
msgstr ""

#: src/appendix_reactive_graph.md:130
msgid "One more example, of what’s sometimes called **the diamond problem**."
msgstr ""

#: src/appendix_reactive_graph.md:144
msgid "\"{} is {} characters long\""
msgstr ""

#: src/appendix_reactive_graph.md:148
msgid "What does the graph look like for this?"
msgstr ""

#: src/appendix_reactive_graph.md:158
msgid ""
"You can see why it's called the “diamond problem.” If I’d connected the "
"nodes with straight lines instead of bad ASCII art, it would form a diamond: "
"two memos, each of which depend on a signal, which feed into the same effect."
msgstr ""

#: src/appendix_reactive_graph.md:160
msgid ""
"A naive, push-based reactive implementation would cause this effect to run "
"twice, which would be bad. (Remember, our goal is to run effects as "
"infrequently as we can.) For example, you could implement a reactive system "
"such that signals and memos immediately propagate their changes all the way "
"down the graph, through each dependency, essentially traversing the graph "
"depth-first. In other words, updating `A` would notify `B`, which would "
"notify `D`; then `A` would notify `C`, which would notify `D` again. This is "
"both inefficient (`D` runs twice) and glitchy (`D` actually runs with the "
"incorrect value for the second memo during its first run.)"
msgstr ""

#: src/appendix_reactive_graph.md:162
msgid "Solving the Diamond Problem"
msgstr ""

#: src/appendix_reactive_graph.md:164
msgid ""
"Any reactive implementation worth its salt is dedicated to solving this "
"issue. There are a number of different approaches (again, [see Milo’s "
"article](https://dev.to/modderme123/super-charging-fine-grained-reactive-"
"performance-47ph) for an excellent overview)."
msgstr ""

#: src/appendix_reactive_graph.md:166
msgid "Here’s how ours works, in brief."
msgstr ""

#: src/appendix_reactive_graph.md:168
msgid "A reactive node is always in one of three states:"
msgstr ""

#: src/appendix_reactive_graph.md:170
msgid "`Clean`: it is known not to have changed"
msgstr ""

#: src/appendix_reactive_graph.md:171
msgid "`Check`: it is possible it has changed"
msgstr ""

#: src/appendix_reactive_graph.md:172
msgid "`Dirty`: it has definitely changed"
msgstr ""

#: src/appendix_reactive_graph.md:174
msgid ""
"Updating a signal `Dirty` marks that signal `Dirty`, and marks all its "
"descendants `Check`, recursively. Any of its descendants that are effects "
"are added to a queue to be re-run."
msgstr ""

#: src/appendix_reactive_graph.md:184
msgid ""
"Now those effects are run. (All of the effects will be marked `Check` at "
"this point.) Before re-running its computation, the effect checks its "
"parents to see if they are dirty. So"
msgstr ""

#: src/appendix_reactive_graph.md:186
msgid "So `D` goes to `B` and checks if it is `Dirty`."
msgstr ""

#: src/appendix_reactive_graph.md:187
msgid "But `B` is also marked `Check`. So `B` does the same thing:"
msgstr ""

#: src/appendix_reactive_graph.md:188
msgid "`B` goes to `A`, and finds that it is `Dirty`."
msgstr ""

#: src/appendix_reactive_graph.md:189
msgid "This means `B` needs to re-run, because one of its sources has changed."
msgstr ""

#: src/appendix_reactive_graph.md:190
msgid "`B` re-runs, generating a new value, and marks itself `Clean`"
msgstr ""

#: src/appendix_reactive_graph.md:191
msgid ""
"Because `B` is a memo, it then checks its prior value against the new value."
msgstr ""

#: src/appendix_reactive_graph.md:192
msgid ""
"If they are the same, `B` returns \"no change.\" Otherwise, it returns "
"\"yes, I changed.\""
msgstr ""

#: src/appendix_reactive_graph.md:193
msgid ""
"If `B` returned “yes, I changed,” `D` knows that it definitely needs to run "
"and re-runs immediately before checking any other sources."
msgstr ""

#: src/appendix_reactive_graph.md:194
msgid ""
"If `B` returned “no, I didn’t change,” `D` continues on to check `C` (see "
"process above for `B`.)"
msgstr ""

#: src/appendix_reactive_graph.md:195
msgid "If neither `B` nor `C` has changed, the effect does not need to re-run."
msgstr ""

#: src/appendix_reactive_graph.md:196
msgid "If either `B` or `C` did change, the effect now re-runs."
msgstr ""

#: src/appendix_reactive_graph.md:198
msgid ""
"Because the effect is only marked `Check` once and only queued once, it only "
"runs once."
msgstr ""

#: src/appendix_reactive_graph.md:200
msgid ""
"If the naive version was a “push-based” reactive system, simply pushing "
"reactive changes all the way down the graph and therefore running the effect "
"twice, this version could be called “push-pull.” It pushes the `Check` "
"status all the way down the graph, but then “pulls” its way back up. In "
"fact, for large graphs it may end up bouncing back up and down and left and "
"right on the graph as it tries to determine exactly which nodes need to re-"
"run."
msgstr ""

#: src/appendix_reactive_graph.md:202
msgid ""
"**Note this important trade-off**: Push-based reactivity propagates signal "
"changes more quickly, at the expense of over-re-running memos and effects. "
"Remember: the reactive system is designed to minimize how often you re-run "
"effects, on the (accurate) assumption that side effects are orders of "
"magnitude more expensive than this kind of cache-friendly graph traversal "
"happening entirely inside the library’s Rust code. The measurement of a good "
"reactive system is not how quickly it propagates changes, but how quickly it "
"propagates changes _without over-notifying_."
msgstr ""

#: src/appendix_reactive_graph.md:204
msgid "Memos vs. Signals"
msgstr ""

#: src/appendix_reactive_graph.md:206
msgid ""
"Note that signals always notify their children; i.e., a signal is always "
"marked `Dirty` when it updates, even if its new value is the same as the old "
"value. Otherwise, we’d have to require `PartialEq` on signals, and this is "
"actually quite an expensive check on some types. (For example, add an "
"unnecessary equality check to something like `some_vec_signal.update(|n| n."
"pop())` when it’s clear that it has in fact changed.)"
msgstr ""

#: src/appendix_reactive_graph.md:208
msgid ""
"Memos, on the other hand, check whether they change before notifying their "
"children. They only run their calculation once, no matter how many times you "
"`.get()` the result, but they run whenever their signal sources change. This "
"means that if the memo’s computation is _very_ expensive, you may actually "
"want to memoize its inputs as well, so that the memo only re-calculates when "
"it is sure its inputs have changed."
msgstr ""

#: src/appendix_reactive_graph.md:210
msgid "Memos vs. Derived Signals"
msgstr ""

#: src/appendix_reactive_graph.md:212
msgid ""
"All of this is cool, and memos are pretty great. But most actual "
"applications have reactive graphs that are quite shallow and quite wide: you "
"might have 100 source signals and 500 effects, but no memos or, in rare "
"case, three or four memos between the signal and the effect. Memos are "
"extremely good at what they do: limiting how often they notify their "
"subscribers that they have changed. But as this description of the reactive "
"system should show, they come with overhead in two forms:"
msgstr ""

#: src/appendix_reactive_graph.md:214
msgid "A `PartialEq` check, which may or may not be expensive."
msgstr ""

#: src/appendix_reactive_graph.md:215
msgid "Added memory cost of storing another node in the reactive system."
msgstr ""

#: src/appendix_reactive_graph.md:216
msgid "Added computational cost of reactive graph traversal."
msgstr ""

#: src/appendix_reactive_graph.md:218
msgid ""
"In cases in which the computation itself is cheaper than this reactive work, "
"you should avoid “over-wrapping” with memos and simply use derived signals. "
"Here’s a great example in which you should never use a memo:"
msgstr ""

#: src/appendix_reactive_graph.md:221
msgid "// none of these make sense as memos\n"
msgstr ""

#: src/appendix_reactive_graph.md:232
msgid ""
"Even though memoizing would technically save an extra calculation of `d` "
"between setting `a` to `3` and `5`, these calculations are themselves "
"cheaper than the reactive algorithm."
msgstr ""

#: src/appendix_reactive_graph.md:234
msgid ""
"At the very most, you might consider memoizing the final node before running "
"some expensive side effect:"
msgstr ""
